<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2019电赛准备阶段学习总结</title>
      <link href="/archives/f10b0e1a.html"/>
      <url>/archives/f10b0e1a.html</url>
      
        <content type="html"><![CDATA[<p>第二年参加电赛了，今年来到测控无人机方向，主要记录一些学习经历。<br>再苦逼也要加油呀！！！</p><a id="more"></a><h2 id="2019-7-18更新"><a href="#2019-7-18更新" class="headerlink" title="2019.7.18更新"></a>2019.7.18更新</h2><p>最近，我们组在紧张地准备电赛测控四旋翼无人机的题目，在准备过程中，我们购买了无名创新的TM4C123的飞控，正在研究源码和视觉模块的运用。<br>无名创新的飞控是开源的，在B站上面有对应的讲解视频，涉及操作类和代码讲解类的视频，下面附上其网址：  </p><p>无名科创开源飞控QQ群：540707961<br><a href="http://blog.csdn.net/u011992534" target="_blank" rel="noopener">CSDN博客</a><br>优酷ID：NamelessCotrun无名小哥<br><a href="https://space.bilibili.com/67803559/#/video" target="_blank" rel="noopener">B站教学视频</a><br><a href="http://www.openedv.com/forum.php?mod=viewthread&tid=234214&extra=page=1" target="_blank" rel="noopener">客户使用心得、改进意见征集贴</a><br><a href="https://shop348646912.taobao.com/?spm=2013.1.1000126.2.5ce78a88ht1sO2" target="_blank" rel="noopener">淘宝店铺</a><br>百度贴吧:无名科创开源飞控<br><a href="https://www.nameless.tech" target="_blank" rel="noopener">公司官网</a>  </p><p>我们组在学习的过程中，按照老师给的建议，决定采用外加一个TM4C123的控制板作为模拟的遥控器（即脱掉遥控器自主飞行降落），其中，无名的飞控是采用PPM信号编码和解码的方式，为了模仿遥控器的信号，我们参考了网上的一些文档，觉得十分有用：</p><h3 id="PPM原理和代码"><a href="#PPM原理和代码" class="headerlink" title="PPM原理和代码"></a>PPM原理和代码</h3><p><a href="https://blog.csdn.net/Aaron_Suen/article/details/79416477" target="_blank" rel="noopener">https://blog.csdn.net/Aaron_Suen/article/details/79416477</a><br><a href="https://blog.csdn.net/yibu_refresh/article/details/45752131" target="_blank" rel="noopener">https://blog.csdn.net/yibu_refresh/article/details/45752131</a>  </p><hr><h2 id="2019-7-26更新"><a href="#2019-7-26更新" class="headerlink" title="2019.7.26更新"></a>2019.7.26更新</h2><p>这几天我们队进度有点卡顿了，正在向两方面进展。<br>我们准备了两个方案：<br><strong>使用之前所说的外置模拟遥控器的方式</strong><br><strong>使用无名飞控自带的SDK模式进行二次开发</strong></p><p>与此时同，我开始研究OpenMV视觉模块，OpenMV是基于嵌入式STM32单片机的基础上，经过层层封装之后，运用microPython语法开发的模块。（我们用的是OpenMV mini板）<br><img src="/images/openmv.jpg" alt="OpenMV">  </p><h3 id="OpenMV寻找直角"><a href="#OpenMV寻找直角" class="headerlink" title="OpenMV寻找直角"></a>OpenMV寻找直角</h3><p>由于电赛视觉模块寻迹的原因，可能会涉及无人机直角转弯的问题，通过查找网上资料，获得了如下Python代码,感觉有一定的参考价值：</p><p>通过这个程序，我发现可以调用<code>calculate_angle(line1, line2)</code>函数得出偏角值，调用<code>calculate_intersection(line1, line2)</code>函数得出当前x和y的坐标值<code>(cross_x, cross_y)</code>，这样，再通过串口将对应的数据帧发送给飞控，在飞控端再进行帧格式解析，得出对应的数据后，在进行飞机相应的姿态调整。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_angle</span><span class="params">(line1, line2)</span>:</span></span><br><span class="line">    <span class="comment"># 利用四边形的角公式， 计算出直线夹角</span></span><br><span class="line">    angle  = (<span class="number">180</span> - abs(line1.theta() - line2.theta()))</span><br><span class="line">    <span class="keyword">if</span> angle > <span class="number">90</span>:</span><br><span class="line">        angle = <span class="number">180</span> - angle</span><br><span class="line">    <span class="keyword">return</span> angle</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_intersection</span><span class="params">(line1, line2)</span>:</span></span><br><span class="line">    <span class="comment"># 计算两条线的交点</span></span><br><span class="line">    a1 = line1.y2() - line1.y1()</span><br><span class="line">    b1 = line1.x1() - line1.x2()</span><br><span class="line">    c1 = line1.x2()*line1.y1() - line1.x1()*line1.y2()</span><br><span class="line"></span><br><span class="line">    a2 = line2.y2() - line2.y1()</span><br><span class="line">    b2 = line2.x1() - line2.x2()</span><br><span class="line">    c2 = line2.x2() * line2.y1() - line2.x1()*line2.y2()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a1 * b2 - a2 * b1) != <span class="number">0</span> <span class="keyword">and</span> (a2 * b1 - a1 * b2) != <span class="number">0</span>:</span><br><span class="line">        cross_x = int((b1*c2-b2*c1)/(a1*b2-a2*b1))</span><br><span class="line">        cross_y = int((c1*a2-c2*a1)/(a1*b2-a2*b1))</span><br><span class="line">        <span class="keyword">return</span> (cross_x, cross_y)</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">-1</span>, <span class="number">-1</span>)</span><br></pre></td></tr></tbody></table></figure><p>下面附上完整源代码：  </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Find Lines Example</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This example shows off how to find lines in the image. For each line object</span></span><br><span class="line"><span class="comment"># found in the image a line object is returned which includes the line's rotation.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: Line detection is done by using the Hough Transform:</span></span><br><span class="line"><span class="comment"># http://en.wikipedia.org/wiki/Hough_transform</span></span><br><span class="line"><span class="comment"># Please read about it above for more information on what `theta` and `rho` are.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find_lines() finds infinite length lines. Use find_line_segments() to find non-infinite lines.</span></span><br><span class="line"></span><br><span class="line">enable_lens_corr = <span class="literal">False</span> <span class="comment"># turn on for straighter lines...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line">sensor.reset()</span><br><span class="line">sensor.set_pixformat(sensor.GRAYSCALE) <span class="comment"># grayscale is faster</span></span><br><span class="line">sensor.set_framesize(sensor.QQVGA)</span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)</span><br><span class="line">clock = time.clock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># min_degree = 0 # 直线最小角度</span></span><br><span class="line"><span class="comment"># max_degree = 179 # 直线最大角度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否为直角的阈值</span></span><br><span class="line">right_angle_threshold = (<span class="number">70</span>, <span class="number">90</span>)</span><br><span class="line">binary_threshold = [(<span class="number">0</span>, <span class="number">60</span>)]</span><br><span class="line">forget_ratio = <span class="number">0.8</span></span><br><span class="line">move_threshold = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_angle</span><span class="params">(line1, line2)</span>:</span></span><br><span class="line">    <span class="comment"># 利用四边形的角公式， 计算出直线夹角</span></span><br><span class="line">    angle  = (<span class="number">180</span> - abs(line1.theta() - line2.theta()))</span><br><span class="line">    <span class="keyword">if</span> angle > <span class="number">90</span>:</span><br><span class="line">        angle = <span class="number">180</span> - angle</span><br><span class="line">    <span class="keyword">return</span> angle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_right_angle</span><span class="params">(line1, line2)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> right_angle_threshold</span><br><span class="line">    <span class="comment"># 判断两个直线之间的夹角是否为直角</span></span><br><span class="line">    angle = calculate_angle(line1, line2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> angle >= right_angle_threshold[<span class="number">0</span>] <span class="keyword">and</span> angle <=  right_angle_threshold[<span class="number">1</span>]:</span><br><span class="line">        <span class="comment"># 判断在阈值范围内</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_verticle_lines</span><span class="params">(lines)</span>:</span></span><br><span class="line">    line_num = len(lines)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(line_num <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, line_num):</span><br><span class="line">            <span class="keyword">if</span> is_right_angle(lines[i], lines[j]):</span><br><span class="line">                <span class="keyword">return</span> (lines[i], lines[j])</span><br><span class="line">    <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_intersection</span><span class="params">(line1, line2)</span>:</span></span><br><span class="line">    <span class="comment"># 计算两条线的交点</span></span><br><span class="line">    a1 = line1.y2() - line1.y1()</span><br><span class="line">    b1 = line1.x1() - line1.x2()</span><br><span class="line">    c1 = line1.x2()*line1.y1() - line1.x1()*line1.y2()</span><br><span class="line"></span><br><span class="line">    a2 = line2.y2() - line2.y1()</span><br><span class="line">    b2 = line2.x1() - line2.x2()</span><br><span class="line">    c2 = line2.x2() * line2.y1() - line2.x1()*line2.y2()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a1 * b2 - a2 * b1) != <span class="number">0</span> <span class="keyword">and</span> (a2 * b1 - a1 * b2) != <span class="number">0</span>:</span><br><span class="line">        cross_x = int((b1*c2-b2*c1)/(a1*b2-a2*b1))</span><br><span class="line">        cross_y = int((c1*a2-c2*a1)/(a1*b2-a2*b1))</span><br><span class="line">        <span class="keyword">return</span> (cross_x, cross_y)</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">-1</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_cross_point</span><span class="params">(cross_x, cross_y)</span>:</span></span><br><span class="line">    img.draw_cross(cross_x, cross_y)</span><br><span class="line">    img.draw_circle(cross_x, cross_y, <span class="number">5</span>)</span><br><span class="line">    img.draw_circle(cross_x, cross_y, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># All lines also have `x1()`, `y1()`, `x2()`, and `y2()` methods to get their end-points</span></span><br><span class="line"><span class="comment"># and a `line()` method to get all the above as one 4 value tuple for `draw_line()`.</span></span><br><span class="line"></span><br><span class="line">old_cross_x = <span class="number">0</span></span><br><span class="line">old_cross_y = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#threshold</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    clock.tick()</span><br><span class="line">    img = sensor.snapshot()</span><br><span class="line">    img.binary(binary_threshold)</span><br><span class="line">    img.gaussian(<span class="number">5</span>)</span><br><span class="line">    img.gaussian(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 去除摄像头畸变， 这里我们采用的是13.8mm的，近距离没有畸变效果</span></span><br><span class="line">    <span class="comment"># if enable_lens_corr: img.lens_corr(1.8) # for 2.8mm lens...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># `threshold` controls how many lines in the image are found. Only lines with</span></span><br><span class="line">    <span class="comment"># edge difference magnitude sums greater than `threshold` are detected...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># More about `threshold` - each pixel in the image contributes a magnitude value</span></span><br><span class="line">    <span class="comment"># to a line. The sum of all contributions is the magintude for that line. Then</span></span><br><span class="line">    <span class="comment"># when lines are merged their magnitudes are added togheter. Note that `threshold`</span></span><br><span class="line">    <span class="comment"># filters out lines with low magnitudes before merging. To see the magnitude of</span></span><br><span class="line">    <span class="comment"># un-merged lines set `theta_margin` and `rho_margin` to 0...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># `theta_margin` and `rho_margin` control merging similar lines. If two lines</span></span><br><span class="line">    <span class="comment"># theta and rho value differences are less than the margins then they are merged.</span></span><br><span class="line"></span><br><span class="line">    lines =  img.find_lines(threshold = <span class="number">2000</span>, theta_margin = <span class="number">40</span>, rho_margin = <span class="number">20</span>, roi=(<span class="number">5</span>, <span class="number">5</span>, <span class="number">150</span>,<span class="number">110</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">       <span class="comment"># img.draw_line(line.line(), color = (255, 0, 0))</span></span><br><span class="line">    <span class="comment"># 如果画面中有两条直线</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(lines) >= <span class="number">2</span>:</span><br><span class="line">        (line1, line2) = find_verticle_lines(lines)</span><br><span class="line">        <span class="keyword">if</span> (line1 == <span class="literal">None</span> <span class="keyword">or</span> line2 == <span class="literal">None</span>):</span><br><span class="line">            <span class="comment"># 没有垂直的直线</span></span><br><span class="line">            draw_cross_point(old_cross_x, old_cross_y)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 画线</span></span><br><span class="line">        <span class="comment"># img.draw_line(line1.line(), color = (255, 0, 0))</span></span><br><span class="line">        <span class="comment"># img.draw_line(line2.line(), color = (255, 0, 0))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算交点</span></span><br><span class="line">        (cross_x, cross_y) = calculate_intersection(line1, line2)</span><br><span class="line">        print(<span class="string">"cross_x:  %d, cross_y: %d"</span>%(old_cross_x, old_cross_y))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cross_x != <span class="number">-1</span> <span class="keyword">and</span> cross_y != <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">if</span> abs(cross_x - old_cross_x) < move_threshold <span class="keyword">and</span> abs(cross_y - old_cross_y) < move_threshold:</span><br><span class="line">                <span class="comment"># 小于移动阈值， 不移动</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                old_cross_x = int(old_cross_x * (<span class="number">1</span> - forget_ratio) + cross_x * forget_ratio)</span><br><span class="line">                old_cross_y = int(old_cross_y * (<span class="number">1</span> - forget_ratio) + cross_y * forget_ratio)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        draw_cross_point(old_cross_x, old_cross_y)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"FPS %f"</span> % clock.fps())</span><br><span class="line"></span><br><span class="line"><span class="comment"># About negative rho values:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A [theta+0:-rho] tuple is the same as [theta+180:+rho].</span></span><br></pre></td></tr></tbody></table></figure><p>这里附上<a href="http://makermare.com:60010/example/feature/right-angle-detection.html" target="_blank" rel="noopener">源代码链接</a>。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 培训学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电赛 </tag>
            
            <tag> OpenMV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好鸭~</title>
      <link href="/archives/f2d5fff6.html"/>
      <url>/archives/f2d5fff6.html</url>
      
        <content type="html"><![CDATA[<p>你好！这里是Sublime的个人小屋哦ヾ(◍°∇°◍)ﾉﾞ<br>从今天起，我准备开始写博客啦<del>~</del><br>希望大家支持我呀^_^</p><a id="more"></a><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"hello world, hello my blog!"</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span><<<span class="string">"hello world, hello my blog!"</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span><span class="string">"hello world, hello my blog!"</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"hello world, hello my blog!"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"hello world, hello my blog!"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight vb"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MsgBox<span class="string">"hello world, hello my blog!"</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 'hello world, hello my blog!'</span><br></pre></td></tr></tbody></table></figure><figure class="highlight perl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span><span class="string">'hello world, hello my blog!'</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"hello world, hello my blog!"</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine("hello world, hello my blog!")</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">br</span>/></span>hello world, hello my blog!<span class="tag"><<span class="name">br</span>/></span></span><br></pre></td></tr></tbody></table></figure><p>Have a GOOD TIME!  你的鼓励就是我前进的动力呐~  (◕ᴗ◕✿)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>

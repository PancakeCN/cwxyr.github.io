<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星辰大海٩(๑❛ᴗ❛๑)۶</title>
  
  <subtitle>念念不忘，必有回响</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cwxyr.github.io/"/>
  <updated>2019-08-21T04:57:36.480Z</updated>
  <id>http://cwxyr.github.io/</id>
  
  <author>
    <name>Sublime.rui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【学习笔记】2019电赛--无人机题目OpenMV总结</title>
    <link href="http://cwxyr.github.io/archives/d508d500.html"/>
    <id>http://cwxyr.github.io/archives/d508d500.html</id>
    <published>2019-08-16T15:32:25.000Z</published>
    <updated>2019-08-21T04:57:36.480Z</updated>
    
    <content type="html"><![CDATA[<p>2019年电赛，前前后后经历了四天吧。从8月7好开始，到10号结束，浑浑噩噩，不分白昼地为了无人机的题目而努力吧。我的队友负责飞控，我也就负责视觉模块OpenMV程序的编写啦。虽然比赛下来感觉发挥不是特别好，但还是有所收获吧。这里，我把比赛自己用到的相关程序代码贴出来并做了简要总结。  </p><p>无论如何都不能放弃呀！勤做笔记，加油！  </p><p><img src="https://i.loli.net/2019/08/16/sRXC1Sko8Igf3rt.jpg" alt="Hurry Up"></p><a id="more"></a><p>上一篇相关博文，<strong>准备阶段OpenMV学习笔记链接：<a href="https://sublimerui.top/archives/f10b0e1a.html" target="_blank" rel="noopener">https://sublimerui.top/archives/f10b0e1a.html</a></strong></p><h1 id="无人机题目分析"><a href="#无人机题目分析" class="headerlink" title="无人机题目分析"></a>无人机题目分析</h1><p><strong>今年的电赛题目着实让人觉得出题挺新颖的。新颖的同时，困难度就直线提升了（呜呜呜，我们队就是受害者之一，说好的光流可以定点呢，结果那种灰白条纹地面根本就定不住，<del>真的想狠狠地吐槽一下砖家组</del>）</strong>  </p><p>哎，做下来大部分时间懵逼，都是一把辛酸一把泪呀~</p><p>言归正传，今年的电赛无人机题目B题——巡线机器人，具体要求是让我们的无人机从一个杆起飞，沿着线飞向宁一个杆，飞行过程中会拍摄条形码和二维码，绕杆一圈后，再降落。题目如下：  </p><p><img src="https://i.loli.net/2019/08/16/1mbytxXeTfUMODw.png" alt="题目1"><br><img src="https://i.loli.net/2019/08/16/UfvZ3gVPyBmJAO5.png" alt="题目2"><br><img src="https://i.loli.net/2019/08/16/N9XSR86yvMg1YVs.png" alt="题目3"><br><img src="https://i.loli.net/2019/08/17/Hl1eZWOT9I7VmXg.png" alt="题目4"><br><img src="https://i.loli.net/2019/08/17/Uft3dGCArjkh26g.png" alt="题目5"><br><img src="https://i.loli.net/2019/08/17/EMt9haQgcV8CsRD.png" alt="题目6"><br><img src="https://i.loli.net/2019/08/17/pWHxcUMsYvVqD6t.png" alt="题目7"></p><blockquote><p><strong>PS</strong>:这里附上2019年电赛的各方向题目，已经放在Github上：<a href="https://github.com/cwxyr/nuedc-2019-openmv/blob/master/2019%E7%94%B5%E8%B5%9B%E9%A2%98%E7%9B%AE.zip" target="_blank" rel="noopener">2019电赛题目.zip</a></p></blockquote><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>题目中，涉及OpenMV的部分，主要可以分为以下几类吧：  </p><ol><li><p>识别并拍摄条形码和二维码，储存于SD卡中；</p></li><li><p>OpenMV巡线（此方法是由于实际比赛中发现无法用光流在灰白条纹地面上定点，即无法控制其水平方向的误差偏移）  </p><ul><li><p>方法一：识别并拟合两条杆之间线缆的直线，返回偏差距离和偏差角度（缺点：OpenMV视野横向不丢失距离太小了）；  </p></li><li><p>方法二：拟合识别条纹边缘（由于条纹宽度规定了，可以寻找灰白条纹和外部白色地面的交界处），拟合出边缘直线，返回偏差距离和偏差角度（相对来说更稳定，这也是我们队最后用的方法）；</p></li></ul></li><li><p>识别并返回环形圆板中心红点坐标位置，使飞机定圆点（发挥部分）  </p></li><li><p>其他（例如起飞后用OpenMV识别靠杆，识别到特定标志后开始绕杆等等）</p></li></ol><h1 id="逐类型分析"><a href="#逐类型分析" class="headerlink" title="逐类型分析"></a>逐类型分析</h1><h2 id="拍摄条形码和二维码并储存SD卡"><a href="#拍摄条形码和二维码并储存SD卡" class="headerlink" title="拍摄条形码和二维码并储存SD卡"></a>拍摄条形码和二维码并储存SD卡</h2><p>有关于条形码和二维码的讲解我已将在<a href="https://sublimerui.top/archives/f10b0e1a.html" target="_blank" rel="noopener">上一篇博文</a>中有所总结和归纳了，这里，直接贴上我写的部分代码吧，全部代码已经放在<a href="https://github.com/cwxyr/nuedc-2019-openmv" target="_blank" rel="noopener">我的Github</a>上面了，需要的话可以自己下载呐~</p><p>自己手写的完整程序已放在Github上：<strong><a href="https://github.com/cwxyr/nuedc-2019-openmv/blob/master/shot_images_to_save.py" target="_blank" rel="noopener">shot_images_to_save.py</a></strong>  </p><ul><li>条形码和二维码拍摄：<br>函数<code>shot_images_while_tracking_lines()</code>用于拍摄并储存找 照片于SD卡中。其中，此段程序会分别对条形码连续循环拍3三张，分别命名为“barcod_1.jpg”，“barcod_2.jpg”和“barcod_3.jpg”（二维码同理），只要OpenMV插上了SD卡后，一旦识别到相关条码后，便会拍摄并自动保存到卡中。<br>完整程序代码中，如果识别到条形码，OpenMV就会闪绿灯拍照；识别到二维码后，OpenMV会闪红灯拍照。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############ 拍照 ###############</span></span><br><span class="line"></span><br><span class="line">barcode_num = <span class="number">0</span></span><br><span class="line">qrcode_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拍摄照片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shot_images_while_tracking_lines</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#global had_finished_barcode, had_finished_qrcode</span></span><br><span class="line">    <span class="keyword">global</span> barcode_detected, qrcode_detected, barcode_num, qrcode_num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> barcode_detected: <span class="comment">#and (not had_finished_barcode):</span></span><br><span class="line">        <span class="comment">#sensor.set_framesize(sensor.QVGA)</span></span><br><span class="line">        <span class="comment">#barcode_detected = 0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> barcode_num <= <span class="number">3</span>:</span><br><span class="line">            barcode_num += <span class="number">1</span></span><br><span class="line">            barcode_name = <span class="string">"barcode_"</span> + str(barcode_num)</span><br><span class="line">            sensor.snapshot().save(barcode_name + <span class="string">".jpg"</span>)</span><br><span class="line"></span><br><span class="line">            print(barcode_name + <span class="string">".jpg is saved!"</span>)</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> barcode_num >= <span class="number">3</span>:</span><br><span class="line">                barcode_num = <span class="number">0</span></span><br><span class="line">                <span class="comment">#barcode_detected = 0</span></span><br><span class="line">                print(<span class="string">"bar:"</span>, barcode_detected)</span><br><span class="line">                <span class="comment">#had_finished_barcode = 1</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> qrcode_detected: <span class="comment">#and (not had_finished_qrcode):</span></span><br><span class="line">        <span class="comment">#sensor.set_framesize(sensor.QVGA)</span></span><br><span class="line">        <span class="comment">#qrcode_detected = 0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> qrcode_num <= <span class="number">4</span>:</span><br><span class="line">            qrcode_num += <span class="number">1</span></span><br><span class="line">            qrcode_name = <span class="string">"qrcode_"</span> + str(qrcode_num)</span><br><span class="line">            sensor.snapshot().save(qrcode_name + <span class="string">".jpg"</span>)</span><br><span class="line"></span><br><span class="line">            print(qrcode_name + <span class="string">".jpg is saved!"</span>)</span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> qrcode_num >= <span class="number">3</span>:</span><br><span class="line">                qrcode_num = <span class="number">0</span></span><br><span class="line">                <span class="comment">#qrcode_detected = 0</span></span><br><span class="line">                print(<span class="string">"qr:"</span>, qrcode_detected)</span><br><span class="line">                <span class="comment">#had_finished_qrcode = 1</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure><ul><li>识别条形码（识别黄色）和二维码（二值化后计算像素点，设置阈值）：<br>此段程序中，函数<code>count_pixels_with_movement(img)</code>用于识别并判断识别条形码和二维码的条件和阈值。以条形码为例，这里通过色块识别的方法，调用<code>img.find_blobs()</code>函数，通过设置黄色阈值，达到识别到黄色条码的目的。其中，<code>barcode_pixels_threshold</code>是一个列表，储存的2个元素分别是黄色阈值下限和上限。<br>此外，我也尝试运用统计像素点的方式去识别二维码和条形码（这里已经被注释掉），其方法是先将图像按照一定的阈值二值化后，调用<code>img.get_pixel()</code>函数，统计满足像素值为255（即白色）的像素个数，同时，设定特定的像素阈值（如<code>qrcode_pixels_threshold</code>等等，与黄色检测同理，也有阈值上下限两个阈值），也可以达到同样的效果。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">############ 像素识别 ###########</span></span><br><span class="line"></span><br><span class="line">barcode_cnt = <span class="number">0</span></span><br><span class="line">qrcode_cnt = <span class="number">0</span></span><br><span class="line">pole_cnt = <span class="number">0</span></span><br><span class="line">LED_ON = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_pixels_with_movement</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x_width, y_height</span><br><span class="line">    <span class="keyword">global</span> barcode_detected, qrcode_detected</span><br><span class="line">    <span class="keyword">global</span> barcode_cnt, qrcode_cnt, pole_cnt</span><br><span class="line">    <span class="keyword">global</span> LED_ON</span><br><span class="line"></span><br><span class="line">    blob = img.find_blobs(barcode_pixels_threshold, pixels_threshold=<span class="number">150</span>, area_threshold=<span class="number">150</span>, merge=<span class="literal">True</span>, margin=<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> blob:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> blob:</span><br><span class="line">            img.draw_rectangle(i.rect(), color = <span class="number">127</span>)</span><br><span class="line">            barcode_detected = <span class="number">1</span></span><br><span class="line">            LED_ON = <span class="number">1</span></span><br><span class="line">            print(<span class="string">"132123132131313131112311231"</span>) <span class="comment">#测试用，可删除</span></span><br><span class="line">            print(<span class="string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaa"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        barcode_detected = <span class="number">0</span></span><br><span class="line">        LED_ON = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    x_pos = <span class="number">0</span></span><br><span class="line">    y_pos = <span class="number">0</span></span><br><span class="line">    total_white_pixels = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x_pos <span class="keyword">in</span> range(x_width):</span><br><span class="line">        <span class="keyword">for</span> y_pos <span class="keyword">in</span> range(y_height):</span><br><span class="line">            <span class="keyword">if</span> img.get_pixel(x_pos, y_pos) == <span class="number">255</span>:</span><br><span class="line">                total_white_pixels += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#print("total white pixels are", total_white_pixels)</span></span><br><span class="line"><span class="comment">#    if total_white_pixels >= verticle_pixels_threshold[0] and \</span></span><br><span class="line"><span class="comment">#            total_white_pixels <= verticle_pixels_threshold[1]:       #直角</span></span><br><span class="line"><span class="comment">#        singleline_check.is_verticle = 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    elif total_white_pixels >= track_line_pixels_threshold[0] and \</span></span><br><span class="line"><span class="comment">#            total_white_pixels <= track_line_pixels_threshold[1]:     #巡线</span></span><br><span class="line"><span class="comment">#        singleline_check.is_verticle = 1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> total_white_pixels >= barcode_pixels_threshold[<span class="number">0</span>] <span class="keyword">and</span> \</span><br><span class="line">            total_white_pixels <= barcode_pixels_threshold[<span class="number">1</span>]:        <span class="comment">#条形码</span></span><br><span class="line">       <span class="keyword">if</span> barcode_cnt >= <span class="number">0</span> <span class="keyword">and</span> barcode_cnt <= <span class="number">49</span>:</span><br><span class="line">            barcode_cnt += <span class="number">1</span></span><br><span class="line">       <span class="keyword">if</span> barcode_cnt == <span class="number">50</span>:</span><br><span class="line">            barcode_cnt = <span class="number">-1</span></span><br><span class="line">            barcode_detected = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#        LED(1).toggle()  #红灯</span></span><br><span class="line">    <span class="comment">#        time.sleep(200)</span></span><br><span class="line">    <span class="comment">#        LED(1).toggle()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#if total_white_pixels >= qrcode_pixels_threshold[0] and \</span></span><br><span class="line">    <span class="comment">#        total_white_pixels <= qrcode_pixels_threshold[1]:         #二维码</span></span><br><span class="line">    <span class="comment">#    if qrcode_cnt >= 0 and qrcode_cnt <= 49:</span></span><br><span class="line">    <span class="comment">#        qrcode_cnt += 1</span></span><br><span class="line">    <span class="comment">#    if qrcode_cnt == 50:</span></span><br><span class="line">    <span class="comment">#        qrcode_cnt = -1</span></span><br><span class="line">    <span class="comment">#        qrcode_detected = 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#        LED(3).toggle()   #蓝灯</span></span><br><span class="line">    <span class="comment">#        time.sleep(200)</span></span><br><span class="line">    <span class="comment">#        LED(3).toggle()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#elif total_white_pixels >= near_the_pole_threshold[0] and \</span></span><br><span class="line">    <span class="comment">#        total_white_pixels <= near_the_pole_threshold[1]:         #到达杆</span></span><br><span class="line">    <span class="comment">#    if pole_cnt >= 0 and pole_cnt <= 49:</span></span><br><span class="line">    <span class="comment">#        pole_cnt += 1</span></span><br><span class="line">    <span class="comment">#    if pole_cnt == 50:</span></span><br><span class="line">    <span class="comment">#        pole_cnt = -1</span></span><br><span class="line">    <span class="comment">#        send_flag.pole_is_near = 1</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"the flags are: %d %d %d"</span>%(barcode_detected, qrcode_detected, send_flag.pole_is_near))   <span class="comment">#测试用，可删除</span></span><br></pre></td></tr></tbody></table></figure><h2 id="OpenMV巡线"><a href="#OpenMV巡线" class="headerlink" title="OpenMV巡线"></a>OpenMV巡线</h2><p>自己手写的完整程序已放在Github上：<strong><a href="https://github.com/cwxyr/nuedc-2019-openmv/blob/master/detect_and_track_edges.py" target="_blank" rel="noopener">detect_and_track_edges.py</a></strong></p><h3 id="方法一（拟合两杆间直线）"><a href="#方法一（拟合两杆间直线）" class="headerlink" title="方法一（拟合两杆间直线）"></a>方法一（拟合两杆间直线）</h3><p>巡线的时候，使用的是最小二乘法的线性回归算法，即运用<code>img.get_regression()</code>函数（这里打开了鲁棒算法<code>robust = True</code>，效果更好），计算其拟合直线后的结果，并拥有两个返回值（误差偏离值<code>singleline_check.flag2.rho()</code>和偏角值<code>singleline_check.flag2.theta()</code>）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找线</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">found_line</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="comment">#对图像所有阈值像素进行线性回归计算。这一计算通过最小二乘法进行，通常速度较快，但不能处理任何异常值。 若 robust 为True，则将</span></span><br><span class="line">    <span class="comment">#使用泰尔指数。泰尔指数计算图像中所有阈值像素间的所有斜率的中值。thresholds：追踪的颜色范围</span></span><br><span class="line">    singleline_check.flag2 = img.get_regression([(<span class="number">255</span>,<span class="number">255</span>)], robust = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> (singleline_check.flag2):</span><br><span class="line">        <span class="comment">#print(clock.fps())</span></span><br><span class="line">        singleline_check.rho_err = abs(singleline_check.flag2.rho())<span class="number">-0</span> <span class="comment">#求解线段偏移量的绝对值</span></span><br><span class="line">        <span class="keyword">if</span> singleline_check.flag2.theta()><span class="number">90</span>: <span class="comment">#求解角度的偏移量</span></span><br><span class="line">            singleline_check.theta_err = singleline_check.flag2.theta()<span class="number">-0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            singleline_check.theta_err = singleline_check.flag2.theta()<span class="number">-0</span></span><br><span class="line">        <span class="comment">#在图像中画一条直线。singleline_check.flag2.line()意思是(x0, y0)到(x1, y1)的直线；颜色可以是灰度值(0-255)，或者是彩色值</span></span><br><span class="line">        <span class="comment">#(r, g, b)的tupple，默认是白色</span></span><br><span class="line">        img.draw_line(singleline_check.flag2.line(), color = <span class="number">127</span>)</span><br><span class="line">        <span class="comment">#print(singleline_check.theta_err)</span></span><br></pre></td></tr></tbody></table></figure><p>拟合示意图如下，（其中，红色的为拟合直线）：</p><p><img src="https://i.loli.net/2019/08/21/uAZgSI6bPDifNhR.png" alt="拟合示意图"></p><blockquote><p><strong>PS</strong>：此方法准确度较高，但是OpenMV图像视野范围有限。当直线从图像视野最下端到达最上端，换算成无人机横向移动的距离仅有5-10cm，当无人机超出此范围时，将无法获取直线了，有一定的局限性。</p></blockquote><h3 id="方法二（拟合识别条纹边缘）"><a href="#方法二（拟合识别条纹边缘）" class="headerlink" title="方法二（拟合识别条纹边缘）"></a>方法二（拟合识别条纹边缘）</h3><p>此函数<code>track_edges(img)</code>中，同样使用<code>img.find_blobs()</code>找色块的方法，其中运用了简单角度和距离的计算方法。并返回条纹底色边界线的拟合直线，此函数的计算结果为拟合直线距离画面左边界距离<code>rho</code>和中心线的偏离角度<code>theta</code>。  </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">track_edges</span><span class="params">(img)</span>:</span> <span class="comment">#invert = True</span></span><br><span class="line">    blobs = img.find_blobs([edge_thresholds], pixels_threshold=<span class="number">50</span>, area_threshold=<span class="number">50</span>, merge=<span class="literal">False</span>, margin=<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> blobs:</span><br><span class="line">        sum_x = <span class="number">0</span></span><br><span class="line">        sum_theta = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(blobs)):</span><br><span class="line">            img.draw_rectangle(blobs[i].rect(), color = <span class="number">127</span>)</span><br><span class="line">            sum_x += (blobs[i].x() + blobs[i].w())</span><br><span class="line">            sum_theta += math.degrees(blobs[i].rotation())</span><br><span class="line"></span><br><span class="line">        per_x = sum_x / len(blobs)</span><br><span class="line">        per_y = y_height / <span class="number">2</span></span><br><span class="line">        per_theta = sum_theta / len(blobs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> per_theta >= <span class="number">0</span> <span class="keyword">and</span> per_theta < <span class="number">90</span>:</span><br><span class="line">            true_theta = <span class="number">90</span> - per_theta</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> per_theta >= <span class="number">90</span> <span class="keyword">and</span> per_theta <<span class="number">180</span>:</span><br><span class="line">            true_theta = (<span class="number">180</span> - per_theta) + <span class="number">90</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"per_x: %d per_y: %d true_theta: %d"</span>%(per_x, per_y, true_theta))</span><br><span class="line">        horizontal_line = (int(per_x), int(per_y), <span class="number">0</span>, int(per_y))</span><br><span class="line">        centre_cross    = (int(per_x), int(per_y))</span><br><span class="line"></span><br><span class="line">        img.draw_line(horizontal_line, color = <span class="number">127</span>)</span><br><span class="line">        img.draw_cross(centre_cross, color = <span class="number">127</span>)</span><br><span class="line"></span><br><span class="line">        singleline_check.rho_err = int(per_x)</span><br><span class="line">        singleline_check.theta_err = int(true_theta)</span><br><span class="line"></span><br><span class="line">    line.flag = <span class="number">1</span></span><br><span class="line">    uart.write(pack_linetrack_data())</span><br></pre></td></tr></tbody></table></figure><p>拟合示意图如下（其中，红色的为拟合直线）：</p><p><img src="https://i.loli.net/2019/08/21/x9vfbNuUJ3sOI2t.png" alt="拟合示意图"></p><p>这样，当检测到条纹边界的时候，会计算拟合出条纹边界的直线。  </p><blockquote><p><strong>PS</strong>：注意，使用这种方法一定要打开白平衡和自动增益！！！非常重要！！！我们队就吃了这样的亏，使得OpenMV距离地面较近的时候识别正常，一旦远离地面一定距离后，图像中将无法识别边界直线！！！  </p></blockquote><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在这里，应该将自动增益和白平衡打开</span></span><br><span class="line">sensor.set_auto_gain(<span class="literal">False</span>) <span class="comment"># 在进行颜色追踪时，必须关闭</span></span><br><span class="line">sensor.set_auto_whitebal(<span class="literal">False</span>) <span class="comment"># 在进行颜色追踪时，必须关闭</span></span><br></pre></td></tr></tbody></table></figure><h2 id="飞机悬停定圆点"><a href="#飞机悬停定圆点" class="headerlink" title="飞机悬停定圆点"></a>飞机悬停定圆点</h2><p>定特定颜色的原点时，将运用<code>img.find_blobs()</code>函数（这里将图像二值化了），返回色块其中心坐标<code>cx()</code>和<code>cy()</code>即可。对于不同的颜色的色块（如题目中的红色），需要实地测试得到不同的阈值。<br>这里的返回值为圆点中心坐标、像素大小和标志位。</p><p><img src="https://i.loli.net/2019/08/21/GakNHxnl5Ee9Qow.png" alt="圆点"></p><p>自己手写的完整程序已放在Github上：<a href="https://github.com/cwxyr/nuedc-2019-openmv/blob/master/main.py" target="_blank" rel="noopener">main.py</a></p><p>找圆点函数：  </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 点检测函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_dot</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="comment">#thresholds为黑色物体颜色的阈值，是一个元组，需要用括号［ ］括起来可以根据不同的颜色阈值更改；pixels_threshold 像素个数阈值，</span></span><br><span class="line">    <span class="comment">#如果色块像素数量小于这个值，会被过滤掉area_threshold 面积阈值，如果色块被框起来的面积小于这个值，会被过滤掉；merge 合并，如果</span></span><br><span class="line">    <span class="comment">#设置为True，那么合并所有重叠的blob为一个；margin 边界，如果设置为5，那么两个blobs如果间距5一个像素点，也会被合并。</span></span><br><span class="line">    <span class="keyword">for</span> blob <span class="keyword">in</span> img.find_blobs(thresholds, pixels_threshold=<span class="number">80</span>, area_threshold=<span class="number">80</span>, merge=<span class="literal">True</span>, margin=<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">if</span> dot.pixels<blob.pixels():<span class="comment">#寻找最大的黑点</span></span><br><span class="line">            <span class="comment">##先对图像进行分割，二值化，将在阈值内的区域变为白色，阈值外区域变为黑色</span></span><br><span class="line">            img.binary(thresholds)</span><br><span class="line">            <span class="comment">#对图像边缘进行侵蚀，侵蚀函数erode(size, threshold=Auto)，size为kernal的大小，去除边缘相邻处多余的点。threshold用</span></span><br><span class="line">            <span class="comment">#来设置去除相邻点的个数，threshold数值越大，被侵蚀掉的边缘点越多，边缘旁边白色杂点少；数值越小，被侵蚀掉的边缘点越少，边缘</span></span><br><span class="line">            <span class="comment">#旁边的白色杂点越多。</span></span><br><span class="line">            img.erode(<span class="number">2</span>)</span><br><span class="line">            dot.pixels=blob.pixels() <span class="comment">#将像素值赋值给dot.pixels</span></span><br><span class="line">            dot.x = blob.cx() <span class="comment">#将识别到的物体的中心点x坐标赋值给dot.x</span></span><br><span class="line">            dot.y = blob.cy() <span class="comment">#将识别到的物体的中心点x坐标赋值给dot.x</span></span><br><span class="line">            dot.ok= <span class="number">1</span></span><br><span class="line">            <span class="comment">#在图像中画一个十字；x,y是坐标；size是两侧的尺寸；color可根据自己的喜好设置</span></span><br><span class="line">            img.draw_cross(dot.x, dot.y, color=<span class="number">127</span>, size = <span class="number">10</span>)</span><br><span class="line">            <span class="comment">#在图像中画一个圆；x,y是坐标；5是圆的半径；color可根据自己的喜好设置</span></span><br><span class="line">            img.draw_circle(dot.x, dot.y, <span class="number">5</span>, color = <span class="number">127</span>)</span><br><span class="line"></span><br><span class="line">            print(<span class="string">"centre_x = %d, centre_y = %d"</span>%(dot.x, dot.y))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#判断标志位 赋值像素点数据</span></span><br><span class="line">    dot.flag = dot.ok</span><br><span class="line">    dot.num = dot.pixels</span><br><span class="line"></span><br><span class="line">    <span class="comment">#清零标志位</span></span><br><span class="line">    dot.pixels = <span class="number">0</span></span><br><span class="line">    dot.ok = <span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p><strong>剩下的其他功能自己就没有写啦(T＿T)，比赛四天太紧张了，这样已经很不错了，已经是全部成果~</strong></p></blockquote><hr><p>感谢你的耐心阅读呀(๑<em>◡</em>๑)，原创总结不易，收藏并评论一下呗~</p><p>你的支持就是我前进的动力呀~</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019年电赛，前前后后经历了四天吧。从8月7好开始，到10号结束，浑浑噩噩，不分白昼地为了无人机的题目而努力吧。我的队友负责飞控，我也就负责视觉模块OpenMV程序的编写啦。虽然比赛下来感觉发挥不是特别好，但还是有所收获吧。这里，我把比赛自己用到的相关程序代码贴出来并做了简要总结。  &lt;/p&gt;
&lt;p&gt;无论如何都不能放弃呀！勤做笔记，加油！  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/16/sRXC1Sko8Igf3rt.jpg&quot; alt=&quot;Hurry Up&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://cwxyr.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="电赛" scheme="http://cwxyr.github.io/tags/%E7%94%B5%E8%B5%9B/"/>
    
      <category term="OpenMV" scheme="http://cwxyr.github.io/tags/OpenMV/"/>
    
  </entry>
  
  <entry>
    <title>Hi! Here&#39;s Sublime&#39;s House</title>
    <link href="http://cwxyr.github.io/archives/72fc82f1.html"/>
    <id>http://cwxyr.github.io/archives/72fc82f1.html</id>
    <published>2019-08-02T16:45:43.000Z</published>
    <updated>2019-08-03T07:41:41.240Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎小可爱们来到我的小屋(oﾟ▽ﾟ)o  </p><p><img src="https://i.loli.net/2019/08/03/lFDJQWiYNV1ePmw.jpg" alt="Hello"></p><hr><h2 id="下面是建站记录…"><a href="#下面是建站记录…" class="headerlink" title="下面是建站记录…."></a>下面是建站记录….</h2><p>2019年5月初，开始有了写博客记录所学所得的想法  </p><p>2019年5月中旬，连续摸爬滚打后，初步习得了相关前端知识…  </p><p>2019年6月初，在货比三家后，选择了Hexo静态框架，跟随大流换上了大名鼎鼎的NexT主题，并放在了github上  </p><p>2019年6月末，偶然的发现，叹服于Material-X主题的精美，推翻所有的重来，并加上了Valine和看板娘，进行了细节的优化  </p><hr><p>最后，感谢小可爱们多多支持我喔٩(๑>◡<๑)۶<br>如果能评论那是最好的啦<br>有你们的鼓励，<strong>我会一定加油滴</strong>  </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎小可爱们来到我的小屋(oﾟ▽ﾟ)o  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/03/lFDJQWiYNV1ePmw.jpg&quot; alt=&quot;Hello&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;下面是建站记录…&quot;&gt;&lt;a href
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【站点搭建】CenOS 7环境下使用WordPress搭建电协官网--（1）基础配置</title>
    <link href="http://cwxyr.github.io/archives/826b26c7.html"/>
    <id>http://cwxyr.github.io/archives/826b26c7.html</id>
    <published>2019-07-31T07:47:14.000Z</published>
    <updated>2019-08-04T05:13:17.080Z</updated>
    
    <content type="html"><![CDATA[<p>因下学期电协招新及20周年纪念的需要，需要搭建一个官方网站。我们以WordPress为例，介绍从购买一个服务器开始，到安装博客程序以及最后细节优化及注意事项。  </p><p><img src="https://i.loli.net/2019/07/31/5d414ae98e34945456.jpg" alt="cover"></p><a id="more"></a><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ol><li><p>一个阿里云或者腾讯云服务器 </p></li><li><p>宝塔面板</p></li><li><p>CenOS 7+ 系统</p></li><li><p>LAMP/LNMP环境</p></li><li><p>WordPress安装包</p></li><li><p>远程连接工具Xshell和Xftp</p></li></ol><hr><h1 id="购买并配置服务器"><a href="#购买并配置服务器" class="headerlink" title="购买并配置服务器"></a>购买并配置服务器</h1><p>对于大多数国内用户来说，我们可以选着阿里云或者腾讯云的服务器，这里以选择腾讯云服务器为例，进入<a href="https://cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a>，注册并登录后进入管理后台。在<code>云产品</code>中选择<code>云服务器</code>：  </p><p><img src="https://i.loli.net/2019/07/31/5d419d3f30d7127999.png" alt="腾讯云1"></p><p>之后，在云服务器里面选择<code>创建</code>：  </p><p><img src="https://i.loli.net/2019/07/31/5d419dd53cadd16616.png" alt="腾讯云2"></p><p>选择适当的配置，我们可以选择<code>快速配置</code>，可以按照如下配置购买，其中推荐使用CentOS系统，相对来说较为稳定。</p><p><img src="https://i.loli.net/2019/07/31/5d41a02986fd693847.png" alt="腾讯云3"></p><p>购买后，选择左边的<code>SSH密钥</code>，新建后并下载（如我命名为xshell）</p><p><img src="https://i.loli.net/2019/07/31/5d41a5462cda531468.png" alt="SSH密钥1"></p><p>返回<code>实例</code>页面，点击右侧<code>更多</code>-><code>密码/密钥</code>-><code>加载密钥</code>，选择之前创建的密钥后，将会强制关机以绑定密钥。</p><p><img src="https://i.loli.net/2019/07/31/5d41a660dfdf127999.png" alt="SSH密钥2"></p><hr><h1 id="下载Xshell和Xftp并远程连接"><a href="#下载Xshell和Xftp并远程连接" class="headerlink" title="下载Xshell和Xftp并远程连接"></a>下载Xshell和Xftp并远程连接</h1><ol><li>Xshell<a href="https://www.netsarang.com/zh/xshell-download/" target="_blank" rel="noopener">下载地址</a></li><li>Xftp<a href="https://www.netsarang.com/zh/xftp-download/" target="_blank" rel="noopener">下载地址</a></li></ol><h2 id="配置Xshell"><a href="#配置Xshell" class="headerlink" title="配置Xshell"></a>配置Xshell</h2><p>以下载Xshell为例，进入官网后右边有<code>免费授权页面</code>，填写相关信息后，收到回复邮件，打开链接即可免费下载（Xftp同理）  </p><p><img src="https://i.loli.net/2019/08/04/m6erVNJikGXWtA3.png" alt="Xshell免费下载">  </p><p>下载并安装Xshell和Xftp后，点击<code>文件</code>-><code>新建</code>，在“连接”窗口，填写的<code>主机</code>为腾讯云服务器外网IP地址，在“用户身份验证”窗口，选择<code>方法</code>为“Public Key”,<code>用户名</code>为root，用户密钥选择之前下载的SSH密钥，点击<code>连接</code>即可成功连接至腾讯云服务器：</p><p><img src="https://i.loli.net/2019/08/04/69ZH51GmLwBqsgj.png" alt="shell配置1">  </p><p><img src="https://i.loli.net/2019/08/04/rMlsa57UfcbCTWO.png" alt="shell配置2"></p><p>连接成功后的界面如下：  </p><p><img src="https://i.loli.net/2019/08/04/qUBsvOgzDV1a5Tr.png" alt="shell连接成功">  </p><h2 id="配置Xftp"><a href="#配置Xftp" class="headerlink" title="配置Xftp"></a>配置Xftp</h2><p>配置方法与Xshell类似，这里放上几张配置截图：  </p><p><img src="https://i.loli.net/2019/08/04/qhubmzMlQOISoE8.png" alt="ftp配置">  </p><p><img src="https://i.loli.net/2019/08/04/fNnRMyYxqu8BWbC.png" alt="ftp连接成功">  </p><p><strong>如果你已经实现了上述结果，恭喜你，远程连接已配置成功。</strong></p><p><strong>PS:<br>使用Xshell需要涉及Linux命令相关的知识。如不是很了解，建议点击这里的<a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">传送门</a>了解基本命令。</strong></p><hr><h1 id="安装宝塔面板"><a href="#安装宝塔面板" class="headerlink" title="安装宝塔面板"></a>安装宝塔面板</h1><p>安装宝塔面板主要是为了方便后期维护的方便，使得服务器配置可视化同时加快配置效率。  </p><p>宝塔面板<a href="https://www.bt.cn/" target="_blank" rel="noopener">官方网站</a> </p><p><strong>PS：安装宝塔面板时，一定要保证系统纯净，即服务器中没有安装其他的任何软件，否则可能会安装失败！！！</strong>   </p><h2 id="放行出站入站端口"><a href="#放行出站入站端口" class="headerlink" title="放行出站入站端口"></a>放行出站入站端口</h2><p>在安装面板之前，需要放行特定的入站和出站端口号。回到腾讯云管理界面，选择<code>安全组</code>-><code>新建</code>： </p><p><img src="https://i.loli.net/2019/08/04/ptxE3DG1CuNWMzO.png" alt="安全组1"></p><p>然后下载规则配置文件：  </p><p><a href="https://www.bt.cn/bbs/forum.php?mod=attachment&aid=NDExOHwyYTI5ZWM1NnwxNTY0ODUwMzQ4fDB8MTIyOQ%3D%3D" target="_blank" rel="noopener">sg_input_rules.xlsx</a></p><p><a href="https://www.bt.cn/bbs/forum.php?mod=attachment&aid=NDExOXxkZGE5M2NlNHwxNTY0ODUwMzQ4fDB8MTIyOQ%3D%3D" target="_blank" rel="noopener">sg_output_rules.xlsx</a> </p><p>点击<code>导入规则</code>，将规则配置文件添加到入站和出站规则中：</p><p><img src="https://i.loli.net/2019/08/04/kPi3QZyUNjYF5XM.png" alt="入站和出站规则1"></p><p>之后，点击<code>关联实例</code>-><code>新增关联</code>，将规则和服务器相互关联。</p><p><img src="https://i.loli.net/2019/08/04/h2AovOxpckI5RLz.png" alt="关联实例"></p><h2 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h2><p>打开之前配置好的Xshell，对于CenOS 7+的系统，输入如下命令安装:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget && wget -O install.sh http://download.bt.cn/install/install_6.0.sh && sh install.sh</span><br></pre></td></tr></tbody></table></figure><p>出现提示信息，询问是否安装宝塔面板，输入<code>y</code>并回车：</p><p><img src="https://i.loli.net/2019/08/04/I7OYQWmrZpB3lgA.png" alt="安装"></p><p>耐心等待片刻后，出现如下界面，则安装成功。</p><p><img src="https://i.loli.net/2019/08/04/PADRNi4qGy5ml1g.png" alt="成功"></p><p>其中，给出了登录名和密码，登录地址为<code>http://你的IP或域名地址:8888/安全入口地址</code>的格式。浏览器输入登录地址并登录。如出现如下后台界面，则安装成功！！！</p><p><img src="https://i.loli.net/2019/08/04/YMI4SZxPqzpRneL.png" alt="宝塔面板"></p><p>至此，<strong>服务器的基础配置已基本完成</strong>。建议到<code>面板设置</code>修改登录名和密码，便于记忆。</p><hr><p>感谢你的耐心阅读呀(๑<em>◡</em>๑)，原创不易，收藏并评论一下呗~</p><p>接下来，我们可以配置服务器和安装WordPress等后续操作啦~</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因下学期电协招新及20周年纪念的需要，需要搭建一个官方网站。我们以WordPress为例，介绍从购买一个服务器开始，到安装博客程序以及最后细节优化及注意事项。  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/07/31/5d414ae98e34945456.jpg&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网站搭建" scheme="http://cwxyr.github.io/categories/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="WordPress" scheme="http://cwxyr.github.io/tags/WordPress/"/>
    
      <category term="电协官网" scheme="http://cwxyr.github.io/tags/%E7%94%B5%E5%8D%8F%E5%AE%98%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>【工具分享】实用的图片上传工具--PicGo</title>
    <link href="http://cwxyr.github.io/archives/5af88fad.html"/>
    <id>http://cwxyr.github.io/archives/5af88fad.html</id>
    <published>2019-07-26T15:59:36.000Z</published>
    <updated>2019-08-16T10:44:38.366Z</updated>
    
    <content type="html"><![CDATA[<p>博客写多了，有了图片加载慢的问题。这里分享一个简单实用的图片上传工具——PicGo<br>此工具可以一键上传图片，对于编写博客和网站来说很有帮助。  </p><a id="more"></a><h1 id="写在前面…"><a href="#写在前面…" class="headerlink" title="写在前面…"></a>写在前面…</h1><p>刚开始学习网页前端和博客搭建的时候，自己按照网上的教程一步步地学习。但后来，总会遇到一个问题：  </p><blockquote><p>随着网页一步步地完善，图片也越来越多，图片的杂余，使得打开一个页面的时候，总会非常的缓慢（将大部分时间都花在了图片的加载上）  </p></blockquote><h2 id="为什么会这样呢"><a href="#为什么会这样呢" class="headerlink" title="为什么会这样呢"></a>为什么会这样呢</h2><p>原来，随着图片的增多，服务器的压力就会加大，加载网页代码的同时，也会加载图片，然而图片常常很大（几百K到5M大小不等），会有一个很长的加载过程。</p><h2 id="怎么改进呢"><a href="#怎么改进呢" class="headerlink" title="怎么改进呢"></a>怎么改进呢</h2><p>后来，我了解到可以通过<a href="https://baike.baidu.com/item/CDN" target="_blank" rel="noopener">CDN</a>的方式来减轻服务器的压力。</p><p><strong>PS:何为CDN？</strong><br>CDN简单通俗地来说，就是通过外链的方式，将脚本、图片、视频等文件链接到自己的服务器，这样，将占用自己服务器资源的文件放在其他的服务器中，以达到网页加速的目的。  </p><p>国内有很多CDN的提供商，例如阿里云、腾讯云、七牛云、又拍云（其中七牛云和又拍云提供定量的免费储存空间）。  </p><p>开始，我使用的是七牛云的对象储存空间，<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a>有10G的免费空间,但是有一个不便却来了：我需要每次打开七牛的管理后台，手动上传之后，再把链接复制下来，引用到我的博客文章中。这样效率真的很低下，使得图片上传的不便。</p><h1 id="偶然一次的发现——图床工具"><a href="#偶然一次的发现——图床工具" class="headerlink" title="偶然一次的发现——图床工具"></a>偶然一次的发现——图床工具</h1><p><strong>PS:何为图床？</strong><br>图床简单来讲就是图片托管和储存地，即前面所说的CDN提供商（他们既有CDN又有对象存储，即图床）。</p><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p>软件下载链接：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/" target="_blank" rel="noopener">https://picgo.github.io/PicGo-Doc/zh/guide/</a><br>Github: <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a></p><p><img src="https://i.loli.net/2019/07/27/5d3bee7bf416469210.png" alt="PicGo"></p><p>在这里，我们可以选择SM.MS、腾讯云、微博、Github、七牛、Imgur、阿里云和又拍云多种方式上传。<br>上传后，可以自动得到复制链接，粘贴到文章里面即可(oﾟ▽ﾟ)o  </p><p>这里，强力推荐<a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS</a>，免费而且速度又快，真的是不二之选！！！！</p><p>就到这里啦，下次更新ヾ(◍°∇°◍)ﾉﾞ</p><hr><p>感谢你的耐心阅读呀(๑<em>◡</em>๑)，原创总结不易，收藏并评论一下呗~</p><p>你的支持就是我前进的动力呀~</p><iframe src="//player.bilibili.com/player.html?aid=63751776&cid=110693944&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" , height="700px," width="700px"> </iframe><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客写多了，有了图片加载慢的问题。这里分享一个简单实用的图片上传工具——PicGo&lt;br&gt;此工具可以一键上传图片，对于编写博客和网站来说很有帮助。  &lt;/p&gt;
    
    </summary>
    
      <category term="小工具" scheme="http://cwxyr.github.io/categories/%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="图床" scheme="http://cwxyr.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>【学习笔记】2019电赛--OpenMV学习</title>
    <link href="http://cwxyr.github.io/archives/f10b0e1a.html"/>
    <id>http://cwxyr.github.io/archives/f10b0e1a.html</id>
    <published>2019-07-18T07:53:45.000Z</published>
    <updated>2019-08-20T16:38:04.228Z</updated>
    
    <content type="html"><![CDATA[<p>第二年参加电赛了，今年来到测控无人机方向，主要记录一些OpenMV学习经历。<br>再苦逼也要加油呀！！！</p><p><img src="https://i.loli.net/2019/08/06/iUhr5mpMwbkoePK.jpg" alt="封面"></p><a id="more"></a><p>之前，19年电赛视觉模块始终不明朗，直到最近才确定<a href="https://bbs.nuedc-training.com.cn/thread-691-1-1.html" target="_blank" rel="noopener">不能用树莓派</a>。于是，一直研究OpenMV的我终于放心了。（哈哈哈这个当然是题外话，吐槽一下）</p><h1 id="正题–OpenMV"><a href="#正题–OpenMV" class="headerlink" title="正题–OpenMV"></a>正题–OpenMV</h1><p><a href="https://book.openmv.cc/" target="_blank" rel="noopener">OpenMV</a>是基于嵌入式STM32单片机的基础上，经过层层封装之后，运用microPython语法开发的模块。哈哈哈稍微介绍一下，小白们可以看看…  </p><p>这是我们队用的OpenMV mini的板子：<br><img src="https://i.loli.net/2019/07/27/5d3b25173cdff94492.jpg" alt="IMG_20190726_201841.jpg">  </p><h2 id="寻找直角（或特定角度）"><a href="#寻找直角（或特定角度）" class="headerlink" title="寻找直角（或特定角度）"></a>寻找直角（或特定角度）</h2><h3 id="方法一：寻找两条线交点，从而算出角度值（已经弃用）"><a href="#方法一：寻找两条线交点，从而算出角度值（已经弃用）" class="headerlink" title="方法一：寻找两条线交点，从而算出角度值（已经弃用）"></a>方法一：寻找两条线交点，从而算出角度值（<strong><del>已经弃用</del></strong>）</h3><blockquote><p><strong>为什么弃用呢？</strong>  </p></blockquote><ol><li><p>经过我们的测试，此方法存在检测到直角后不准确的问题。特别是当线的区域很大的时候，直角区域也会变大，运用此算法无法十分确切地找到直角顶点的中心位置，即识别出的交点会在直角附近来回抖动，这对于无人机来说，十分的不利，特别是速度快了以后，由于直角交点十分不稳定，很容易炸机。</p></li><li><p>同时，对于此方法，只能检测到特定角度的两条线相交的一个角度，适用性较窄。如需要识别其他类型的特征区域时（如双轨切换、T字和十字路口），就需要另外编写一套程序。</p></li></ol><hr><p><strong>下面是原文….</strong></p><hr><p>由于电赛视觉模块寻迹的原因，可能会涉及无人机直角转弯的问题，通过查找网上资料，获得了如下Python代码,感觉有一定的参考价值：</p><p>通过这个程序，我发现可以调用<code>calculate_angle(line1, line2)</code>函数得出偏角值，调用<code>calculate_intersection(line1, line2)</code>函数得出当前x和y的坐标值<code>(cross_x, cross_y)</code>，这样，再通过串口将对应的数据帧发送给飞控，在飞控端再进行帧格式解析，得出对应的数据后，在进行飞机相应的姿态调整。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_angle</span><span class="params">(line1, line2)</span>:</span></span><br><span class="line">    <span class="comment"># 利用四边形的角公式， 计算出直线夹角</span></span><br><span class="line">    angle  = (<span class="number">180</span> - abs(line1.theta() - line2.theta()))</span><br><span class="line">    <span class="keyword">if</span> angle > <span class="number">90</span>:</span><br><span class="line">        angle = <span class="number">180</span> - angle</span><br><span class="line">    <span class="keyword">return</span> angle</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_intersection</span><span class="params">(line1, line2)</span>:</span></span><br><span class="line">    <span class="comment"># 计算两条线的交点</span></span><br><span class="line">    a1 = line1.y2() - line1.y1()</span><br><span class="line">    b1 = line1.x1() - line1.x2()</span><br><span class="line">    c1 = line1.x2()*line1.y1() - line1.x1()*line1.y2()</span><br><span class="line"></span><br><span class="line">    a2 = line2.y2() - line2.y1()</span><br><span class="line">    b2 = line2.x1() - line2.x2()</span><br><span class="line">    c2 = line2.x2() * line2.y1() - line2.x1()*line2.y2()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a1 * b2 - a2 * b1) != <span class="number">0</span> <span class="keyword">and</span> (a2 * b1 - a1 * b2) != <span class="number">0</span>:</span><br><span class="line">        cross_x = int((b1*c2-b2*c1)/(a1*b2-a2*b1))</span><br><span class="line">        cross_y = int((c1*a2-c2*a1)/(a1*b2-a2*b1))</span><br><span class="line">        <span class="keyword">return</span> (cross_x, cross_y)</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">-1</span>, <span class="number">-1</span>)</span><br></pre></td></tr></tbody></table></figure><p>下面附上完整源代码：  </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Find Lines Example</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This example shows off how to find lines in the image. For each line object</span></span><br><span class="line"><span class="comment"># found in the image a line object is returned which includes the line's rotation.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> Line detection is done by using the Hough Transform:</span></span><br><span class="line"><span class="comment"># http://en.wikipedia.org/wiki/Hough_transform</span></span><br><span class="line"><span class="comment"># Please read about it above for more information on what `theta` and `rho` are.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find_lines() finds infinite length lines. Use find_line_segments() to find non-infinite lines.</span></span><br><span class="line"></span><br><span class="line">enable_lens_corr = <span class="literal">False</span> <span class="comment"># turn on for straighter lines...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line">sensor.reset()</span><br><span class="line">sensor.set_pixformat(sensor.GRAYSCALE) <span class="comment"># grayscale is faster</span></span><br><span class="line">sensor.set_framesize(sensor.QQVGA)</span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)</span><br><span class="line">clock = time.clock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># min_degree = 0 # 直线最小角度</span></span><br><span class="line"><span class="comment"># max_degree = 179 # 直线最大角度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否为直角的阈值</span></span><br><span class="line">right_angle_threshold = (<span class="number">70</span>, <span class="number">90</span>)</span><br><span class="line">binary_threshold = [(<span class="number">0</span>, <span class="number">60</span>)]</span><br><span class="line">forget_ratio = <span class="number">0.8</span></span><br><span class="line">move_threshold = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_angle</span><span class="params">(line1, line2)</span>:</span></span><br><span class="line">    <span class="comment"># 利用四边形的角公式， 计算出直线夹角</span></span><br><span class="line">    angle  = (<span class="number">180</span> - abs(line1.theta() - line2.theta()))</span><br><span class="line">    <span class="keyword">if</span> angle > <span class="number">90</span>:</span><br><span class="line">        angle = <span class="number">180</span> - angle</span><br><span class="line">    <span class="keyword">return</span> angle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_right_angle</span><span class="params">(line1, line2)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> right_angle_threshold</span><br><span class="line">    <span class="comment"># 判断两个直线之间的夹角是否为直角</span></span><br><span class="line">    angle = calculate_angle(line1, line2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> angle >= right_angle_threshold[<span class="number">0</span>] <span class="keyword">and</span> angle <=  right_angle_threshold[<span class="number">1</span>]:</span><br><span class="line">        <span class="comment"># 判断在阈值范围内</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_verticle_lines</span><span class="params">(lines)</span>:</span></span><br><span class="line">    line_num = len(lines)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(line_num <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, line_num):</span><br><span class="line">            <span class="keyword">if</span> is_right_angle(lines[i], lines[j]):</span><br><span class="line">                <span class="keyword">return</span> (lines[i], lines[j])</span><br><span class="line">    <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_intersection</span><span class="params">(line1, line2)</span>:</span></span><br><span class="line">    <span class="comment"># 计算两条线的交点</span></span><br><span class="line">    a1 = line1.y2() - line1.y1()</span><br><span class="line">    b1 = line1.x1() - line1.x2()</span><br><span class="line">    c1 = line1.x2()*line1.y1() - line1.x1()*line1.y2()</span><br><span class="line"></span><br><span class="line">    a2 = line2.y2() - line2.y1()</span><br><span class="line">    b2 = line2.x1() - line2.x2()</span><br><span class="line">    c2 = line2.x2() * line2.y1() - line2.x1()*line2.y2()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a1 * b2 - a2 * b1) != <span class="number">0</span> <span class="keyword">and</span> (a2 * b1 - a1 * b2) != <span class="number">0</span>:</span><br><span class="line">        cross_x = int((b1*c2-b2*c1)/(a1*b2-a2*b1))</span><br><span class="line">        cross_y = int((c1*a2-c2*a1)/(a1*b2-a2*b1))</span><br><span class="line">        <span class="keyword">return</span> (cross_x, cross_y)</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">-1</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_cross_point</span><span class="params">(cross_x, cross_y)</span>:</span></span><br><span class="line">    img.draw_cross(cross_x, cross_y)</span><br><span class="line">    img.draw_circle(cross_x, cross_y, <span class="number">5</span>)</span><br><span class="line">    img.draw_circle(cross_x, cross_y, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># All lines also have `x1()`, `y1()`, `x2()`, and `y2()` methods to get their end-points</span></span><br><span class="line"><span class="comment"># and a `line()` method to get all the above as one 4 value tuple for `draw_line()`.</span></span><br><span class="line"></span><br><span class="line">old_cross_x = <span class="number">0</span></span><br><span class="line">old_cross_y = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#threshold</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    clock.tick()</span><br><span class="line">    img = sensor.snapshot()</span><br><span class="line">    img.binary(binary_threshold)</span><br><span class="line">    img.gaussian(<span class="number">5</span>)</span><br><span class="line">    img.gaussian(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 去除摄像头畸变， 这里我们采用的是13.8mm的，近距离没有畸变效果</span></span><br><span class="line">    <span class="comment"># if enable_lens_corr: img.lens_corr(1.8) # for 2.8mm lens...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># `threshold` controls how many lines in the image are found. Only lines with</span></span><br><span class="line">    <span class="comment"># edge difference magnitude sums greater than `threshold` are detected...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># More about `threshold` - each pixel in the image contributes a magnitude value</span></span><br><span class="line">    <span class="comment"># to a line. The sum of all contributions is the magintude for that line. Then</span></span><br><span class="line">    <span class="comment"># when lines are merged their magnitudes are added togheter. Note that `threshold`</span></span><br><span class="line">    <span class="comment"># filters out lines with low magnitudes before merging. To see the magnitude of</span></span><br><span class="line">    <span class="comment"># un-merged lines set `theta_margin` and `rho_margin` to 0...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># `theta_margin` and `rho_margin` control merging similar lines. If two lines</span></span><br><span class="line">    <span class="comment"># theta and rho value differences are less than the margins then they are merged.</span></span><br><span class="line"></span><br><span class="line">    lines =  img.find_lines(threshold = <span class="number">2000</span>, theta_margin = <span class="number">40</span>, rho_margin = <span class="number">20</span>, roi=(<span class="number">5</span>, <span class="number">5</span>, <span class="number">150</span>,<span class="number">110</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">       <span class="comment"># img.draw_line(line.line(), color = (255, 0, 0))</span></span><br><span class="line">    <span class="comment"># 如果画面中有两条直线</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(lines) >= <span class="number">2</span>:</span><br><span class="line">        (line1, line2) = find_verticle_lines(lines)</span><br><span class="line">        <span class="keyword">if</span> (line1 == <span class="literal">None</span> <span class="keyword">or</span> line2 == <span class="literal">None</span>):</span><br><span class="line">            <span class="comment"># 没有垂直的直线</span></span><br><span class="line">            draw_cross_point(old_cross_x, old_cross_y)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 画线</span></span><br><span class="line">        <span class="comment"># img.draw_line(line1.line(), color = (255, 0, 0))</span></span><br><span class="line">        <span class="comment"># img.draw_line(line2.line(), color = (255, 0, 0))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算交点</span></span><br><span class="line">        (cross_x, cross_y) = calculate_intersection(line1, line2)</span><br><span class="line">        print(<span class="string">"cross_x:  %d, cross_y: %d"</span>%(old_cross_x, old_cross_y))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cross_x != <span class="number">-1</span> <span class="keyword">and</span> cross_y != <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">if</span> abs(cross_x - old_cross_x) < move_threshold <span class="keyword">and</span> abs(cross_y - old_cross_y) < move_threshold:</span><br><span class="line">                <span class="comment"># 小于移动阈值， 不移动</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                old_cross_x = int(old_cross_x * (<span class="number">1</span> - forget_ratio) + cross_x * forget_ratio)</span><br><span class="line">                old_cross_y = int(old_cross_y * (<span class="number">1</span> - forget_ratio) + cross_y * forget_ratio)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        draw_cross_point(old_cross_x, old_cross_y)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"FPS %f"</span> % clock.fps())</span><br><span class="line"></span><br><span class="line"><span class="comment"># About negative rho values:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># A [theta+0:-rho] tuple is the same as [theta+180:+rho].</span></span><br></pre></td></tr></tbody></table></figure><p><strong>PS</strong>:  源代码链接<a href="http://makermare.com:60010/example/feature/right-angle-detection.html" target="_blank" rel="noopener">http://makermare.com:60010/example/feature/right-angle-detection.html</a></p><h3 id="方法二（改进）：利用OpenMV视野中像素值的突变寻找直角等特征"><a href="#方法二（改进）：利用OpenMV视野中像素值的突变寻找直角等特征" class="headerlink" title="方法二（改进）：利用OpenMV视野中像素值的突变寻找直角等特征"></a>方法二（改进）：利用OpenMV视野中像素值的突变寻找直角等特征</h3><p>因为方法一寻找直角交点的缺陷性，经过我们的讨论，认为也可以计算图像区域中目标物体所占的总像素的多少，从而区分直线和直角。  </p><p>直角和直线出现在OpenMV视野区域中的时候，两者的像素会有较大的差异，通过合理地调节阈值，可以将直线和直角区分开来。（经过大致测算，使用此方法直角和直线的总像素个数大约相差一倍左右）。</p><p>这里先贴上自己写的部分程序：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"><span class="keyword">from</span> pyb <span class="keyword">import</span> LED</span><br><span class="line"><span class="keyword">from</span> pyb <span class="keyword">import</span> UART,Timer</span><br><span class="line"></span><br><span class="line">uart = UART(<span class="number">3</span>,<span class="number">115200</span>)<span class="comment">#初始化串口 波特率 115200</span></span><br><span class="line">sensor.reset()</span><br><span class="line"><span class="comment">#sensor.set_vflip(True)</span></span><br><span class="line"><span class="comment">#sensor.set_hmirror(True)</span></span><br><span class="line">sensor.set_pixformat(sensor.RGB565)</span><br><span class="line">sensor.set_framesize(sensor.QQQVGA) <span class="comment"># 80x60 (4,800 pixels) - O(N^2) max = 2,3040,000.</span></span><br><span class="line"><span class="comment">#sensor.set_windowing([0,20,80,40])</span></span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)     <span class="comment"># WARNING: If you use QQVGA it may take seconds</span></span><br><span class="line">clock = time.clock()                <span class="comment"># to process a frame sometimes.</span></span><br><span class="line"></span><br><span class="line">x_width = <span class="number">80</span></span><br><span class="line">y_height = <span class="number">60</span>    <span class="comment"># 图像是QQQVGA,则图像是80x60的分辨率</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">singleline_check</span><span class="params">()</span>:</span></span><br><span class="line">    flager = <span class="number">0</span></span><br><span class="line">    rho_err = <span class="number">0</span></span><br><span class="line">    theta_err = <span class="number">0</span></span><br><span class="line">    is_verticle = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">singleline_check = singleline_check()</span><br><span class="line"></span><br><span class="line">BINARY_THRESHOLD = (<span class="number">30</span>, <span class="number">120</span>)  <span class="comment">#二值化阈值</span></span><br><span class="line"></span><br><span class="line">verticle_pixels_threshold = [<span class="number">200</span>, <span class="number">300</span>]   <span class="comment">#像素最大和最小阈值</span></span><br><span class="line">track_line_threshold = [<span class="number">100</span>, <span class="number">200</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_pixels_with_movement</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> x_width, y_height</span><br><span class="line"></span><br><span class="line">    x_pos = <span class="number">0</span></span><br><span class="line">    y_pos = <span class="number">0</span></span><br><span class="line">    total_white_pixels = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x_pos <span class="keyword">in</span> range(x_width):</span><br><span class="line">        <span class="keyword">for</span> y_pos <span class="keyword">in</span> range(y_height):</span><br><span class="line">            <span class="keyword">if</span> img.get_pixel(x_pos, y_pos) == <span class="number">255</span>:</span><br><span class="line">                total_white_pixels += <span class="number">1</span>  <span class="comment"># 利用get_pixel()方法，计算当前图像中白色色块所占的像素大小</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"total white pixels are"</span>, total_white_pixels)</span><br><span class="line">    <span class="keyword">if</span> total_white_pixels >= verticle_pixels_threshold[<span class="number">0</span>] <span class="keyword">and</span> total_white_pixels <= verticle_pixels_threshold[<span class="number">1</span>]:</span><br><span class="line">        singleline_check.is_verticle = <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> total_white_pixels >= track_line_threshold[<span class="number">0</span>] <span class="keyword">and</span> total_white_pixels <= track_line_threshold[<span class="number">1</span>]:</span><br><span class="line">        singleline_check.is_verticle = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        singleline_check.is_verticle = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"is verticle flag:"</span>, singleline_check.is_verticle)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    img = sensor.snapshot().binary([BINARY_THRESHOLD]).erode(<span class="number">1</span>)</span><br><span class="line">    count_pixels_with_movement(img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 之后打包发送数据给飞控，这里略...</span></span><br></pre></td></tr></tbody></table></figure><p>程序中，<code>count_pixels_with_movement(img)</code>用于计算此时视野范围中二值化后的白色目标色块所占的总像素的个数。只要每一个像素阈值（如<code>verticle_pixels_threshold</code>和<code>track_line_threshold</code>）设置得恰到，运用此方法，可以较为准确地区分并识别出前方有直角，并会回馈一个标志位<code>singleline_check.is_verticle = 2</code>给飞控，使其做出直角判断并转弯。程序实测帧率在30-40左右，能够基本满足要求。</p><h2 id="识别特征信息（可以用于识别飞机起飞降落点）"><a href="#识别特征信息（可以用于识别飞机起飞降落点）" class="headerlink" title="识别特征信息（可以用于识别飞机起飞降落点）"></a>识别特征信息（可以用于识别飞机起飞降落点）</h2><h3 id="数字识别"><a href="#数字识别" class="headerlink" title="数字识别"></a>数字识别</h3><p>按照例程，好像可以使用方法<code>img.find_number()</code>：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LetNet Example</span></span><br><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line">sensor.reset()                      <span class="comment"># Reset and initialize the sensor.</span></span><br><span class="line">sensor.set_contrast(<span class="number">3</span>)</span><br><span class="line">sensor.set_pixformat(sensor.GRAYSCALE) <span class="comment"># Set pixel format to RGB565 (or GRAYSCALE)</span></span><br><span class="line">sensor.set_framesize(sensor.QVGA)   <span class="comment"># Set frame size to QVGA (320x240)</span></span><br><span class="line">sensor.set_windowing((<span class="number">28</span>, <span class="number">28</span>))</span><br><span class="line"></span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)     <span class="comment"># Wait for settings take effect.</span></span><br><span class="line">sensor.set_auto_gain(<span class="literal">False</span>)</span><br><span class="line">sensor.set_auto_exposure(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">clock = time.clock()                <span class="comment"># Create a clock object to track the FPS.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    clock.tick()                    <span class="comment"># Update the FPS clock.</span></span><br><span class="line">    img = sensor.snapshot()         <span class="comment"># Take a picture and return the image.</span></span><br><span class="line">    out = img.invert().find_number()</span><br><span class="line">    <span class="keyword">if</span> out[<span class="number">1</span>] > <span class="number">3.0</span>:</span><br><span class="line">        print(out[<span class="number">0</span>])</span><br><span class="line">    <span class="comment">#print(clock.fps())             # <span class="doctag">Note:</span> OpenMV Cam runs about half as fast when connected</span></span><br><span class="line">                                    <span class="comment"># to the IDE. The FPS should increase once disconnected.</span></span><br></pre></td></tr></tbody></table></figure><p><strong>PS</strong>:</p><ol><li><p>来源于<a href="http://makermare.com:60010/example/feature/digital-recognition.html" target="_blank" rel="noopener">http://makermare.com:60010/example/feature/digital-recognition.html</a></p></li><li><p>好像因为新版本的固件不支持识别<code>数字</code>的方法<code>img.find_number()</code>了，我的是OpenMV 4,自己试了试好像会报错，不知道为啥，应该是官方文档说的这个原因：</p></li></ol><p>IDE报错：<br><img src="https://i.loli.net/2019/08/02/5d43bdc4b9dd663760.png" alt="IDE报错"><br>官方文档解释：<br><img src="https://i.loli.net/2019/08/02/5d43bede5e23724343.png" alt="官方文档解释"></p><hr><h3 id="关键点识别"><a href="#关键点识别" class="headerlink" title="关键点识别"></a>关键点识别</h3><p>无可奈何，好像暂时就只能使用寻找<code>关键点</code>的方法了.<br>当需要识别特征信息的时候，可以使用官方自带的一个方法<code>img.find_keypoints()</code>，keypoints即关键点，当识别到物块的关键点后，保存到变量<code>kpts2</code>中，便可以进行匹配，即运用<code>image.match_descriptor()</code>方法，进行匹配度识别，若匹配到了，便可以在图像上画出特征点，运用方法<code>img.draw_keypoints()</code>。  </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用特征点检测特定物体例程。</span></span><br><span class="line"><span class="comment"># 向相机显示一个对象，然后运行该脚本。 一组关键点将被提取一次，然后</span></span><br><span class="line"><span class="comment"># 在以下帧中进行跟踪。 如果您想要一组新的关键点，请重新运行该脚本。</span></span><br><span class="line"><span class="comment"># 注意：请参阅文档以调整find_keypoints和match_keypoints。</span></span><br><span class="line"><span class="keyword">import</span> sensor, time, image</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reset sensor</span></span><br><span class="line">sensor.reset()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sensor settings</span></span><br><span class="line">sensor.set_contrast(<span class="number">3</span>)</span><br><span class="line">sensor.set_gainceiling(<span class="number">16</span>)</span><br><span class="line">sensor.set_framesize(sensor.VGA)</span><br><span class="line">sensor.set_windowing((<span class="number">320</span>, <span class="number">240</span>))</span><br><span class="line">sensor.set_pixformat(sensor.GRAYSCALE)</span><br><span class="line"></span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)</span><br><span class="line">sensor.set_auto_gain(<span class="literal">False</span>, value=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出特征点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_keypoints</span><span class="params">(img, kpts)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> kpts:</span><br><span class="line">        print(kpts)</span><br><span class="line">        img.draw_keypoints(kpts)</span><br><span class="line">        img = sensor.snapshot()</span><br><span class="line">        time.sleep(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">kpts1 = <span class="literal">None</span></span><br><span class="line"><span class="comment">#kpts1保存目标物体的特征，可以从文件导入特征，但是不建议这么做。</span></span><br><span class="line"><span class="comment">#kpts1 = image.load_descriptor("/desc.orb")</span></span><br><span class="line"><span class="comment">#img = sensor.snapshot()</span></span><br><span class="line"><span class="comment">#draw_keypoints(img, kpts1)</span></span><br><span class="line"></span><br><span class="line">clock = time.clock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">    clock.tick()</span><br><span class="line">    img = sensor.snapshot()</span><br><span class="line">    <span class="keyword">if</span> (kpts1 == <span class="literal">None</span>):</span><br><span class="line">        <span class="comment">#如果是刚开始运行程序，提取最开始的图像作为目标物体特征，kpts1保存目标物体的特征</span></span><br><span class="line">        <span class="comment">#默认会匹配目标特征的多种比例大小，而不仅仅是保存目标特征时的大小，比模版匹配灵活。</span></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> By default find_keypoints returns multi-scale keypoints extracted from an image pyramid.</span></span><br><span class="line">        kpts1 = img.find_keypoints(max_keypoints=<span class="number">150</span>, threshold=<span class="number">10</span>, scale_factor=<span class="number">1.2</span>)</span><br><span class="line">        <span class="comment">#image.find_keypoints(roi=Auto, threshold=20, normalized=False, scale_factor=1.5, max_keypoints=100, corner_detector=CORNER_AGAST)</span></span><br><span class="line">        <span class="comment">#roi表示识别的区域，是一个元组（x,y,w,h）,默认与framsesize大小一致。</span></span><br><span class="line">        <span class="comment">#threshold是0~255的一个阈值，用来控制特征点检测的角点数量。用默认的AGAST特征点检测，这个阈值大概是20。用FAST特征点检测，这个阈值大概是60～80。阈值越低，获得的角点越多。</span></span><br><span class="line">        <span class="comment">#normalized是一个布尔数值，默认是False，可以匹配目标特征的多种大小（比ncc模版匹配效果灵活）。如果设置为True，关闭特征点检测的多比例结果，仅匹配目标特征的一种大小（类似于模版匹配），但是运算速度会更快一些。</span></span><br><span class="line">        <span class="comment">#scale_factor是一个大于1.0的浮点数。这个数值越高，检测速度越快，但是匹配准确率会下降。一般在1.35~1.5左右最佳。</span></span><br><span class="line">        <span class="comment">#max_keypoints是一个物体可提取的特征点的最大数量。如果一个物体的特征点太多导致RAM内存爆掉，减小这个数值。</span></span><br><span class="line">        <span class="comment">#corner_detector是特征点检测采取的算法，默认是AGAST算法。FAST算法会更快但是准确率会下降。</span></span><br><span class="line">        draw_keypoints(img, kpts1)</span><br><span class="line">        <span class="comment">#画出此时的目标特征</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#当与最开始的目标特征进行匹配时，默认设置normalized=True，只匹配目标特征的一种大小。</span></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> When extracting keypoints to match the first descriptor, we use normalized=True to extract</span></span><br><span class="line">        <span class="comment"># keypoints from the first scale only, which will match one of the scales in the first descriptor.</span></span><br><span class="line">        kpts2 = img.find_keypoints(max_keypoints=<span class="number">150</span>, threshold=<span class="number">10</span>, normalized=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment">#如果检测到特征物体</span></span><br><span class="line">        <span class="keyword">if</span> (kpts2):</span><br><span class="line">            <span class="comment">#匹配当前找到的特征和最初的目标特征的相似度</span></span><br><span class="line">            match = image.match_descriptor(kpts1, kpts2, threshold=<span class="number">85</span>)</span><br><span class="line">            <span class="comment">#image.match_descriptor(descritor0, descriptor1, threshold=70, filter_outliers=False)。本函数返回kptmatch对象。</span></span><br><span class="line">            <span class="comment">#threshold阈值设置匹配的准确度，用来过滤掉有歧义的匹配。这个值越小，准确度越高。阈值范围0～100，默认70</span></span><br><span class="line">            <span class="comment">#filter_outliers默认关闭。</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">#match.count()是kpt1和kpt2的匹配的近似特征点数目。</span></span><br><span class="line">            <span class="comment">#如果大于10，证明两个特征相似，匹配成功。</span></span><br><span class="line">            <span class="keyword">if</span> (match.count()><span class="number">10</span>):</span><br><span class="line">                <span class="comment"># If we have at least n "good matches"</span></span><br><span class="line">                <span class="comment"># Draw bounding rectangle and cross.</span></span><br><span class="line">                <span class="comment">#在匹配到的目标特征中心画十字和矩形框。</span></span><br><span class="line">                img.draw_rectangle(match.rect())</span><br><span class="line">                img.draw_cross(match.cx(), match.cy(), size=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#match.theta()是匹配到的特征物体相对目标物体的旋转角度。</span></span><br><span class="line">            print(kpts2, <span class="string">"matched:%d dt:%d"</span>%(match.count(), match.theta()))</span><br><span class="line">            <span class="comment">#不建议draw_keypoints画出特征角点。</span></span><br><span class="line">            <span class="comment"># <span class="doctag">NOTE:</span> uncomment if you want to draw the keypoints</span></span><br><span class="line">            <span class="comment">#img.draw_keypoints(kpts2, size=KEYPOINTS_SIZE, matched=True)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Draw FPS</span></span><br><span class="line">    <span class="comment">#打印帧率。</span></span><br><span class="line">    img.draw_string(<span class="number">0</span>, <span class="number">0</span>, <span class="string">"FPS:%.2f"</span>%(clock.fps()))</span><br></pre></td></tr></tbody></table></figure><p><strong>PS</strong>:  来源于星瞳科技例程<a href="https://book.openmv.cc/example/09-Feature-Detection/keypoints.html" target="_blank" rel="noopener">https://book.openmv.cc/example/09-Feature-Detection/keypoints.html</a></p><p>这个例程还需要完善，运用到具体的OpenMV代码中需要将函数再次封装和修改。</p><h2 id="识别二维码（QR-Code）、条形码（Barcode）和标记（AprilTag）"><a href="#识别二维码（QR-Code）、条形码（Barcode）和标记（AprilTag）" class="headerlink" title="识别二维码（QR Code）、条形码（Barcode）和标记（AprilTag）"></a>识别二维码（QR Code）、条形码（Barcode）和标记（AprilTag）</h2><p>对于二维码和条形码，相对来说较为简单，其核心语句就只有一句，分别为：</p><ul><li>img.find_qrcodes()   寻找二维码信息<br>例如：</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sensor, image, time</span><br><span class="line"></span><br><span class="line">sensor.reset()</span><br><span class="line">sensor.set_pixformat(sensor.GRAYSCALE)</span><br><span class="line">sensor.set_framesize(sensor.VGA)</span><br><span class="line">sensor.set_windowing((<span class="number">240</span>, <span class="number">240</span>)) <span class="comment"># look at center 240x240 pixels of the VGA resolution.</span></span><br><span class="line">sensor.skip_frames(<span class="number">30</span>)</span><br><span class="line">sensor.set_auto_gain(<span class="literal">False</span>) <span class="comment"># must turn this off to prevent image washout...</span></span><br><span class="line">clock = time.clock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    clock.tick()</span><br><span class="line">    img = sensor.snapshot()</span><br><span class="line">    <span class="keyword">for</span> code <span class="keyword">in</span> img.find_qrcodes():</span><br><span class="line">        print(code)</span><br><span class="line">    print(clock.fps())</span><br></pre></td></tr></tbody></table></figure><ul><li>img.find_barcodes()    寻找条形码信息<br>例如：</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sensor, image, time, math</span><br><span class="line"></span><br><span class="line">sensor.reset()</span><br><span class="line">sensor.set_pixformat(sensor.GRAYSCALE)</span><br><span class="line">sensor.set_framesize(sensor.VGA) <span class="comment"># High Res!</span></span><br><span class="line">sensor.set_windowing((<span class="number">640</span>, <span class="number">80</span>)) <span class="comment"># V Res of 80 == less work (40 for 2X the speed).</span></span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)</span><br><span class="line">sensor.set_auto_gain(<span class="literal">False</span>)  <span class="comment"># must turn this off to prevent image washout...</span></span><br><span class="line">sensor.set_auto_whitebal(<span class="literal">False</span>)  <span class="comment"># must turn this off to prevent image washout...</span></span><br><span class="line">clock = time.clock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 条形码检测可以在OpenMV Cam的OV7725相机模块的640x480分辨率下运行。</span></span><br><span class="line"><span class="comment"># 条码检测也将在RGB565模式下工作，但分辨率较低。 也就是说，</span></span><br><span class="line"><span class="comment"># 条形码检测需要更高的分辨率才能正常工作，因此应始终以640x480的灰度运行。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">barcode_name</span><span class="params">(code)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.EAN2):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"EAN2"</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.EAN5):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"EAN5"</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.EAN8):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"EAN8"</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.UPCE):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"UPCE"</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.ISBN10):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ISBN10"</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.UPCA):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"UPCA"</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.EAN13):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"EAN13"</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.ISBN13):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ISBN13"</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.I25):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"I25"</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.DATABAR):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"DATABAR"</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.DATABAR_EXP):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"DATABAR_EXP"</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.CODABAR):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CODABAR"</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.CODE39):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CODE39"</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.PDF417):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PDF417"</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.CODE93):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CODE93"</span></span><br><span class="line">    <span class="keyword">if</span>(code.type() == image.CODE128):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CODE128"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    clock.tick()</span><br><span class="line">    img = sensor.snapshot()</span><br><span class="line">    codes = img.find_barcodes()</span><br><span class="line">    <span class="keyword">for</span> code <span class="keyword">in</span> codes:</span><br><span class="line">        img.draw_rectangle(code.rect())</span><br><span class="line">        print_args = (barcode_name(code), code.payload(), (<span class="number">180</span> * code.rotation()) / math.pi, code.quality(), clock.fps())</span><br><span class="line">        print(<span class="string">"Barcode %s, Payload \"%s\", rotation %f (degrees), quality %d, FPS %f"</span> % print_args)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> codes:</span><br><span class="line">        print(<span class="string">"FPS %f"</span> % clock.fps())</span><br></pre></td></tr></tbody></table></figure><ul><li>img.find_apriltags()    寻找标记信息<br>例如：</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sensor, image, time, math</span><br><span class="line"></span><br><span class="line">sensor.reset()</span><br><span class="line">sensor.set_pixformat(sensor.RGB565)</span><br><span class="line">sensor.set_framesize(sensor.VGA) <span class="comment"># we run out of memory if the resolution is much bigger...</span></span><br><span class="line">sensor.set_windowing((<span class="number">160</span>, <span class="number">120</span>)) <span class="comment"># Look at center 160x120 pixels of the VGA resolution.</span></span><br><span class="line">sensor.skip_frames(time = <span class="number">2000</span>)</span><br><span class="line">sensor.set_auto_gain(<span class="literal">False</span>)  <span class="comment"># must turn this off to prevent image washout...</span></span><br><span class="line">sensor.set_auto_whitebal(<span class="literal">False</span>)  <span class="comment"># must turn this off to prevent image washout...</span></span><br><span class="line">clock = time.clock()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意！与find_qrcodes不同，find_apriltags方法不需要对镜像进行镜头校正。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#标签系列有什么区别？ 那么，例如，TAG16H5家族实际上是一个4x4的方形标签。 </span></span><br><span class="line"><span class="comment">#所以，这意味着可以看到比6x6的TAG36H11标签更长的距离。 然而，较低的H值（H5对H11）</span></span><br><span class="line"><span class="comment">#意味着4x4标签的假阳性率远高于6x6标签。 所以，除非你有理由使用其他标签系列，</span></span><br><span class="line"><span class="comment">#否则使用默认族TAG36H11。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    clock.tick()</span><br><span class="line">    img = sensor.snapshot()</span><br><span class="line">    <span class="keyword">for</span> tag <span class="keyword">in</span> img.find_apriltags(): <span class="comment"># defaults to TAG36H11</span></span><br><span class="line">        img.draw_rectangle(tag.rect(), color = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        img.draw_cross(tag.cx(), tag.cy(), color = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span><br><span class="line">        print_args = (tag.id(), (<span class="number">180</span> * tag.rotation()) / math.pi)</span><br><span class="line">        print(<span class="string">"Tag Family TAG36H11, Tag ID %d, rotation %f (degrees)"</span> % print_args)</span><br><span class="line">    print(clock.fps())</span><br></pre></td></tr></tbody></table></figure><h1 id="另附–我们组的飞机方案"><a href="#另附–我们组的飞机方案" class="headerlink" title="另附–我们组的飞机方案"></a>另附–我们组的飞机方案</h1><p>最近，我们组在紧张地准备电赛测控四旋翼无人机的题目，在准备过程中，我们购买了无名创新的TM4C123的飞控，正在研究源码和视觉模块的运用。<br>无名创新的飞控是开源的，在B站上面有对应的讲解视频，涉及操作类和代码讲解类的视频，下面附上其网址：  </p><p>无名科创开源飞控QQ群：540707961<br><a href="https://blog.csdn.net/u011992534" target="_blank" rel="noopener">CSDN博客</a><br>优酷ID：NamelessCotrun无名小哥<br><a href="https://space.bilibili.com/67803559/#/video" target="_blank" rel="noopener">B站教学视频</a><br><a href="https://shop348646912.taobao.com/?spm=2013.1.1000126.2.5ce78a88ht1sO2" target="_blank" rel="noopener">淘宝店铺</a><br>百度贴吧:无名科创开源飞控<br><a href="https://www.nameless.tech" target="_blank" rel="noopener">公司官网</a>  </p><p>我们组在学习的过程中，按照老师给的建议，决定采用外加一个TM4C123的控制板作为模拟的遥控器（即脱掉遥控器自主飞行降落），其中，无名的飞控是采用PPM信号编码和解码的方式，为了模仿遥控器的信号，我们参考了网上的一些文档，觉得十分有用：</p><h2 id="PPM原理和代码"><a href="#PPM原理和代码" class="headerlink" title="PPM原理和代码"></a>PPM原理和代码</h2><p><a href="https://blog.csdn.net/Aaron_Suen/article/details/79416477" target="_blank" rel="noopener">https://blog.csdn.net/Aaron_Suen/article/details/79416477</a><br><a href="https://blog.csdn.net/yibu_refresh/article/details/45752131" target="_blank" rel="noopener">https://blog.csdn.net/yibu_refresh/article/details/45752131</a>  </p><p>这几天我们队进度有点卡顿了，正在向两方面进展。<br>我们准备了两个方案：<br><strong>使用之前所说的外置模拟遥控器的方式</strong><br><strong>使用无名飞控自带的SDK模式进行二次开发</strong></p><hr><p>感谢你的耐心阅读呀(๑<em>◡</em>๑)，原创总结不易，收藏并评论一下呗~</p><p>你的支持就是我前进的动力呀~</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第二年参加电赛了，今年来到测控无人机方向，主要记录一些OpenMV学习经历。&lt;br&gt;再苦逼也要加油呀！！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/06/iUhr5mpMwbkoePK.jpg&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://cwxyr.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="电赛" scheme="http://cwxyr.github.io/tags/%E7%94%B5%E8%B5%9B/"/>
    
      <category term="OpenMV" scheme="http://cwxyr.github.io/tags/OpenMV/"/>
    
  </entry>
  
  <entry>
    <title>你好鸭~</title>
    <link href="http://cwxyr.github.io/archives/f2d5fff6.html"/>
    <id>http://cwxyr.github.io/archives/f2d5fff6.html</id>
    <published>2019-05-21T17:06:02.000Z</published>
    <updated>2019-07-26T13:28:09.798Z</updated>
    
    <content type="html"><![CDATA[<p>你好！这里是Sublime的个人小屋哦ヾ(◍°∇°◍)ﾉﾞ<br>从今天起，我准备开始写博客啦<del>~</del><br>希望大家支持我呀^_^</p><a id="more"></a><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"hello world, hello my blog!"</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span><<<span class="string">"hello world, hello my blog!"</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span><span class="string">"hello world, hello my blog!"</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"hello world, hello my blog!"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"hello world, hello my blog!"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight vb"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MsgBox<span class="string">"hello world, hello my blog!"</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 'hello world, hello my blog!'</span><br></pre></td></tr></tbody></table></figure><figure class="highlight perl"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span><span class="string">'hello world, hello my blog!'</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"hello world, hello my blog!"</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.Console.WriteLine("hello world, hello my blog!")</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">br</span>/></span>hello world, hello my blog!<span class="tag"><<span class="name">br</span>/></span></span><br></pre></td></tr></tbody></table></figure><p>Have a GOOD TIME!  你的鼓励就是我前进的动力呐~  (◕ᴗ◕✿)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你好！这里是Sublime的个人小屋哦ヾ(◍°∇°◍)ﾉﾞ&lt;br&gt;从今天起，我准备开始写博客啦&lt;del&gt;~&lt;/del&gt;&lt;br&gt;希望大家支持我呀^_^&lt;/p&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://cwxyr.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>

{"meta":{"title":"果子小酱","subtitle":"果子小酱 Sublime的博客 念念不忘，必有回响","description":"这是Sublime.的个人博客果子小酱，主要记录了自己在编程技术的各种总结和其他的生活感悟。<br>This is the personal blog written by Sublime., which contains blogger's own ideas and thoughts in programming and life. 你一定要努力，才能和更好的人相遇<br>To be EXCELENT.","author":"煎饼果子","url":"http://sublimerui.top","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-10-12T17:07:54.215Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"404.html","permalink":"http://sublimerui.top/404.html","excerpt":"","text":"404 Not Found**呜呜呜，您访问的页面不存在了(ㄒoㄒ)** 可能是输入地址有误或该地址已被删除 点击这里返回主页"},{"title":"","date":"2020-10-12T17:07:54.215Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"README.html","permalink":"http://sublimerui.top/README.html","excerpt":"","text":"Sublime的个人博客许可 Licences源码遵循MIT许可。 ©2019 Sublime."},{"title":"","date":"2020-10-12T17:07:54.215Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"baidu_verify_wFpBInlzzK.html","permalink":"http://sublimerui.top/baidu_verify_wFpBInlzzK.html","excerpt":"","text":"wFpBInlzzK"},{"title":"","date":"2020-10-12T17:07:54.215Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"googleb245000c32ee4b7e.html","permalink":"http://sublimerui.top/googleb245000c32ee4b7e.html","excerpt":"","text":"google-site-verification: googleb245000c32ee4b7e.html"},{"title":"这里是果子小酱！","date":"2020-10-12T17:07:54.215Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"about/index.html","permalink":"http://sublimerui.top/about/index.html","excerpt":"","text":"Hello，这里是Sublime.的果子小酱~ 正如你所听到的BGM那样，这首歌名为《Letter Song》经历太多，回忆太多，可能这也是喜欢《Letter Song》的原因之一吧。词能传情。听得越多愈发感同身受。歌词链接： https://blog.cwxyr.me/archives/19/ 这是我咸鱼，大学生，21届考研党，现居成都Coder，向dalao学习Web和Python中~~ 以下是自我介绍(认真的)关于我 笔名Sublime.**或果子酱** 水瓶座男一枚，99年生，跨越了20世纪，爱新奇，爱折腾。 “长乐村男子职业技术学校”，苦逼的在校大学生(/ω＼) 现主要学习前端Web、Python和嵌入式~ 平时…？ 小码农，正宗吃货一枚(｀・ω・´) 卑微族，啥也不太精通，喜欢捣鼓一些乱七八糟的东西… 没事就写写C、C++、Python和JavaScript… 爱生活，爱旅游，常被生活中的一些细节感动… 贼喜欢上云村淘歌曲（特别喜欢音乐的力量这句话），唯爱日系、民谣和粤语，这里放了部分喜欢音乐 非典型佛系游戏玩家，三年半载不碰不会死，一旦碰了….emmmmm…. 多游荡于B站，知乎和百度贴吧（沉默党），轻度ACG爱好者(｀・ω・´)，很喜欢可爱类型的东西~ 算是励志党吧，心情低落的时候总是自我安慰的类型~ 有小一点志向，正一步步加入到考研党的大军╥﹏╥ 学习历程 时间 经历 学到的知识 大一学年 学习C语言和51单片机 C语言，51单片机 大一暑假 第一次参加电子设计竞赛 初次接触STM32 大二上学期 学习嵌入式STM32和TI微处理器编程，接触Linux STM32和TM4C123单片机，Python，Linux指令，Shell，Vim等 大二寒假和大二下学期 参加蓝桥杯嵌入式编程大赛和美赛建模 进一步学习单片机编程，MATLAB 大二暑假 第二次参加全国电子设计竞赛，开始接触前端技术 四旋翼飞行器，OpenMV，视觉处理，HTML，CSS，JavaScript 大三上学期 继续深入前端知识和Python JavaScript，数据库，jQuery，tensorflow 大三下学期 参加飞思卡尔智能车比赛，尝试自己做小项目 … 大四上至今 备战2021考研 未完待续 … … 关于本站果子小酱如你所见，名为果子小酱。建立这个博客的初心其实很简单，那就是记录所学所得。学得多，忘得也多吧。何尝不找一个地方去记录那些点点滴滴呢？养成记录的习惯，其实没有什么坏处呢。同时，如果当陌生人的你看到我的某篇文章对你有所感触，那一定很温暖吧。要一直保持可爱的呐== 果子酱的小窝-Sakura是的。主要是想记录一些生活的点点滴滴了。自己又不想把技术和生活文章放在一起。如你所见，于是又另外开辟了空间，在侧栏栏有了小窝的入口。记录一些有趣的事，一些伤心的事，一些非同寻常的事。 没错，这里就是我的小窝辣。这里是主页。 域名其实，网站域名sublimerui.top从阿里云购得，包含两个含义： sublime单词表示令人赞叹的，是自己很久之前了解sublime text这个文本编辑器所发现的。 rui其实是自己名字的最后一个拼音 选择顶级域名.top，组合起来sublimerui.top也寓意自己也能够一步步通过努力，一天比一天更好吧 基本信息 博客框架：Hexo静态博客框架，由Github托管. 主题： 使用Volantis主题，经过轻度魔改而成。 其他： 已配备Travis CI持续集成功能，并使用Cloudflare CDN加速。 访客地球 建站记录 时间 改进 2019年5月初 对前端技术产生浓烈的兴趣 2019年5月中旬 连续摸爬滚打后，初步习得了相关知识 2019年6月初 选择Hexo静态博客，使用NexT主题 2019年7月初 被Material-X主题吸引，经过轻度魔改，并优化细节，加上看板娘 2019年9月初 囿于各种情感，开辟子站点，将生活与技术记录分离，名为果子酱的小窝 2019年11月末 网站标题由Sublime&#39;s NoteBook改为果子小酱，并美化logo 2020年3月13日 原主题Material-X大版本升级为Volantis，万年一更的我跟随dalao的步伐，去繁从简 2020年10月11日 考研狗前来摸鱼，继续更新主题版本，由2.6.6到4.1.x+ 未完待续 … 想知道我的更多信息？来我的生活站吧。可以点这里喔"},{"title":"所有分类","date":"2020-10-12T17:07:54.215Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"categories/index.html","permalink":"http://sublimerui.top/categories/index.html","excerpt":"","text":""},{"title":"最钟爱的音乐","date":"2020-10-12T17:07:54.215Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"favorite_things/index.html","permalink":"http://sublimerui.top/favorite_things/index.html","excerpt":"","text":"听音乐已经成为自己的一个日常习惯了。自己最钟爱日系，民谣和粤语类的单曲 PS： 由于网易云版权的问题，有些特别喜欢的单曲无法转到外链。那就只能罗列如下了吧~ 寻找同道之人，也但愿你也喜欢。(✪ω✪)热爱音乐，热爱生活。 自己的网易云音乐主页 网易云自己收藏的音乐：我喜欢的音乐 日系 Letter Song 月がきれい アイロニ 僕らの手には何もないけど、 僕が死のうと思ったのは Lemon Ref:rain 茜さす それがあなたの幸せとしても (カバー) はじまりの日 One more time, One more chance 夢灯籠 夢燈籠 (R7CKY 你的名字 Mix) なんでもないや (movie ver.) パズル Rain … 民谣/LOVE 云烟成雨 美好事物 下一站茶山刘 秋酿 荒岛 我一定会爱上你 借我 祝你狼狈 像鱼 房间-新版 水星记 下一站茶山刘 云烟成雨 多想在平庸的生活拥抱你 … 粤语 月半小夜曲 钟无艳 人来人往 (Live) 一丝不挂 你瞒我瞒 七友 面具 无赖 …"},{"title":"友人帐","date":"2020-10-12T17:07:54.215Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"friends/index.html","permalink":"http://sublimerui.top/friends/index.html","excerpt":"みなさん、こんにちは~","text":"みなさん、こんにちは~ 欢迎大佬们来到小站此站（技术站）和生活站都可以向我申请友链嗷。如想前往生活站，可以点击这里 请先将本站添加到你滴友链中喔，谢谢啦~ 请确保小伙伴们博客的可访问性（划重点！） 请保证你的博客内容质量和原创性，且有持续更新的习惯。这里不欢迎白嫖党喔~ 我会不定期检测死链，并单独罗列在最后。 当死链博客达到一定数量后，会手动移除的喔~ 友链内容如有修改，也可在下方留言嗷~ 友链格式 名称： XXX 【博客名或昵称均可】头像链接： https://your/avatar/picture/ 【请使用https加密协议开头】博客地址： https://your/personal/blog/ 【请使用https加密协议开头】标签/描述： 标签/标签2 【这里可以写希望我贴上的标签喔~ 如：Web/Java/C++】 我的博客信息在这里喔~ 名称： 果子小酱头像链接： https://cdn.jsdelivr.net/gh/cwxyr/mycdn@master/favicon_new.ico博客地址： https://sublimerui.top描述： 茫茫人海中，遇见你。 最后，感谢小可爱们多多支持我喔٩(๑&gt;◡&lt;๑)۶有你们的鼓励，我会一定加油滴"},{"title":"想给博主说点什么呢？","date":"2020-10-12T17:07:54.215Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"message_board/index.html","permalink":"http://sublimerui.top/message_board/index.html","excerpt":"","text":""},{"title":"最近成果","date":"2020-10-12T17:07:54.215Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"project/index.html","permalink":"http://sublimerui.top/project/index.html","excerpt":"","text":"学生电子爱好者协会ICEC官网 目前由Sublime.和hanbaoaaa（汉堡）两人合力开发中…欢迎来看看喔~ 其他项目正在加速施工中~ 未完待续…"},{"title":"笑对生活每一天呐ヽ(≧∀≦)ﾉ","date":"2020-10-12T17:07:54.215Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"schedule/index.html","permalink":"http://sublimerui.top/schedule/index.html","excerpt":"","text":"一个很励志的视频 希望你也能够成为想成为的人。 TODO —— 去翻越一座座高山 为了监督自己好好学习，勤于回顾，将一项项计划做好，是时候开辟任务清单了。 PS：计划逆序排列，完成一项划去一项 2019开学至年底 把Python和JavaScript剩下的知识看完 抽空多学学FPGA技术… 电协ICEC官网网页制作（第七届“电协杯”筹备宣传） 做一个图书管理数据库系统（课程作业，前台JS/Pyhon/CPP + 后台SQL Server） 先确定哪个前台最好 补足相关知识，为课程做准备 合理安排考研和学技术的矛盾关系 2019暑假 全国大学生电子设计竞赛，长达1个月的苦逼培训比赛 搭建了学生电子爱好者协会官网 搭建了一个网盘，存放一些东西(￣.￣)"},{"title":"所有标签","date":"2020-10-12T17:07:54.215Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"tags/index.html","permalink":"http://sublimerui.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"欢迎小伙伴们~本站点在缓慢升级~","slug":"欢迎小伙伴们-本站点在缓慢升级","date":"2020-10-11T01:26:31.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/60500ffa.html","link":"","permalink":"http://sublimerui.top/archives/60500ffa.html","excerpt":"几月不见，是时候升级一下博客了。","text":"几月不见，是时候升级一下博客了。 近期发现主题作者大大更新速度太快了55555…….. 没过几个月，突然发现，自己的博客版本过于老旧了=-= 即日起，本博客正式从Volantis 2.6.6【缓慢】跃迁至最新版本！ 但是，版本间有许多不兼容的地方，需要我一点点修改….加之12月26日考研临近，所以会比较缓慢=-= （咳咳，其实我不会告诉你，自己是刷题累了闲来摸鱼改博客的） 所以呢，博客有很多不完善的地方，请各位大佬们见谅啦=-= 本考研狗在此祝大家考研都能上岸呀~ 祝大家心想事成，奥利给！","categories":[{"name":"杂记","slug":"杂记","permalink":"http://sublimerui.top/categories/%E6%9D%82%E8%AE%B0/"}],"tags":[{"name":"主题相关","slug":"主题相关","permalink":"http://sublimerui.top/tags/%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3/"}]},{"title":"利用OpenCV实现对车流量的统计","slug":"利用OpenCV实现对车流量的统计","date":"2020-07-14T00:07:07.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/48ab4a6e.html","link":"","permalink":"http://sublimerui.top/archives/48ab4a6e.html","excerpt":"博主又有几个月没消息了。去哪里了呢？是的，考研闲暇之余，短时间摸鱼后，他，又灰溜溜地回来了。 博主最近在干啥？详见一枚考研狗的执着","text":"博主又有几个月没消息了。去哪里了呢？是的，考研闲暇之余，短时间摸鱼后，他，又灰溜溜地回来了。 博主最近在干啥？详见一枚考研狗的执着 闲话少絮。开始正题——OpenCV的车流量统计。 调试平台 OpenCV 4.2 VS 2019 汽车识别原理——背景/前景分割算法如今，检测和提取车辆时候，常用的方法有MOG2算法和KNN算法。MOG算法是以高斯混合模型（GMM）为基础的背景/前景分割算法。它是以2004年和2006年Z.Zivkovic的两篇文章为基础的。这个算法的一个特点是它为每一个像素选择一个合适数目的高斯分布。其主要原理为：在一个固定位置和角度固定的视频或图像中，提取分割图像或视频中运动的成分。此算法使用背景建模的方式，将整张图片或一帧视频分为前景和后景。此算法运行时，会将动态的前景与静止的后景相减，得出结果即为徐提取的运动物体的图像。 K最近邻算法（KNN）是属于机器学习的一种算法。其主要原理为：给定一个已训练数据集，对新的输入实例，在训练数据集中找到与该实例最邻近（注：衡量邻近的标准以具体选取的某个特征而言，例如下面示意图中使用的特征为欧式距离）的K个实例，这K个实例的多数属于某个类，则判定该输入实例同属此类。如下图所示：训练者取k值，计算以欧氏距离k为半径的圆内其他类别的个数，图中中心小红点以k为半径的圆内三角形个数最多，则判定中心小红点为三角形。 整体结构整体流程框架图本程序的主要运行流程为：程序运行开始，首先从文件中获取上次保存的光流量检测矩形框数据（顶点坐标和矩形的长宽）；其后，分别初始化背景提取对象，使用MOG2和KNN两种算法。与此同时，建立一个鼠标回调函数，用于捕获鼠标左键（绘制矩形框）、中键（取消操作）和右键（保存矩形框数据到文件）的操作。 此后，程序进入主循环状态。程序循环从视频中获取一帧的图像，先进行压缩处理，以提高后续运算速度。之后，将这一帧图片从RGB转为灰度图片。为了祛除灰度后可能出现的小毛刺杂点，再进行平滑滤波处理。此后，分别通过MOG2和KNN算法提取前景，并将提取后的视频显示出来。与此同时，获取每个矩形框中积分后的亮度和。 最后，两个算法中，分别将实时得到的亮度和与所预设的阈值进行比较，当满足条件后，便认为一辆汽车通过矩形框，使得计数器加一。如此重复，统计整个视频中的车流量。 主要参数 int detectTHD 此参数为预设的亮度阈值。确定是否有汽车经过检测框中，其需要联合上一帧积分亮度和本次积分亮度后综合做出决定。 cv::Size newSize(frame.cols / 2, frame.rows / 2); 此参数可以储存一帧视频缩小后的大小。 cv::Mat showMat; 此参数用于储存最终显示的图像矩阵。 主要函数 static void onMouse(int event, int x, int y, int flags, void\\*) 此函数主要用于检测鼠标左键、滑轮（中键）和右键的一些操作，用于绘制矩形检测框。 cv::resize(frame, newframe, newSize); 此函数主要用于缩小原视频比例，提高计算机运算速度。 bgMOG2-\\&gt;apply(greyFrame, mog2RES, update_bg_model ? -1 : 0);以及bgKNN-\\&gt;apply(greyFrame, KNN, update_bg_model ? -1 : 0); apply函数主要用于两种算法的前景提取。此后，前景提取后的这帧视频保存于bgMOG2和bgKNN之中。 cv::rectangle(showMat, myLanneRect.at(k), cv::Scalar(255, 255, 255), 3); 此函数主要用于前景提取后在其上面绘制矩形框。 cv::integral(subMat, sumMat, CV_32S); 计算车道矩形框亮度积分图。 cv::putText(); 此函数可以按照要求，在视频图像上显示文字和统计数字。 测试结果 功能测试 进行车流量统计前，应当首先根据矩形框中出现车辆时，估算其亮度平均值作为亮度阈值，使其设定为一个较为合适的值，增强检测的灵敏性。由下图可知，当程序运行后，通过手动标记车道检测区域，得到2个矩形检测区。每次获得矩形中的积分亮度结果，当上从亮度结果大于阈值，且此次亮度结果小于阈值时，使车辆统计结果加一。 算法处理时间 由测试结果可知，相较于MOG2算法，KNN算法在运算处理上花费更多的时间，KNN算法时间约为MOG2时间的2倍。同时，算法处理总时间也相对较长，除了两个算法所带来的开销外，仍有其他附加代码所花费的时间。 缩放图片前后比较 程序中，可以使用cv::resize();函数进行图片的压缩，缩放图片对于检测速度有较大的影响。不使用缩放时，将视频中原始一帧的图像进行计算，经测试发现，处理速度很慢，显示的图片有明显的脱帧和卡顿现象，CPU占用率相当高，与压缩后（上图）相比，无论使用MOG2还是KNN算法，其处理时间均成倍增加。下图为不使用缩小图片尺寸条件下的处理时间。 矩形检测区亮度阈值的影响 阈值设置的合理性也是车流量检测准确性的一个重要指标。过高或过低的阈值均不能很好地反映车辆的经过和实现的统计。阈值过低，将会把视频中环境干扰噪声和其他运动对象（如三轮车和行人）当做汽车统计，使得统计结果偏大；同理，阈值过高，将很难检测到车辆的通过，当车辆进过矩形检测区时，无法实现车辆的统计。本程序中，经过检测矩形框内平均值的大致估算，将阈值detectTHD设置为900000。 下图中显示了当阈值设定过小时的状况。右端矩形框（右车道）经过了一辆电动车，程序误认为汽车，并错误地将统计结果L1的值从1加为2。 同理，当阈值设置过大，也会造成统计的不准确。下图显示了当阈值设定过大时的状况。可以发现，即使是车辆经过了矩形框，车辆统计变量L0和L1仍为0。 结论由以上分析可知，汽车流量的统计可以借助设定矩形区域内的亮度阈值来确定。为识别运动对象（汽车）的状态，可使用背景提取算法，如本软件中使用到的MOG2和KNN算法。通过比较不同算法间的处理时间，我们应当合理选择一种耗时短且提取车辆准确性高的一种算法。此外，识别统计车流量较为重要的一环便是设置合理的亮度阈值，亮度阈值设置的合理性直接关系到车流量统计准确性。 附：程序源代码此项目Github地址： https://github.com/cwxyr/traffic-detectioninclude &quot;stdafx.h&quot;#include &lt;Windows.h&gt;#include &lt;string&gt;#include &lt;opencv2/core.hpp&gt;#include &lt;opencv2/imgproc.hpp&gt;#include &lt;opencv2/highgui.hpp&gt;#include &lt;opencv2/features2d.hpp&gt;#include &lt;opencv2/video.hpp&gt;#ifdef _DEBUG#pragma comment(lib, &quot;opencv_world420d.lib&quot;) #else#pragma comment(lib, &quot;opencv_world420.lib&quot;) #endif//===【鼠标事件回调函数】===int detectTHD = 900000; //亮度阈值：有车辆经过的；std::vector&lt;int&gt; myLanneLightSum_Last; //车道亮度和：上一帧的std::vector&lt;int&gt; myLanneVihicleCnt; //车道车辆计数器std::vector&lt;cv::Rect&gt; myLanneRect; //车道矩形框；显示为红色；std::vector&lt;cv::Point&gt; myMousePoints; //鼠标点向量；显示为蓝色；int myMouseEventBusy = 0; //鼠标回调事件忙:简单的资源锁static void onMouse(int event, int x, int y, int flags, void*)&#123; myMouseEventBusy = 1; cv::Point mPoint; cv::Rect mRect; switch (event) &#123; case cv::EVENT_LBUTTONDOWN: //左键按下:增加myMousePoints中的点数 mPoint = cv::Point(x, y); myMousePoints.push_back(mPoint); //将当前鼠标点推送到向量中； if (myMousePoints.size() &gt; 4) myMousePoints.erase(myMousePoints.begin()); //保证myMousePoints向量中节点数不大于4； break; case cv::EVENT_RBUTTONDOWN: //右键键按下：将myMousePoints中的4个点推送到矩形框向量myLanneRect if (myMousePoints.size() == 4) &#123; int Xmin = 100000; int Ymin = 100000; int Xmax = 0; int Ymax = 0; for (int k = 0; k &lt; 4; k++) &#123; Xmin = std::min(Xmin, myMousePoints.at(k).x); Ymin = std::min(Ymin, myMousePoints.at(k).y); Xmax = std::max(Xmax, myMousePoints.at(k).x); Ymax = std::max(Ymax, myMousePoints.at(k).y); &#125;//for k &lt;&lt;&lt; === 用四个点构成矩形框的参数 mRect = cv::Rect(Xmin, Ymin, Xmax - Xmin, Ymax - Ymin); //构成矩形框 myLanneRect.push_back(mRect); myLanneLightSum_Last.push_back(0); myLanneVihicleCnt.push_back(0); myMousePoints.clear(); //清除鼠标点向量 &#125;///if break; case cv::EVENT_MBUTTONDOWN: //中间键键按下：删除myMousePoints中的一个点；myMousePoints为空时，删除myLanneRect中的节点； printf(&quot;EVENT_MBUTTONDOWN\\n&quot;); if (myMousePoints.size() &gt; 0) myMousePoints.pop_back(); else &#123; myLanneRect.pop_back(); myLanneLightSum_Last.pop_back(); myLanneVihicleCnt.pop_back(); &#125; break; &#125;/////switchmyMouseEventBusy = 0;return;&#125;int main(int argc, char* argv[])&#123; char errorMSG[256]; char curPathName[384] = &quot;&quot;; char curModulerPath[384] = &quot;&quot;; GetCurrentDirectory(383, curModulerPath); printf(&quot;Line39: curModulerPath = %s\\n&quot;, curModulerPath); //=======读取标记的矩形框文件内容到myLanneRect：======= #ifndef READ_RECT_FILE FILE *pFILE = fopen(&quot;MarkRect.txt&quot;, &quot;r&quot;); if (pFILE != NULL) &#123; cv::Rect mRect; while (fgets(errorMSG, 255, pFILE) != NULL) &#123; int rtn = sscanf(errorMSG, &quot;%d %d %d %d&quot;, &amp;mRect.x, &amp;mRect.y, &amp;mRect.width, &amp;mRect.height); if (rtn == 4) &#123; myLanneRect.push_back(mRect); myLanneLightSum_Last.push_back(0); myLanneVihicleCnt.push_back(0); &#125; &#125; fclose(pFILE); &#125;///if #endif // !READ_RECT_FILE std::string imgName = &quot;video-02.mp4&quot;; char FilePath[384]; if (strlen(curPathName) &gt; 0) sprintf(FilePath, &quot;%s\\\\%s&quot;, curPathName, imgName.c_str()); //图片文件路径 else sprintf(FilePath, &quot;%s&quot;, imgName.c_str()); //图片文件路径 //==【01】== 打开视频文件或摄像头 cv::VideoCapture cap; //VideoCapture类实例化，使用缺省摄像头 if (0 &amp;&amp; &quot;UsingCam&quot;) cap.open(0); else cap.open(FilePath); if (!cap.isOpened()) // check if we succeeded &#123; printf(&quot;error#73: 打开设备或文件失败，检查是否存在！回车退出！\\n路径=%s\\n&quot;, FilePath); fgets(FilePath, 127, stdin); return -1; &#125; cv::Mat frame, newframe, greyFrame, floatFrame, lastFrame, frame2, mog2RES, KNN, out_frame, avgFrame; std::vector&lt;cv::Mat&gt; diffIMGvec; //==【02】== 创建运动视频背景提取对象：用于分离背景和运动对象 cv::Ptr&lt;cv::BackgroundSubtractorMOG2&gt; bgMOG2 = cv::createBackgroundSubtractorMOG2(); cv::Ptr&lt;cv::BackgroundSubtractorKNN&gt; bgKNN = cv::createBackgroundSubtractorKNN(); bgMOG2-&gt;setVarThreshold(30); bool update_bg_model = true; //==【03】== 命名几个显示窗口 cv::namedWindow(&quot;RawWnd&quot;, cv::WINDOW_NORMAL); cv::setMouseCallback(&quot;RawWnd&quot;, onMouse, &amp;newframe); //设置鼠标事件回调函数（&quot;RawWnd&quot;窗口的）：同时传递彩色图像指针； cv::namedWindow(&quot;Out_KNN&quot;, cv::WINDOW_NORMAL); cv::namedWindow(&quot;Out_MOG2&quot;, cv::WINDOW_NORMAL); int frameNums = 0; for (;;) &#123; frame.rows = 0; double t1 = (double)cv::getCPUTickCount(); //开始统计时间 cap.read(frame); if (frame.rows == 0) break; cv::Size newSize(frame.cols / 2, frame.rows / 2); //压缩图像，将其尺寸缩小 cv::resize(frame, newframe, newSize); cv::cvtColor(newframe, greyFrame, cv::COLOR_RGB2GRAY); //转换为灰度图 cv::blur(greyFrame, greyFrame, cv::Size(3, 3)); //使用平滑运算 double t2 = (double)cv::getCPUTickCount(); bgMOG2-&gt;apply(greyFrame, mog2RES, update_bg_model ? -1 : 0); //使用MOG2算法提取前景 double t3 = (double)cv::getCPUTickCount(); //获取处理时间 double t4 = (double)cv::getCPUTickCount(); bgKNN-&gt;apply(greyFrame, KNN, update_bg_model ? -1 : 0); //使用KNN算法提取前景 double t5 = (double)cv::getCPUTickCount(); //获取处理时间 printf(&quot;MOG2 Time = %.3fms\\n&quot;, 1e0 * (t3 - t2) / (double)cv::getTickFrequency()); printf(&quot;KNN Time = %.3fms\\n&quot;, 1e0 * (t5 - t4) / (double)cv::getTickFrequency()); printf(&quot;Total Time = %.3fms\\n&quot;, 1e0 * (t5 - t1) / (double)cv::getTickFrequency()); printf(&quot;--------------------\\n&quot;); if (!mog2RES.empty()) //计算MOG2算法下矩形框的积分亮度值 &#123; cv::Mat showMat; mog2RES.copyTo(showMat); if (myMouseEventBusy == 0) &#123; for (int k = 0; k &lt; myLanneRect.size(); k++) &#123; cv::rectangle(showMat, myLanneRect.at(k), cv::Scalar(255, 255, 255), 3); cv::Mat subMat = mog2RES(myLanneRect.at(k)); //再MOG2的前景提取结果中，取车道标记矩形框区域为subMat矩阵 cv::Mat sumMat; //积分图 == subMat的积分矩阵 cv::integral(subMat, sumMat, CV_32S); //设置积分矩阵的数据类型为uint； int sumValue = (int)sumMat.at&lt;int&gt;((int)sumMat.rows - 1, (int)sumMat.cols - 1); //获取积分图右下角的值，就是矩形框内亮度和； sprintf(errorMSG, &quot;sum = %d;&quot;, sumValue); cv::putText(showMat, errorMSG, cv::Point(myLanneRect.at(k).x, myLanneRect.at(k).y + 4), 0.2, 1, cv::Scalar(255, 0, 0), 2);//显示矩形框内的亮度和； &#125;//for k &#125;////if cv::imshow(&quot;Out_MOG2&quot;, showMat); &#125; if (!KNN.empty()) //计算KNN算法下矩形框的积分亮度值 &#123; cv::Mat showMat; KNN.copyTo(showMat); if (myMouseEventBusy == 0) &#123; for (int k = 0; k &lt; myLanneRect.size(); k++) &#123; cv::rectangle(showMat, myLanneRect.at(k), cv::Scalar(255, 255, 255), 3); cv::Mat subMat = KNN(myLanneRect.at(k)); //再KNN的前景提取结果中，取车道标记矩形框区域为subMat矩阵 cv::Mat sumMat; //积分图 == subMat的积分矩阵 cv::integral(subMat, sumMat, CV_32S); //设置积分矩阵的数据类型为uint； int sumValue = (int)sumMat.at&lt;int&gt;((int)sumMat.rows - 1, (int)sumMat.cols - 1); //获取积分图右下角的值，就是矩形框内亮度和； sprintf(errorMSG, &quot;sum = %d;&quot;, sumValue); cv::putText(showMat, errorMSG, cv::Point(myLanneRect.at(k).x, myLanneRect.at(k).y + 4), 0.2, 1, cv::Scalar(255, 0, 0), 2);//显示矩形框内的亮度和； &#125;//for k &#125;////if imshow(&quot;Out_KNN&quot;, showMat); &#125; //===&gt;&gt;&gt; 显示原始图像：显示车道标记信息 + 矩形框内亮度和 + 车流量统计 #ifndef SHOW_RAW_MAT cv::Mat showMat; newframe.copyTo(showMat); //矩阵复制 sprintf(errorMSG, &quot;mL=add Point; mR=add Rect; mM=delete Point;&quot;); cv::putText(showMat, errorMSG, cv::Point(8, 32), 0.2, 1, cv::Scalar(255, 0, 0), 2);//显示提示信息； //==&gt;&gt; 显示车道矩形框为红色 + 车流量统计 + 车流量显示 if (myMouseEventBusy == 0) &#123; for (int k = 0; k &lt; myLanneRect.size(); k++) &#123; cv::rectangle(showMat, myLanneRect.at(k), cv::Scalar(0, 0, 255), 3); cv::Mat subMat = mog2RES(myLanneRect.at(k)); //再MOG2的前景提取结果中，取车道标记矩形框区域为subMat矩阵 cv::Mat sumMat; //积分图 == subMat的积分矩阵 cv::integral(subMat, sumMat, CV_32S); //设置积分矩阵的数据类型为int，计算车道矩形框内亮度积分图； int sumValue = (int)sumMat.at&lt;int&gt;((int)sumMat.rows - 1, (int)sumMat.cols - 1); //获取积分图右下角的值，就是矩形框内亮度和； sprintf(errorMSG, &quot;sum = %d;&quot;, sumValue); cv::putText(showMat, errorMSG, cv::Point(myLanneRect.at(k).x, myLanneRect.at(k).y + 4), 0.2, 1, cv::Scalar(255, 255, 0), 2);//显示矩形框内的亮度和； //===&gt;&gt;&gt; 车流量统计： if (myLanneLightSum_Last.at(k) &gt; detectTHD &amp;&amp; sumValue &lt;= detectTHD) &#123; //:: 车辆通过了矩形框：上一帧亮度和大于阈值，本帧亮度和小于阈值；车辆计数器自加； myLanneVihicleCnt.at(k)++; myLanneLightSum_Last.at(k) = sumValue; &#125; else myLanneLightSum_Last.at(k) = sumValue; //存储当前亮度和到myLanneLightSum_Last &#125;//for k //===&gt;&gt; 车流量统计结果显示 cv::Mat topareaMat = showMat(cv::Rect(0, 0, showMat.cols, 75)); //最顶部48行置0； topareaMat *= 255; std::string strVihicleCnt = &quot;VihicleCnt: &quot;; for (int k = 0; k &lt; myLanneRect.size(); k++) &#123; sprintf(errorMSG, &quot;L%d = %d;&quot;, k, myLanneVihicleCnt.at(k)); strVihicleCnt += errorMSG; &#125; cv::putText(showMat, strVihicleCnt.c_str(), cv::Point(8, 64), 0.2, 1, cv::Scalar(0, 0, 255), 2); //流量统计显示到彩色图片上 &#125;////if //==&gt;&gt; 显示正在标记的坐标点为蓝色： if (myMouseEventBusy == 0) &#123; for (int k = 1; k &lt; myMousePoints.size(); k++) &#123; cv::line(showMat, myMousePoints.at(k - 1), myMousePoints.at(k), cv::Scalar(255, 0, 0), 15); &#125;//for k if(myMousePoints.size() == 4) cv::line(showMat, myMousePoints.at(0), myMousePoints.at(3), cv::Scalar(255, 0, 0), 2); &#125;////if imshow(&quot;RawWnd&quot;, showMat); #endif // SHOW_RAW_MAT int keycode = cv::waitKey(100); //等待100ms if (keycode == &#x27;q&#x27;) break; else if (keycode == &#x27; &#x27;) &#123; update_bg_model = !update_bg_model; printf(&quot;Learn background is in state = %d\\n&quot;, update_bg_model); &#125; else if (keycode == &#x27;w&#x27;) &#123; //写文件：记录标记的矩形框到文件中： #ifndef WRITE_RECT_FILE FILE *pFILE = fopen(&quot;MarkRect.txt&quot;, &quot;w&quot;); if (pFILE != NULL) &#123; for (int k = 0; k &lt; myLanneRect.size(); k++) &#123; fprintf(pFILE, &quot;%d %d %d %d\\n&quot;, myLanneRect.at(k).x, myLanneRect.at(k).y, myLanneRect.at(k).width, myLanneRect.at(k).height); &#125; fclose(pFILE); &#125;///if #endif // !WRITE_RECT_FILE &#125; frameNums++; Sleep(50); &#125;//for cap.release(); return 0;&#125;","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"C++","slug":"学习笔记/C","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C/"},{"name":"OpenCV","slug":"学习笔记/OpenCV","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OpenCV/"}],"tags":[{"name":"OpenCV, 图像处理","slug":"OpenCV-图像处理","permalink":"http://sublimerui.top/tags/OpenCV-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}]},{"title":"开往-Travelling","slug":"开往-Travelling","date":"2020-03-17T02:42:44.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/aca9eb9b.html","link":"","permalink":"http://sublimerui.top/archives/aca9eb9b.html","excerpt":"互联网将人与人之间的距离大大减小，却还是形成了大大小小的孤岛。只有熟人间才知道彼此，而陌生人永远只能是陌生人。","text":"互联网将人与人之间的距离大大减小，却还是形成了大大小小的孤岛。只有熟人间才知道彼此，而陌生人永远只能是陌生人。 Travelling 茫茫星辰中，去寻找不一样的、别致的星球。 这就是开往-Travelling。将一个个独立的个人星球连接起来，去探索下一个未知的人。 一块徽标，占用一个小地方，就这样简单地和他人联系在了一起。 开往下一个世界 这是一个不一样的Github项目，在issue中提交申请，几日内就会受理。 但是申请的网站必须满足几点要求： 愿为开放的网络做出贡献（如分享知识经验设计等）；没有违法以及影响体验的内容（如侵入式广告等）；正常更新维护中（国内无法正常访问会被移除）；强制启用 https 。 下面就是通向异域的按钮。 闲话絮语偶然的机会，发现Github上面有这样的一个项目，点击Travelling之后，目标博客随机跳转，开启了一个又一个新世界。正如你所看到的，网站页脚已经加上Travelling的徽标啦~","categories":[{"name":"小工具","slug":"小工具","permalink":"http://sublimerui.top/categories/%E5%B0%8F%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"友链","slug":"友链","permalink":"http://sublimerui.top/tags/%E5%8F%8B%E9%93%BE/"}]},{"title":"利用OpenCV对图像和视频进行载入和访问","slug":"利用OpenCV对图像和视频进行载入和访问","date":"2020-02-28T12:12:26.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/3ad132bb.html","link":"","permalink":"http://sublimerui.top/archives/3ad132bb.html","excerpt":"很久都没更新博客了（跪）….前期因为疫情和考研压力，所以就一直咕咕咕 在家上网课，学习OpenCV，做了一点笔记吧。抽空写博客，仍然更新很慢（大声哭泣）","text":"很久都没更新博客了（跪）….前期因为疫情和考研压力，所以就一直咕咕咕 在家上网课，学习OpenCV，做了一点笔记吧。抽空写博客，仍然更新很慢（大声哭泣） 运行平台 OpenCV 4.2 VS 2019 图像在内存中的存储和操作从图像数据性质推理图像在内存中的存储方式： 图像数据是多通道：1/3/4通道；像素数据类型：1位，uchar，short，int，float，double等； OpenCV中的C++ Mat类：1234567891011121314151617181920212223242526class CV_EXPORTS Mat&#123;public: // …大量方法… ... /*! includes several bit-fields: - the magic signature - continuity flag - depth - number of channels */ int flags; //! the array dimensionality, &gt;= 2 int dims; //! the number of rows and columns or (-1, -1) when the array has more than 2 dimensions int rows, cols; //! pointer to the data uchar* data; // other members ...&#125;; 图像在内存中的基本要素： ①列数cols = 宽度，行数rows = 高度，通道数（彩色空间类型），位深度（数据类型：8位无符号8U，32位浮点32F等）；②像素存储区（uchar* data;） 创建Mat矩阵–通过构造函数： 1Mat img(Size(320,240), CV_8UC3);` 宽度(320)，高度(240)，数据类型8U(8位无符号)，3通道 创建Mat矩阵–通过create函数： 123Mat img;img .create(Size(320,240), CV_32FC3);//32位浮点型 创建载入图像文件： 1Mat img = imread(&quot;lena.jpg&quot;, CV_LOAD_IMAGE_COLOR); 像素数据在内存中的组织方式：PS:内存是顺序排列的字节阵列 通过Mat方法访问图像像素 3通道24位深度（表达每个通道占用8位）彩色图像像素的访问： 1234cv::Vec3b pixlsValue; //==表达这是一个3字节像素数据节点;pixlsValue = img.at&amp;lt;cv::Vec3b&amp;gt;(y, x);//y表达行号；x表达列号；尖括号&lt;...&gt;中的内容是C++模板，指定图像矩阵的数据类型； 像素值的修改方法： 123pixlsValue.val[0] = xxx;pixlsValue.val[1] = xxx;pixlsValue.val[2] = xxx; 修改后的像素值返回到存储器： 1img.at&lt;cv::Vec3b&gt;(y, x) = pixlsValue；其中，y和x为像素坐标; 通过C++指针方法访问图像像素 图像行列数Rows和Cols，数据首地址 uchar* data，通道数chaN，每行总字节数byteR可通过矩阵类接口获得； 每个像素的字节数byteN= 位深度/8；位深度24位彩色图像每个像素占用3字节；float类型单通道图像每个像素占用4字节；… 每行总字节数byteR = 每像素字节数 * 列数 = byteN * Cols; 第row行第col列像素向量的地址偏移量（相对像素数据首字节）： 1pixlAddr = row * byteR + col * byteN ； 像素向量首字节地址为 (uchar *)&amp;data [pixlAddr]; 如果是uchar型图像，则像素首地址为： 1uchar *pixlPTR = (uchar*) data [pixlAddr]; 如果是float型图像，则像素首地址为： 1float *pixlPTR = (float*) data [pixlAddr]; 对于3通道8位（位深度24位）彩色图像(RGB)，则3个彩色通道像素存储位置为：pixlPTR[0] = B 、pixlPTR[1] = G 、pixlPTR[2] = R； 通过实验可以证明，使用C++指针访问像素，时间开销远低于调用cv::Mat.at()方法； 图像像素访问例程完整代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include &quot;stdafx.h&quot;#include &amp;lt;Windows.h&amp;gt;#include &amp;lt;opencv2/core.hpp&amp;gt;#include &amp;lt;opencv2/imgproc.hpp&amp;gt;#include &amp;lt;opencv2/highgui.hpp&amp;gt;#include &amp;lt;opencv2/features2d.hpp&amp;gt; #ifdef _DEBUG#pragma comment(lib, &quot;opencv_world420d.lib&quot;)#else#pragma comment(lib, &quot;opencv_world420.lib&quot;)#endifint main(int argc, char* argv[])&#123; char curPathName[384] = &quot;&quot;; char FilePath[384] = &quot;lena.jpg&quot;; if (strlen(curPathName) &gt; 0) sprintf(FilePath, &quot;%s\\\\lena.jpg&quot;, curPathName); //图片文件路径 cv::Mat readImg = cv::imread(FilePath, cv::IMREAD_COLOR); //读取彩色图片: opencv420的IMREAD_COLOR与之前版本不同 if (readImg.empty()) &#123; printf(&quot;error#41: 未能读取到图片，检查文件是否存在！回车退出！\\n图片路径=%s\\n&quot;, FilePath); fgets(FilePath, 127, stdin); return -1; &#125; cv::imshow(&quot;readImg&quot;, readImg);//显示图片，窗口标题为readImg cv::Mat imgFloat; readImg.convertTo(imgFloat, CV_32F); //在C++中，访问矩阵中的像素有两种方法：通过矩阵方法和通过指针；通过指针是最快的访问方法 cv::Vec3b colorValue; uchar greyValue; int channelNUMS = readImg.channels(); uchar *pDATA = readImg.data; //为了通过指针访问存储区，我们获取存储区的首指针 int dataSTEP = readImg.step1(); //注意，当图像列数cols=512，3通道时，dataSTEP值为512 * 3 = 1536； int dataSTEP2 = imgFloat.step1(); //注意，当图像列数cols=512，3通道时，dataSTEP值为512 * 3 = 1536； int64 timeSTART = cv::getTickCount(); for (int i = 0; i&lt; imgFloat.rows / 2; i++) &#123; for (int j = 0; j&lt; readImg.cols; j++) &#123; //我们使用条件编译开关来控制使用那一段代码 #ifndef ACCESS_IAMGE_BY_PTR //使用Mat的At()方法访问像素：花费时间几乎是指针方法的10倍； switch (channelNUMS) &#123; case 1: readImg.at&amp;lt;uchar&amp;gt;(i, j) = 255 - readImg.at&amp;lt;uchar&amp;gt;(i, j); break; case 3: colorValue = readImg.at&amp;lt;cv::Vec3b&amp;gt;(i, j); colorValue.val[0] = 255 - colorValue.val[0]; colorValue.val[1] = 255 - colorValue.val[1]; colorValue.val[2] = 255 - colorValue.val[2]; readImg.at&amp;lt;cv::Vec3b&amp;gt;(i, j) = colorValue; break; &#125; #else //使用指针方法访问像素：花费时间几乎是Mat的At()方法的1/10倍； if (pDATA[i * dataSTEP * sizeof(uchar) + j * channelNUMS + 0] &gt; 200 &amp;&amp; pDATA[i * dataSTEP * sizeof(uchar) + j * channelNUMS + 1] &gt; 200 &amp;&amp; pDATA[i * dataSTEP * sizeof(uchar) + j * channelNUMS + 2] &gt; 200) &#123; pDATA[i * dataSTEP * sizeof(uchar) + j * channelNUMS + 0] = 64; pDATA[i * dataSTEP * sizeof(uchar) + j * channelNUMS + 1] = 64; pDATA[i * dataSTEP * sizeof(uchar) + j * channelNUMS + 2] = 0; &#125; else &#123; pDATA[i * dataSTEP * sizeof(uchar) + j * channelNUMS + 0] = 255 - pDATA[i * dataSTEP * sizeof(uchar) + j * channelNUMS + 0]; pDATA[i * dataSTEP * sizeof(uchar) + j * channelNUMS + 1] = 255 - pDATA[i * dataSTEP * sizeof(uchar) + j * channelNUMS + 1]; pDATA[i * dataSTEP * sizeof(uchar) + j * channelNUMS + 2] = 255 - pDATA[i * dataSTEP * sizeof(uchar) + j * channelNUMS + 2]; &#125; #endif ACCESS_IAMGE_BY_PTR &#125; &#125; int64 timeEND = cv::getTickCount(); //处理结束时间 double usingTime = (double)(timeEND - timeSTART) / (double)cv::getTickFrequency();//统计矩阵操作花费的时间，单位ms； printf(&quot;INFO#128: 图像处理耗时：%.6f 秒\\n&quot;, usingTime); cv::imshow(&quot;Nagtive Film&quot;, readImg); cv::imwrite(&quot;Nagtive_Film.bmp&quot;, readImg); //保存处理后的图像为bmp文件 cv::waitKey();//等待按下键盘，这是程序退出前让显示窗得以被显示的方法！ return 0;&#125; VS 2019实际运行效果如下： 视频图像的特点 视频源：摄像头和视频文件； 视频图像格式：AVI、VCD、SVCD、DVD、MPG、WMV、RM、RMVB、MOV、MP4、MPEG4、3GP、H264等等。 视频图像在硬盘中存储要求更高压缩比，压缩、解压缩处理的计算开销较大； 无论什么格式视频图像，载入到内存后将被转换为像素矩阵，并存储到内存中。此时，像素访问方法将与静止图像没有差异。 通过C++调用OpenCV库载入图像 这里使用C++和OpenCV库将视频载入内存，并将视频图像记录到另一个视频文件中 可以发现： 视频是一个图像序列； 图像序列中的每幅图像仍以像素矩阵存储在内存中，访问方法与静止图像相同。 使用OpenCV记录的视频文件，仅仅存储了经过编码后的视频流数据，还不符合视频文件格式标准，不能使用常规的播放器来播放，需要使用一些特殊的视频播放器（例如VLC）来播放。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106//#include &quot;stdafx.h&quot;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;iostream&amp;gt; // for standard I/O#include &amp;lt;Windows.h&amp;gt;#include &amp;lt;opencv2/core.hpp&amp;gt;#include &amp;lt;opencv2/imgproc.hpp&amp;gt;#include &amp;lt;opencv2/highgui.hpp&amp;gt;#include &amp;lt;opencv2/features2d.hpp&amp;gt;#include &amp;lt;opencv2/video.hpp&amp;gt;#ifdef _DEBUG0#pragma comment(lib, &quot;opencv_world420d.lib&quot;)#else#pragma comment(lib, &quot;opencv_world420.lib&quot;)#endifint main(int argc, char **argv)&#123; char curPathName[384] = &quot;&quot;; //==【01】== 打开视频文件或摄像头 char FilePath[384] = &quot;HighWay_Video_001.Avi&quot;; if (strlen(curPathName) &gt; 0) sprintf(FilePath, &quot;%s\\\\HighWay_Video_001.Avi&quot;, curPathName); //图片文件路径 //==【01】== 视频输入选择和打开：摄像头或视频文件 cv::String path = FilePath; if(argc &gt; 1) path = argv[1]; //可通过命令行第二个参数指定视频文件名 //path = &quot;&quot;; //====&gt;&gt;&gt;&gt;如果启用此行，将从摄像头中读取视频图像&lt;&lt;&lt;&lt;==== cv::VideoCapture cap; //VideoCapture类实例化，使用缺省摄像头 if(path.length() == 0) cap.open(0); //打开第一个摄像头 else cap.open(path); //打开视频文件 if(!cap.isOpened()) // check if we succeeded return -1; cv::Mat frame, greyFrame; //==【02】== 视频记录类实例化 cv::VideoWriter outputVideo; // Open the output int saveAVIenable = 0; //非0时记录视频 if(saveAVIenable)&#123; bool rtn = outputVideo.open(&quot;Result003.avi&quot;, cv::VideoWriter::fourcc(&#x27;M&#x27;, &#x27;J&#x27;, &#x27;P&#x27;, &#x27;G&#x27;), 10, cv::Size((int)cap.get(cv::CAP_PROP_FRAME_WIDTH), (int)cap.get(cv::CAP_PROP_FRAME_HEIGHT) ) , true); if(!rtn) return -2; &#125; //==【03】== 创建一个运动视频背景提取对象：分离背景和运动对象： 暂时未使用！ cv::Ptr&lt;cv::BackgroundSubtractorMOG2&gt; bgsubtractor= cv::createBackgroundSubtractorMOG2(); //==【04】== 命名两个显示窗口 cv::namedWindow(&quot;SRC&quot;, 0); cv::namedWindow(&quot;GREY&quot;, 0); //==【05】== 循环读取视频 int frameNums = 0; for(;;) &#123; double t1 = (double)cv::getCPUTickCount(); cap.read(frame); //读取一个视频帧 if(frame.empty()) break; if(saveAVIenable) outputVideo.write(frame); //写视频文件 //==&gt;&gt; 取视频帧frame的一个矩形区，转换为灰度图像，存储到greyFrame cv::cvtColor(frame(cv::Rect(0, 150, frame.cols, frame.rows - 150)), greyFrame, cv::COLOR_RGB2GRAY); //==&gt;&gt; 将图像greyFrame的长宽分别缩小到1/2 cv::resize(greyFrame, greyFrame, cv::Size(greyFrame.cols/2, greyFrame.rows/2)); //==&gt;&gt; 使用7*7卷积窗，平滑灰度图像greyFrame cv::blur(greyFrame, greyFrame, cv::Size(7,7)); // ==&gt;&gt; 计算处理时间 double t2 = (double)cv::getCPUTickCount(); printf(&quot;Line74 Video Play Delta Time = %.3fms\\n&quot;, 1e0 * (t2 - t1)/(double)cv::getTickFrequency()); // ==&gt;&gt; 显示处理结果 imshow(&quot;SRC&quot;, frame); if(!greyFrame.empty()) imshow(&quot;GREY&quot;, greyFrame); // ==&gt;&gt; 按下键盘q退出 int keycode = cv::waitKey(30); if( keycode == &#x27;q&#x27;) break; frameNums++; &#125;//for if(saveAVIenable) outputVideo.release(); cap.release();return 0;&#125; VS 2019实际运行效果如下：","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"C++","slug":"学习笔记/C","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C/"},{"name":"OpenCV","slug":"学习笔记/OpenCV","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OpenCV/"}],"tags":[{"name":"OpenCV, 图像处理","slug":"OpenCV-图像处理","permalink":"http://sublimerui.top/tags/OpenCV-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}]},{"title":"学做图书管理系统--使用pyodbc和PyQt5连接前台GUI和后台SQL Server数据库","slug":"学做图书管理系统-使用pyodbc和PyQt5连接前台GUI和后台SQL-Server数据库","date":"2019-12-06T03:21:45.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/ca06d6a5.html","link":"","permalink":"http://sublimerui.top/archives/ca06d6a5.html","excerpt":"这里主要记录了使用Python语言连接SQL Server的主要步骤和方法。","text":"这里主要记录了使用Python语言连接SQL Server的主要步骤和方法。 在连接数据库之前，需要确保电脑上有以下环境和软件： （必备）任意一种数据库（这里选择SQL Server） （必备）Python 3，可以在Python的官网下载对应的版本 （必备）任意一种代码编辑器或IDE（本教程使用的VS Code和SSMS两种，也可使用Python自带的IDLE或者Pycharm） （可选）使用Python包管理器Anaconda，或者使用Python自带的pip 安装pyodbc 首先，使用组合键Win + R调出运行窗口，输入cmd，打开命令行。 在命令行（CMD）界面，如使用了Anaconda，则需要激活conda环境（如没有Anaconda，则可以跳过这一步）： 1activate 当光标前面出现了(base) C:\\Users\\用户名&gt;，则说明进入了conda的base环境。 输入如下任意其中一种命令： 12pip install pyodbc #常规方法，pip安装conda install pyodbc #如果安装了Anaconda，则可以使用conda命令 当出现提示确认是否安装，输入y，则可以等待安装完成。 安装SQL Server的ODBC驱动程序和命令行工具 进入微软的此页面下载安装ODBC驱动程序 进入微软的此页面下载安装命令行工具 在命令行输入如下命令登录SQL Server： 12sqlcmd -S localhost -U sa -P your_password1&gt; #已登录成功","categories":[],"tags":[]},{"title":"学做图书管理系统--使用SQL Server创建并插入数据，建立触发器和存储过程","slug":"学做图书管理系统--使用SQL Server创建并插入数据，建立触发器和存储过程","date":"2019-10-31T00:20:05.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/6e81849.html","link":"","permalink":"http://sublimerui.top/archives/6e81849.html","excerpt":"数据库（Database）可以说是前端网站搭建必不可少的部分了。常见的数据库软件有微软的SQL Server和Linux服务器中常见的MySQL两种。 |ू･ω･` )","text":"数据库（Database）可以说是前端网站搭建必不可少的部分了。常见的数据库软件有微软的SQL Server和Linux服务器中常见的MySQL两种。 |ू･ω･` ) 在连接数据库之前，需要确保电脑上有以下环境和软件： （必备）任意一种数据库（这里选择SQL Server） （必备）Python 3，可以在Python的官网下载对应的版本 （必备）任意一种代码编辑器或IDE（本教程使用的VS Code和SSMS两种，也可使用Python自带的IDLE或者Pycharm） （可选）使用Python包管理器Anaconda，或者使用Python自带的pip 安装SQL Server SQL Server可以从微软的官方网站上面下载获取：链接：https://www.microsoft.com/zh-cn/sql-server/sql-server-downloads 我们可以选择免费的Express版本下载即可： 选择自定义安装： 选择下载到D盘，安装： 这里需要稍等片刻： 下载后安装，选择全新的SQL Server安装： 然后依次按照图片所示一步步进行下去： 稍微等待一会儿…. 安装完成啦~ 安装SQL Server管理工具（SSMS） 当我们安装了SSMS之后，便可以可视化地方便管理我们的数据库啦~ 其实，SSMS软件与Linux环境下管理MySQL数据库的phpMyAdmin功能挺类似的呐~ 首先，在SQL Server安装中心，选择第三项，安装SQL Server管理工具： 跳转到网页页面，选择最新的版本下载： 选择D盘安装，按照要求重启电脑： 重启后，在开始菜单找到SQL Server Management Studio打开，并登陆就可以啦~ 创建一个数据库我们可以新建一个查询（数据库脚本）来创建一个数据库。 登录进入SSMS后，选择菜单栏中的新建查询： 在SQL脚本中可以输入如下代码，例如我创建的存放数据的数据库和日志的数据库： 123456789101112131415161718CREATE DATABASE BookManageSysON( NAME = &#x27;BookManageSys_Data&#x27;, FILENAME = &#x27;E:\\Common_things\\Programs\\数据库SQL\\BookManageSystem\\BookManageSys.mdf&#x27;, SIZE = 10 MB, MAXSIZE = 50 MB, FILEGROWTH = 5%)LOG ON( NAME = &#x27;BookManageSys_Log&#x27;, FILENAME = &#x27;E:\\Common_things\\Programs\\数据库SQL\\BookManageSystem\\BookManageSys_Log.ldf&#x27;, SIZE = 2 MB, MAXSIZE = 5 MB, FILEGROWTH = 1 MB)GO 在T-SQL语法中，可以指定数据库的存放位置和其他约束和规则限制，只要在后面加上NAME和FILENAME参数即可。 或者直接在数据库默认目录下创建： 12CREATE DATABASE BookManageSysGO 然后在菜单栏点击执行，便可以创建一个数据库啦。 创建表、插入数据到表中创建读者表、图书表和借阅表： 12345678910111213141516171819202122232425262728293031create table TReader( ReaderID char(8) NOT NULL PRIMARY KEY, Name char(8) NOT NULL, Sex bit not null, Born date not null, Spec char(12) not null, Num int not null default 0, Photo varbinary(MAX))create table TBook( ISBN char(18) not null primary key, BookName char(40) not null, Author char(16) not null, Publisher char(30) not null, Price float not null, CNum int not null, Snum int not null, Summary varchar(200), Photo varbinary(MAX))create table TLend( BookID char(10) not null primary key, ReaderID char(8) not null, ISBN char(18) not null, Ltime datetime not null) 向三个表中插入一些数据： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354INSERT INTO TReaderVALUES(&#x27;131101&#x27;,&#x27;王林&#x27;,1,&#x27;1996-2-10&#x27;,&#x27;计算机&#x27;,4,null),(&#x27;131102&#x27;,&#x27;程明&#x27;,1,&#x27;1997-2-1&#x27;,&#x27;计算机&#x27;,2,null),(&#x27;131103&#x27;,&#x27;王燕&#x27;,0,&#x27;1995-10-6&#x27;,&#x27;计算机&#x27;,1,null),(&#x27;131104&#x27;,&#x27;韦严平&#x27;,1,&#x27;1996-8-26&#x27;,&#x27;计算机&#x27;,4,null),(&#x27;131106&#x27;,&#x27;李方方&#x27;,1,&#x27;1996-11-20&#x27;,&#x27;计算机&#x27;,1,null),(&#x27;131107&#x27;,&#x27;李明&#x27;,1,&#x27;1996-5-1&#x27;,&#x27;计算机&#x27;,0,null),(&#x27;131108&#x27;,&#x27;林一帆&#x27;,1,&#x27;1995-8-5&#x27;,&#x27;计算机&#x27;,0,null),(&#x27;131109&#x27;,&#x27;张强民&#x27;,1,&#x27;1995-8-11&#x27;,&#x27;计算机&#x27;,0,null),(&#x27;131110&#x27;,&#x27;张蔚&#x27;,0,&#x27;1997-7-22&#x27;,&#x27;计算机&#x27;,0,null),(&#x27;131111&#x27;,&#x27;赵琳&#x27;,0,&#x27;1996-3-18&#x27;,&#x27;计算机&#x27;,0,null),(&#x27;131113&#x27;,&#x27;严红&#x27;,0,&#x27;1995-8-11&#x27;,&#x27;计算机&#x27;,0,null),(&#x27;131201&#x27;,&#x27;王敏&#x27;,1,&#x27;1995-6-10&#x27;,&#x27;通信工程&#x27;,1,null),(&#x27;131202&#x27;,&#x27;王林&#x27;,1,&#x27;1995-1-29&#x27;,&#x27;通信工程&#x27;,1,null),(&#x27;131203&#x27;,&#x27;王玉民&#x27;,1,&#x27;1996-3-26&#x27;,&#x27;通信工程&#x27;,1,null),(&#x27;131204&#x27;,&#x27;马琳琳&#x27;,0,&#x27;1995-2-10&#x27;,&#x27;通信工程&#x27;,1,null),(&#x27;131206&#x27;,&#x27;李计&#x27;,1,&#x27;1995-9-20&#x27;,&#x27;通信工程&#x27;,1,null),(&#x27;131210&#x27;,&#x27;李红庆&#x27;,1,&#x27;1995-5-1&#x27;,&#x27;通信工程&#x27;,1,null),(&#x27;131216&#x27;,&#x27;孙祥欣&#x27;,1,&#x27;1995-3-19&#x27;,&#x27;通信工程&#x27;,0,null),(&#x27;131218&#x27;,&#x27;孙研&#x27;,1,&#x27;1996-10-9&#x27;,&#x27;通信工程&#x27;,1,null),(&#x27;131220&#x27;,&#x27;吴薇华&#x27;,0,&#x27;1996-3-18&#x27;,&#x27;通信工程&#x27;,1,null),(&#x27;131221&#x27;,&#x27;刘燕敏&#x27;,0,&#x27;1995-11-12&#x27;,&#x27;通信工程&#x27;,1,null),(&#x27;131241&#x27;,&#x27;罗林琳&#x27;,0,&#x27;1996-1-30&#x27;,&#x27;通信工程&#x27;,0,null)INSERT INTO TBookValues(&#x27;978-7-121-23270-1&#x27;,&#x27;MySQL实用教程（第2版）&#x27;,&#x27;郑阿奇&#x27;,&#x27;电子工业出版社&#x27;,&#x27;53&#x27;,8,1,null,null),(&#x27;978-7-81124-476-2&#x27;,&#x27;S7-300/400可编程控制器原理与应用&#x27;,&#x27;崔维群 孙启法&#x27;,&#x27;北京航空航天大学出版社&#x27;,&#x27;59&#x27;,4,1,null,null),(&#x27;978-7-111-21382-6&#x27;,&#x27;Java编程思想&#x27;,&#x27;Bruce Eckel&#x27;,&#x27;机械工业出版社&#x27;,&#x27;108&#x27;,3,1,null,null),(&#x27;978-7-121-23402-6&#x27;,&#x27;SQL Server实用教程（第4版）&#x27;,&#x27;郑阿奇&#x27;,&#x27;电子工业出版社&#x27;,&#x27;59&#x27;,8,5,null,null),(&#x27;978-7-302-10853-6&#x27;,&#x27;C程序设计（第三版）&#x27;,&#x27;谭浩强&#x27;,&#x27;清华大学出版社&#x27;,&#x27;26&#x27;,10,7,null,null),(&#x27;978-7-121-20907-9&#x27;,&#x27;C#实用教程（第2版）&#x27;,&#x27;郑阿奇&#x27;,&#x27;电子工业出版社&#x27;,&#x27;49&#x27;,6,3,null,null)insert into TLend values (&#x27;1200001&#x27;,&#x27;131101&#x27;,&#x27;978-7-121-23270-1&#x27;,&#x27;2014-02-18&#x27;),(&#x27;1300001&#x27;,&#x27;131101&#x27;,&#x27;978-7-81124-476-2&#x27;,&#x27;2014-02-18&#x27;),(&#x27;1200002&#x27;,&#x27;131102&#x27;,&#x27;978-7-121-23270-1&#x27;,&#x27;2014-02-18&#x27;),(&#x27;1400030&#x27;,&#x27;131104&#x27;,&#x27;978-7-121-23402-6&#x27;,&#x27;2014-02-18&#x27;),(&#x27;1600011&#x27;,&#x27;131101&#x27;,&#x27;978-7-302-10853-6&#x27;,&#x27;2014-02-18&#x27;),(&#x27;1700062&#x27;,&#x27;131104&#x27;,&#x27;978-7-121-20907-9&#x27;,&#x27;2014-02-19&#x27;),(&#x27;1200004&#x27;,&#x27;131103&#x27;,&#x27;978-7-121-23270-1&#x27;,&#x27;2014-02-20&#x27;),(&#x27;1200003&#x27;,&#x27;131201&#x27;,&#x27;978-7-121-23270-1&#x27;,&#x27;2014-03-10&#x27;),(&#x27;1300002&#x27;,&#x27;131202&#x27;,&#x27;978-7-81124-476-2&#x27;,&#x27;2014-03-11&#x27;),(&#x27;1200005&#x27;,&#x27;131204&#x27;,&#x27;978-7-121-23270-1&#x27;,&#x27;2014-03-11&#x27;),(&#x27;1400031&#x27;,&#x27;131206&#x27;,&#x27;978-7-121-23402-6&#x27;,&#x27;2014-03-13&#x27;),(&#x27;1600013&#x27;,&#x27;131203&#x27;,&#x27;978-7-302-10853-6&#x27;,&#x27;2014-03-13&#x27;),(&#x27;1700064&#x27;,&#x27;131210&#x27;,&#x27;978-7-121-20907-9&#x27;,&#x27;2014-03-13&#x27;),(&#x27;1300003&#x27;,&#x27;131216&#x27;,&#x27;978-7-81124-476-2&#x27;,&#x27;2014-03-13&#x27;),(&#x27;1200007&#x27;,&#x27;131218&#x27;,&#x27;978-7-121-23270-1&#x27;,&#x27;2014-04-08&#x27;),(&#x27;1800001&#x27;,&#x27;131220&#x27;,&#x27;978-7-111-21382-6&#x27;,&#x27;2014-04-08&#x27;),(&#x27;1200008&#x27;,&#x27;131221&#x27;,&#x27;978-7-121-23270-1&#x27;,&#x27;2014-04-08&#x27;),(&#x27;1400032&#x27;,&#x27;131101&#x27;,&#x27;978-7-121-23402-6&#x27;,&#x27;2014-04-08&#x27;),(&#x27;1700065&#x27;,&#x27;131102&#x27;,&#x27;978-7-121-20907-9&#x27;,&#x27;2014-04-08&#x27;),(&#x27;1600014&#x27;,&#x27;131104&#x27;,&#x27;978-7-302-10853-6&#x27;,&#x27;2014-07-22&#x27;),(&#x27;1800002&#x27;,&#x27;131104&#x27;,&#x27;978-7-111-21382-6&#x27;,&#x27;2014-07-22&#x27;) 插入完成后，可以使用SELECT语句查询一下我们插入的数据是否成功： 123select * from TReaderselect * from TBookselect * from TLend PS：如果使用VS Code编辑T-SQL脚本，可以参考微软的官方文档：使用 Visual Studio Code 创建并运行 Transact SQL 脚本 建立存储过程和触发器参考资料 在Windows上使用SQL Server创建Python应用 pyodbc Github 官网文档 使用 Visual Studio Code 创建并运行 Transact SQL 脚本","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"学习笔记/Python","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/"},{"name":"数据库","slug":"学习笔记/数据库","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"SQL Server","slug":"SQL-Server","permalink":"http://sublimerui.top/tags/SQL-Server/"},{"name":"pyodbc","slug":"pyodbc","permalink":"http://sublimerui.top/tags/pyodbc/"}]},{"title":"学做图书管理系统--利用Python的PyQt5编写简单的GUI图形界面","slug":"学做图书管理系统--利用Python的PyQt5编写简单的GUI图形界面","date":"2019-10-31T00:19:06.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/3b91e5f.html","link":"","permalink":"http://sublimerui.top/archives/3b91e5f.html","excerpt":"由于学校课程的项目，最近最近在学习如何利用Python语言和SQL Server编写一个读者图书借阅、查询管理的小程序。以此为契机吧，自己便开始了学习之路~这篇文章主要介绍自己如何使用PyQt5编写GUI界面。","text":"由于学校课程的项目，最近最近在学习如何利用Python语言和SQL Server编写一个读者图书借阅、查询管理的小程序。以此为契机吧，自己便开始了学习之路~这篇文章主要介绍自己如何使用PyQt5编写GUI界面。 自己使用到的工具 VS Code PyQt5依赖包 Qt Designer Python几种常见的GUI库TkinterTkinter是Python自带的量轻级的简单GUI库，使用也较为简单。但是Tkinter之适用于基础和小型程序的开发，界面的美观程度也相对有限。 在网上找到了比较全面介绍Tkinter的使用教程： https://www.cnblogs.com/shwee/p/9427975.html https://www.runoob.com/python/python-gui-tkinter.html PyQt5PyQt5算是比较成熟的GUI库了，PyQt从著名的由C++编写的Qt库移植封装到Python而来。同时，利用PyQt5开发GUI比较美观，同时利用Qt Designer可以拖动一些控件，实现GUI可视化的快速开发，可通过pyuic5工具转化为.py文件。在这里，自己选择了PyQt5开发前端界面。 安装PyQt5和Qt Designer安装过程较为简单，只需在命令行窗口输入两行命令（在国内可以使用清华大学tuna镜像站，下载依赖包更快）： 12pip install PyQt5 -i https://pypi.tuna.tsinghua.edu.cn/simple #安装PyQt5pip install PyQt5-tools -i https://pypi.tuna.tsinghua.edu.cn/simple # 安装Qt Designer 如图： PS：若使用Anaconda，会省去很多环境配置步骤，这里只需安装PyQt5-tools即可，命令同上。如果想使用Anaconda，这里有详尽的配置及使用方法：Anaconda详细安装及使用教程（带图文） 安装成功后，Qt Designer会放在Python（或Anaconda）安装路径，即安装路径\\Python37\\Lib\\site-packages\\pyqt5-tools\\Qt\\bin或者安装路径\\Anaconda3\\Lib\\site-packages\\pyqt5-tools\\Qt\\bin中，找到designer.exe运行即可。 PS：为了今后打开方便，可以创建一个快捷方式哦~ Qt Designer界面如下： 其中： 左栏为一些常用的一些控件，可以拖放到窗口里面；右栏为不同的控件的值的设定，选中对应的控件便可以编辑。 关于Qt Designer的使用方法，可以自行找找度娘，使用方法很多啦~~这里放一个教程：PyQt5速成教程 导出为.py文件 当我们按照自己的需求，设计好了相关的界面后，便可以导入成.py文件啦~ 设计保存后，桌面上会有一个.ui文件，这个就是Qt Designer生成的XML格式的文件。 这里，我们使用pyuic5这个插件转换文件格式。转到这个文件夹目录后，在命令行窗口输入如下格式命令： 1pyuic5 - o 目标文件名.py 源文件名.ui 如我的这样做的： 此时，会发现，文件夹多了一个转换后的同名.py文件： 打开SetupUi.py文件，发现里面代码很长，但是已经自动生成了，这样少了很多敲代码的步骤呢~ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596# -*- coding: utf-8 -*-# Form implementation generated from reading ui file &#x27;SetupUi.ui&#x27;## Created by: PyQt5 UI code generator 5.13.0## WARNING! All changes made in this file will be lost!from PyQt5 import QtCore, QtGui, QtWidgetsclass Ui_mainWindow(object): def setupUi(self, mainWindow): mainWindow.setObjectName(&quot;mainWindow&quot;) mainWindow.resize(561, 491) mainWindow.setAnimated(False) self.centralwidget = QtWidgets.QWidget(mainWindow) self.centralwidget.setObjectName(&quot;centralwidget&quot;) self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget) self.verticalLayout.setObjectName(&quot;verticalLayout&quot;) self.tabWidget = QtWidgets.QTabWidget(self.centralwidget) self.tabWidget.setObjectName(&quot;tabWidget&quot;) self.tab = QtWidgets.QWidget() self.tab.setObjectName(&quot;tab&quot;) self.formLayout = QtWidgets.QFormLayout(self.tab) self.formLayout.setObjectName(&quot;formLayout&quot;) self.label1 = QtWidgets.QLabel(self.tab) self.label1.setObjectName(&quot;label1&quot;) self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.label1) self.graphicsView = QtWidgets.QGraphicsView(self.tab) brush = QtGui.QBrush(QtGui.QColor(0, 0, 0)) brush.setStyle(QtCore.Qt.NoBrush) self.graphicsView.setBackgroundBrush(brush) self.graphicsView.setObjectName(&quot;graphicsView&quot;) self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.graphicsView) self.buttonBox = QtWidgets.QDialogButtonBox(self.tab) self.buttonBox.setStatusTip(&quot;&quot;) self.buttonBox.setAccessibleName(&quot;&quot;) self.buttonBox.setOrientation(QtCore.Qt.Horizontal) self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Close|QtWidgets.QDialogButtonBox.Ok) self.buttonBox.setCenterButtons(False) self.buttonBox.setObjectName(&quot;buttonBox&quot;) self.formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.buttonBox) self.frame = QtWidgets.QFrame(self.tab) self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel) self.frame.setFrameShadow(QtWidgets.QFrame.Raised) self.frame.setObjectName(&quot;frame&quot;) self.formLayout.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.frame) self.tabWidget.addTab(self.tab, &quot;&quot;) self.tab_2 = QtWidgets.QWidget() self.tab_2.setObjectName(&quot;tab_2&quot;) self.tabWidget.addTab(self.tab_2, &quot;&quot;) self.verticalLayout.addWidget(self.tabWidget) mainWindow.setCentralWidget(self.centralwidget) self.menubar = QtWidgets.QMenuBar(mainWindow) self.menubar.setGeometry(QtCore.QRect(0, 0, 561, 23)) self.menubar.setObjectName(&quot;menubar&quot;) self.menu_options = QtWidgets.QMenu(self.menubar) self.menu_options.setObjectName(&quot;menu_options&quot;) self.menu_about = QtWidgets.QMenu(self.menubar) self.menu_about.setObjectName(&quot;menu_about&quot;) mainWindow.setMenuBar(self.menubar) self.statusbar = QtWidgets.QStatusBar(mainWindow) self.statusbar.setObjectName(&quot;statusbar&quot;) mainWindow.setStatusBar(self.statusbar) self.action = QtWidgets.QAction(mainWindow) self.action.setCheckable(False) self.action.setWhatsThis(&quot;&quot;) self.action.setShortcutContext(QtCore.Qt.WindowShortcut) self.action.setObjectName(&quot;action&quot;) self.action_2 = QtWidgets.QAction(mainWindow) self.action_2.setShortcutContext(QtCore.Qt.ApplicationShortcut) self.action_2.setMenuRole(QtWidgets.QAction.QuitRole) self.action_2.setObjectName(&quot;action_2&quot;) self.menu_options.addAction(self.action_2) self.menu_about.addAction(self.action) self.menubar.addAction(self.menu_options.menuAction()) self.menubar.addAction(self.menu_about.menuAction()) self.retranslateUi(mainWindow) self.tabWidget.setCurrentIndex(0) QtCore.QMetaObject.connectSlotsByName(mainWindow) def retranslateUi(self, mainWindow): _translate = QtCore.QCoreApplication.translate mainWindow.setWindowTitle(_translate(&quot;mainWindow&quot;, &quot;MainWindow&quot;)) self.tabWidget.setToolTip(_translate(&quot;mainWindow&quot;, &quot;&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;)) self.label1.setText(_translate(&quot;mainWindow&quot;, &quot;学生图书管理系统&quot;)) self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate(&quot;mainWindow&quot;, &quot;Tab 1&quot;)) self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate(&quot;mainWindow&quot;, &quot;Tab 2&quot;)) self.menu_options.setTitle(_translate(&quot;mainWindow&quot;, &quot;选项&quot;)) self.menu_about.setTitle(_translate(&quot;mainWindow&quot;, &quot;关于&quot;)) self.action.setText(_translate(&quot;mainWindow&quot;, &quot;关于作者&quot;)) self.action_2.setText(_translate(&quot;mainWindow&quot;, &quot;退出&quot;)) 使用VS Code编写基础程序使用VS Code打开这个文件夹，秉承界面和其他操作分离的原则，我们可以新建一个.py文件，如命名为ConnetDatabase.py，从而调用刚才生成的界面模块，新建一个MyWindow的子类，继承于QMainWindow和Ui_mainWindow父类，并初始化，编写构造函数即可。 最后，创建一个名为myWin的对象，启动即可。 1234567891011121314151617import sysfrom PyQt5.QtWidgets import QApplication, QMainWindow #导入PyQt相关模块from SetupUi import * #导入之前新生成的窗口模块class MyWindow(QMainWindow, Ui_mainWindow): def __init__(self, parent=None): super(MyWindow, self).__init__(parent) self.setupUi(self)if __name__ == &#x27;__main__&#x27;: app = QApplication(sys.argv) myWin = MyWindow() #创建对象 myWin.show() #显示窗口 sys.exit(app.exec_()) 运行后的效果如图： 至此，基本的窗口创建成功，便可以开始写后端的具体代码实现了~ 参考资料 八款常用的 Python GUI 开发框架推荐 Python制作小软件——1. 安装并使用PyQt5进行界面设计 Qt官网——Getting to Know Qt Designer Qt官网——Qt Designer Manual PyQt5快速入门（二）PyQt5信号槽机制 【第一节】PyQt5简介","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"学习笔记/Python","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/"},{"name":"图形界面","slug":"学习笔记/图形界面","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/"}],"tags":[{"name":"PyQt","slug":"PyQt","permalink":"http://sublimerui.top/tags/PyQt/"},{"name":"GUI","slug":"GUI","permalink":"http://sublimerui.top/tags/GUI/"},{"name":"Qt Designer","slug":"Qt-Designer","permalink":"http://sublimerui.top/tags/Qt-Designer/"}]},{"title":"国内外常用VPS + 域名注册 + CDN，搭建属于自己的博客（新手推荐）","slug":"国内外常用VPS + 域名注册 + CDN，搭建属于自己的博客（新手推荐）","date":"2019-10-09T16:35:32.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/d874e9c.html","link":"","permalink":"http://sublimerui.top/archives/d874e9c.html","excerpt":"本文大概概括总结了自己学习前端技术以来各种实用的VPS、域名注册以及实用的CDN提供商。特别是对于新手来说，了解一些相关知识挺不容易的。写一些总结希望会对大家有一定的帮助吧。本文章会不定时更新，分享更多的实用选择喔~ 喜欢的话就继续往下看看吧(/ω＼)","text":"本文大概概括总结了自己学习前端技术以来各种实用的VPS、域名注册以及实用的CDN提供商。特别是对于新手来说，了解一些相关知识挺不容易的。写一些总结希望会对大家有一定的帮助吧。本文章会不定时更新，分享更多的实用选择喔~ 喜欢的话就继续往下看看吧(/ω＼) 建站VPS（虚拟专用服务器）对于一个网站来说，首先需要的便是一台服务器（VPS）。可以有国内和境外两个选择。 国内对于国内用户来说，常见VPS有如下几家提供商： 阿里云：算是国内最为知名的服务器提供商了，安全且稳定。 腾讯云：第二大云服务提供商，微信小程序使用较为普遍。 华为云：使用也比较普遍。 UCLOUD 几家服务商提供的VPS价格均相差不远，其中，阿里云和腾讯云对于在校大学生有优惠活动： 阿里云：“云翼计划”，点击这里进入优惠网址。 阿里云优惠需要通过学生认证，注册账号后，在后台账号管理界面可以申请认证： 认证后，对于学生机的量轻服务器和ECS仅9.5 RMB/月！！！！！ 腾讯云：名称也类似，“云+校园”，优惠网址入口点击这里。 腾讯云25岁以下或者通过学生认证直接优惠，不仅可以购买优惠价的云服务器，还可以购买优惠价的MySQL数据库： 腾讯云也相当的很便宜，仅仅10 RMB/月！！！ 境外对于境外的可选择的提供商就比较多了。如亚马逊的AWS，微软的Azure，谷歌的Google Cloud，IBM公司的Cloud等等…但是国外的VPS换算为RMB后普遍偏贵，博主实在买不起呜呜呜(T＿T) 这里，博主只能选择境外廉价的VPS提供商了。如VirMarch、Vultr、linode和搬瓦工Bandwagon。 对于此类廉价VPS，官方常常有一些优惠减价活动，可以国内相关的中文社区看看： VirMach中文网 Vultr中文网 搬瓦工VPS中文网1 PS：由于这类VPS廉价，最低只需2-4美元/月，因此，其提供的相关服务支持有限，有些服务器访问速度较慢（但这并不是问题，可以配合Cloudflare的CDN加速使用），最好不要用于重要用途。主要推荐国内的阿里云和腾讯云。 PS：这里不介绍如何购买VPS，自己可以找找度娘，网上有很多教程~ 域名有了VPS之后，便需要注册一个域名来来指向自己的VPS，使得大家都方便访问。 域名注册商对于域名注册商来说，也有挺多的选择，国内可以选择： 万网（被阿里云收购） 新网（与腾讯云有合作关系） 易名 … PS：对于国内的域名注册来说，其域名后缀类型有限（.com，.cn，.net，.top，.xyz等常见域名），如果域名需要备案，其支持的格式也相当有限制了，只有部分少量域名类型才能备案。 如果对其他类型的域名，如.me，.io, .cc，.design或者其他顶级国家域名的时候，就需要找找国外老牌的注册商了，如： Namecheap Godaddy NameSilo Name.com … NameBeta.com国外的域名注册商十分繁多，网站地址也很难记忆，不同注册商价格不一，英文界面对于国人来说不太友好。因此，这里推荐一个域名统一搜索平台——**NameBeta.com** 此平台是国内知名博客程序Typecho创始人joyqi又一个作品~ NameBeta.com汇集了国内外大量知名注册商的数据，并列出各个域名和注册商的最近优惠，我们只需要在搜索框输入自己想注册的域名后，便会自动得出注册最为划算的域名提供商，点击后会自动跳转到对应注册商的付款页面！！！！，相当方便有木有！！！！ 此外，对于Chrome浏览器来说，还支持安装插件！！！在页面最下方可进入安装： 这样，可以不用每次进入网站直接在浏览器插件寻找自己心仪的域名啦！ 例如：我的博客域名sublimerui.top和cwxyr.me便是通过NameBeta.com检索后，分别在万网和Godaddy注册的。 最后，在此感谢joyqi大佬~ PS：域名的注册方法也可以自行找找度娘滴~ CDN加速对于个人博客来说，使用CDN可以说是一个非常常见的配备了。CDN（内容分发网络）是一种用来减轻服务器压力的常见方法，利用附近节点就近推送下载文件的原则，可以缩短网页访问速度。 国内CDN可以分为多种： 用于储存图片的CDN（图床，自己经常使用）：sm.ms，img.vim-cn.com等等… 用于储存大型文件的OSS加CDN：七牛云，又拍云（提供免费OSS储存空间），阿里云，腾讯云（OSS与CDN均需要花钱）等等… 其中，又拍云推出的开发者帮助计划 又拍云联盟**，可以在线申请10GB免费储存空间和15GB免费CDN流量**，有兴趣的朋友可以去看看呀~ 境外对于个人博客来说，境外的服务器确实也不便宜，但唯一的优点便是不用对域名进行备案，直接在域名解析处使用A记录将域名指向境外的服务器的IP即可。这类极力推荐挂一个CDN，不然会慢死（由于中国的GFW存在，会对一些内容进行过滤和封锁，这也是为什么有科学上网的说法） 这里，可以使用Cloudflare进行网站的加速，国人很多都是用Cloudflare加速境外的服务器的访问。（真的挺好用的！） 这里放几篇自己认为比较好用的Cloudflare使用教程，讲得比较详细： 十个你可能不知道的CloudFlare免费CDN加速技巧-SSL\\DDOS\\Cache 使用CloudFlare加速和保护你的境外网站 Cloudflare 免费SSL证书使用 CloudFlare CDN折腾记－优化设置 未完待续，关于这方面的总结有新的内容会持续更新滴~ 很久都没更新文章了(╥╯^╰╥)鸽了一个月了吧…最近确实有点小忙，呜呜呜… 感谢你的耐心阅读呀(๑◡๑)，总结不易，加个收藏点点赞呗~ 你的支持就是我前进的动力呀~","categories":[{"name":"网站搭建","slug":"网站搭建","permalink":"http://sublimerui.top/categories/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"VPS","slug":"VPS","permalink":"http://sublimerui.top/tags/VPS/"},{"name":"域名","slug":"域名","permalink":"http://sublimerui.top/tags/%E5%9F%9F%E5%90%8D/"},{"name":"CDN","slug":"CDN","permalink":"http://sublimerui.top/tags/CDN/"}]},{"title":"[转]计算机四级网络工程师思维导图--计算机网络部分","slug":"转-计算机四级网络工程师思维导图-计算机网络部分","date":"2019-09-07T16:53:56.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/5be6111c.html","link":"","permalink":"http://sublimerui.top/archives/5be6111c.html","excerpt":"计算机四级网络工程师考试快开始了。这里总结和整理了相关的常考重点的思维导图，挺实用的，希望对大家有用哦~ 此部分为计算机网络部分~","text":"计算机四级网络工程师考试快开始了。这里总结和整理了相关的常考重点的思维导图，挺实用的，希望对大家有用哦~ 此部分为计算机网络部分~ PS: 思维导图来自微信公众号“方大熊”，自己做了稍微的整理，希望大家喜欢呀~ 图片高清，但文字较小也很长，可以点击图片后放大学习哦~ 一、网络技术基础 二、局域网基础 三、Internet基础 感谢你的耐心阅读呀(๑◡๑)，总结不易，收藏点个赞呗~ 你的支持就是我前进的动力呀~","categories":[{"name":"知识总结","slug":"知识总结","permalink":"http://sublimerui.top/categories/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"},{"name":"计算机考试","slug":"知识总结/计算机考试","permalink":"http://sublimerui.top/categories/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E8%AF%95/"}],"tags":[{"name":"计算机四级","slug":"计算机四级","permalink":"http://sublimerui.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%9B%E7%BA%A7/"},{"name":"思维导图","slug":"思维导图","permalink":"http://sublimerui.top/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"}]},{"title":"[转]计算机四级网络工程师思维导图--操作系统部分","slug":"转-计算机四级网络工程师思维导图-操作系统部分","date":"2019-09-07T16:52:46.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/55ffe23a.html","link":"","permalink":"http://sublimerui.top/archives/55ffe23a.html","excerpt":"计算机四级网络工程师考试快开始了。这里总结和整理了相关的常考重点的思维导图，挺实用的，希望对大家有用哦~ 此部分为操作系统部分~","text":"计算机四级网络工程师考试快开始了。这里总结和整理了相关的常考重点的思维导图，挺实用的，希望对大家有用哦~ 此部分为操作系统部分~ PS: 思维导图来自微信公众号“方大熊”，自己做了稍微的整理，希望大家喜欢呀~ 图片高清，但文字较小也很长，可以点击图片后放大学习哦~ 一、操作系统原理 二、操作系统运行机制 三、进程线程模型 四、并发与同步 五、内存管理 六、文件管理 七、I/O设备管理 八、死锁 感谢你的耐心阅读呀(๑◡๑)，总结不易，收藏点个赞呗~ 你的支持就是我前进的动力呀~","categories":[{"name":"知识总结","slug":"知识总结","permalink":"http://sublimerui.top/categories/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"},{"name":"计算机考试","slug":"知识总结/计算机考试","permalink":"http://sublimerui.top/categories/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E8%AF%95/"}],"tags":[{"name":"计算机四级","slug":"计算机四级","permalink":"http://sublimerui.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%9B%E7%BA%A7/"},{"name":"思维导图","slug":"思维导图","permalink":"http://sublimerui.top/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"}]},{"title":"[转]计算机四级网络工程师思维导图--常考重点","slug":"转-计算机四级网络工程师思维导图--常考重点","date":"2019-09-07T16:10:00.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/767f2af2.html","link":"","permalink":"http://sublimerui.top/archives/767f2af2.html","excerpt":"计算机四级网络工程师考试快开始了。这里总结和整理了相关的常考重点的思维导图，挺实用的，希望对大家有用哦~ 此部分为整体归纳出来的常考重点~","text":"计算机四级网络工程师考试快开始了。这里总结和整理了相关的常考重点的思维导图，挺实用的，希望对大家有用哦~ 此部分为整体归纳出来的常考重点~ PS: 思维导图来自微信公众号“方大熊”，自己做了稍微的整理，希望大家喜欢呀~ 图片高清，但文字较小也很长，可以点击图片后放大学习哦~ 一、操作系统 二、计算机网络 感谢你的耐心阅读呀(๑◡๑)，总结不易，收藏点个赞呗~ 你的支持就是我前进的动力呀~","categories":[{"name":"知识总结","slug":"知识总结","permalink":"http://sublimerui.top/categories/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"},{"name":"计算机考试","slug":"知识总结/计算机考试","permalink":"http://sublimerui.top/categories/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E8%AF%95/"}],"tags":[{"name":"计算机四级","slug":"计算机四级","permalink":"http://sublimerui.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%9B%E7%BA%A7/"},{"name":"思维导图","slug":"思维导图","permalink":"http://sublimerui.top/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"}]},{"title":"计算机四级网络工程师知识点（非常全面！）","slug":"计算机四级网络工程师知识点（非常全面！）","date":"2019-09-06T00:25:04.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/e78192a8.html","link":"","permalink":"http://sublimerui.top/archives/e78192a8.html","excerpt":"马上计算机考试了呢。相关的四级网络工程师的知识点也很重要呀~自己从网上下载并花时间整理了相关的资料，下面内容是经过总结而成~请放心食用！ PS:以下内容为长文档，内容很多，建议配合文章目录学习哦","text":"马上计算机考试了呢。相关的四级网络工程师的知识点也很重要呀~自己从网上下载并花时间整理了相关的资料，下面内容是经过总结而成~请放心食用！ PS:以下内容为长文档，内容很多，建议配合文章目录学习哦 操作系统原理一、操作系统概述1.操作系统（1）概念 是计算机系统的一个系统软件，能有效地组织和管理计算机系统中的硬件和软件资源，合理（公平对待不同用户程序，不发生“死锁”和“饥饿”）组织计算机工作流程，控制程序的执行，并向用户提供各种服务功能，使用户能灵活、方便、有效地使用计算机，并使整个计算机系统高效运行；位于硬件之上，支撑软件（软件的编制和维护）之下。 A.应用角度看主要作用：提供人机交互接口（提供给用户的接口是命令输入和系统调用）；B.软件开发角度看作用：软件开发的基础平台；C.安全保护角度看作用：第一道安全防线；D.系统发展角度看作用：虚拟机和扩展机 （2）特性 A.并发性：执行期间具有相互制约关系；程序与计算不再一一对应；结果不再现并发过程失去封闭性；B.共享性：CPU、内外存储器、外部设备；C.随机性（异步性）：何时退出？假死？中断？关机？重启？ （3）功能 A.进程管理：对CPU进行管理。包括进程控制（创建、撤销结束进程以及控制运行时候的各种状态转换）、进程同步（处理进程之间同步或互斥关系）、进程间通信（信息交换）和进程调度（按照一定算法从就绪队列中挑选一个进程让CPU执行它）；B.存储管理：管理计算机内存资源。包括回收与分配内存、存储保护（考虑程序可能发生越界的情况）和内存扩充（借助虚拟技术在逻辑上增加进程运行空间）；C.文件管理：文件存储空间的管理（管理/创建/删除/命名文件）；文件目录管理；文件系统的安全性（读写和存取权限）D.设备管理：除CPU和内存之外的所有输入输入设备，复杂外部设备分配和故障处理。技术包括：中断技术、通道技术、虚拟设备技术和缓冲技术。E.用户接区（作业管理）： （4）常见的操作系统 Ubuntu、Windows、Unix、DOS、BSD 2.操作系统分类按页面使用环境和功能特征 （1）批处理系统：分单道批处理系统和多道批处理系统，其中多道批处理效率和吞吐量较高但缺少人机交互性；指令有特权指令和一般指令；（2）分时系统：多用户共同、交互使用系统；独占性（用户感觉）；及时性（3）实时系统：多路性，及时性，交互性，可靠性，有过载防护能力 按计算机体系结构分类 （1）个人操作系统（2）网络操作系统：主从关系明显；有限制共享资源；（3）分布式操作系统：统一配置，所有主机使用一个操作系统；资源共享；相互通信；（4）嵌入式操作系统：成本低交互式系统是指用户交互式地向系统提出命令请求，系统接受每个用户的命令，采用时间片轮转方式处理服务，并通过交互方式在终端上向用户显示结果。多级反馈、时间片轮转和高优先级适用于交互式操作系统。 3.操作系统结构（1）整体式结构：功能划分成多模块；（2）层次式结构：单向调用，同层不调用；（3）微内核结构（C/S结构）：将大多数的操作系统由用户进程实现；分割成多个部分，每一部分只处理一方面的功能，如文件服务、进程服务与服务器通信；特点：高可靠性、高灵活性、适合分布式处理、可移植性强、融入面向对象技术，但效率低，不适合频繁通信；微内核具备：线程调度、虚拟存储、消息传递、设备驱动、内核原语操作以及中断处理。 4.指令（1）特权指令：包括输出指令、停机指令等，只有在监控程序才能执行特权指令，只能在内核状态（管态）下运行（屏蔽中断、关闭中断）；（2）一般指令：用户态下运行（关机、读文件、设置时间），管态下也可以执行。如果用户程序在用户态（目态）执行特权指令，则引起访管中断，这也是CPU由用户态向核心态转换的方法。 5.临界资源、可重写入代码和不可重用资源（1）临界资源：（2）可重写入代码：硬盘，内存；（3）不可重用资源：时间片到时、硬件时钟到时 6.三类接口可供用户使用（1）命令接口：提供一组命令供用户间接/直接操作；（2）程序调用：一组系统调用命令组成，是操作系统提供给编程人员唯一接口，调用命令供用户程序使用；（用户编程需要打印输出，提供指令：write()）（3）图像界面接口：图标、菜单、窗口，形成一个直观易懂，使用方便的计算机操作环境，终端窗口采用命令行。 7.设备分配算法中，数据结构主要包含四个表分配顺序是系统设备表（SDT）、设备控制表（DCT）、控制器控制表（COCT）、通道控制表（CHCT）。 8.程序状态字（PSW，专门的寄存器指示处理器状态）（1）包含：CPU工作状态码（指明管/目态）；条件码（指令结果）；终端屏蔽码（是否允许中断）；（2）状态标志：CF（有进位）、ZF（为零）、SF（符号）、OF（溢出）、TF（陷阱）、IF（中断屏蔽）、VIF（虚拟中断）、VIP（虚拟自断待决）、IOPL（IO特权级别） 二、操作系统运行机制1.CPU中的存储器（1）用户可见寄存器：主要用于各种算术逻辑指令和访问指令（数据寄存器、地址寄存器、条件码寄存器）（2）控制和状态寄存器：用于控制处理器的操作（程序计数器PC、指令寄存器IR、程序状态寄存器PSW） 2.中断与异常的分类（1）中断：（外部事件引起的）时钟中断；输入输出中断（键盘输入）；控制台中断；硬件故障中断；网卡上数据区满（数据传输完成）；（堆栈溢出）；（被0除）（2）异常：（内部事件引起的）程序性中断（执行指令产生的结果）；访管指令中断（被清零）； 3.系统调用（1）概念：运行在用户态（CPU在用户程序中执行）被调用程序在系统态（CPU在系统程序中执行）；系统调用可嵌套使用，即一个被调用过程执行期间还可以调用另一个，一般可多次调用但不能无限制调用；（2）分类：进程控制类（创建/终止进程）、文件操作（打开）、进程通信类、设备管理类（请求/释放设备）、信息维护类（时间日期）；（3）参数传递：由陷入指令自带参数（只能携带几个）；通过寄存器传递参数（内存开辟专门的堆栈传递参数）；（4）一般调用在，被调用过程执行结束后，会直接返回调用程序；系统调用在结束调用，首先会对所要求的进程进行优先级分析，若调用进程不具备高优先级则会产生重新调度； 三、进程线程模型1.多道程序环境特点独立性；随机性（输入输出都是随机的）；资源共享（导致执行速度制约）。 2.进程（1）概念：计算机程序（指令、数据组成）关于数据集合上的一次运行活动，是资源分配的基本单位；（2）特点：并行性；独立性（独立资源分配单元）；异步性（不可预知速度的向前推行）；动态性；交往性。（3）组成：PCB、指令和数据三部分组成；（4）进程控制块（PCB）A.组成：进程名、进程号、存储信息、进程标识符、进程优先级、进程当前状态、资源清单、消息队列指针、进程队列指针、打开当前文件等调度信息和PSW、时钟、界地址寄存器等现场信息；B.组织方式：线性方式、索引方式、链接方式、队列方式（就绪队列、等待队列、运行队列）；C.特征：是进程的灵魂；必须常驻内存；PCB的运行状态只可以通过操作系统读取。（5）进程控制：通过原语实现对进程在整个生命周期中各种状态间的转换；用于进程控制的原语一般有创建进程、撤销进程、挂起进程、激活进程、阻塞进程、唤醒进程以及改变进程优先级等。（6）创建进程：A.步骤：申请空白PCB；为新进程分配资源；初始化PCB；将新进程插入就绪队列末尾。B.创建进程的时机：用户登录；系统初始化；用户系统调用；初始化批处理作业。 3.进程状态及转换（1）三状态模型：运行状态、就绪状态、等待状态（阻塞状态）。其中运行状态转换到就绪状态有3种可能性：时间片用完；进程创建完成；被调度程序强占CPU（对于非强制式是：“一个进程运行结束”）；运行状态转换阻塞状态：请求系统服务、启动某种操作、新数据尚未到达、无新工作可做。（2）五状态模型：运行、就绪、阻塞、创建、结束。Linux上进程有五种状态：运行、中断、不可中断、僵尸状态、停止状态。（3）七状态模型；运行、就绪、阻塞、创建、结束、激活（外-&gt;内）、挂起（内-&gt;外）。 4.线程（1）概念：进程中的实体，不能独立于进程存在；是CPU调度和分派的基本单位；不同的线程可以执行相同的程序；同一进程中各线程共享内存空间；自己不拥有系统资源，只拥有一点运行中必不可少的资源；每个线程有一个标识符和一张线程描述表，记录了线程执行的寄存器和用户栈等现场；（2）特点：花费开销少、切换花费时间少、内部通信快、能独立工作；（3）线程操作含义： pthread_join：等待一个特定的线程退出； pthread_yield：线程让出CPU（主动释放）； pthread_creat：创建线程库函数； pthread_exit：结束一个线程的库函数 5.CPU调度分类高级调度（创建进程）、中级调度（调入内存）、低级调度（分配CPU）。 6.调度（1）功能：记录系统中所有进程执行状态；从就绪队列中选出一个CPU分配给它；选中PCB有关现场信息（PSW、通用寄存器等）送往CPU的寄存器中，让他占用执行。（2）时机：CPU资源让出来不一定调度，CPU资源占用一定不调度；可强占方式（当优先级高的进程运行存在时，立即进行调度，转让CPU资源）与不可强占方式（进程执行完毕才释放CPU）。（3）调度算法：先来先服务FCFS（不可强占）；最短时间作业算法SJF；轮转法RR；最高响应比优先算法HRRF（介于FCFS与SJF之间的折中算法，即考虑等待时间又不使长作业等待时间过长）；多级反馈队列。操作系统不能在运行中动态改变进程调度算法。 四、存储管理方案1.进程互斥的解决办法竞争各方平等协商；引入进程管理者 2.计算机中资源共享的程序可分为三个层次（1）互斥；利用硬件解决的互斥方法简单、支持多个临界区、适用范围广；不能实现“让权等待”；（2）死锁：（3）饥饿： 3.临界资源分成四个部分（1）进入区：（P原语）；while TS(&amp;lock)（2）临界区：访问临界资源的一段代码；n=fetch(balance)（3）退出区：（V原语）lock=FLASE（4）剩余区：代码其余的部分output(list) 4.进程同步机制应遵循的准则空闲则入、忙则等待、有限等待、让权等待。 5.信号量（1）只能通过初始化和两个标准的原语来访问；（2）初始化可指定一个非负整数值，表示空闲资源总数；若为负值，其绝对值表示当前等待临界区的进程数；P(empty) V(full)（3）同步：信息量empty，初始值K；信号量full，初始值0 互斥：信号量mutex，初始值为1.（占用为1空闲为0）（4）系统直接通信时，发送原语：send(receiver,message) 6.管程（1）定义了一个数据结构和能为并发进程所执行的一组操作。进程可在任何需要的时候调用管程中的过程，但它们不能在管程之外什么的过程中直接访问管程数据结构；管程能保障共享资源互斥执行；是一种同步机制；将共享变量及对共享变量的操作封装在一起（2）任一时刻中，管程中只有一个活跃进程；所有临界区转换成管程，则只许一个进程使用临界区内代码。管程本身无法保证互斥；（3）管程对象：共享的数据结构和一组操作过程。（4）为解决进程同步关系，引入条件变量，在条件变量上实施P、V操作； 7.进程间的通信（1）共享内存：用于多个进程并发执行且相互通信，适合传输大量信息；设置一个公共内存区，一组向其中写，一组从公共内存读；不需要在系统中产生多份相同的拷贝。（2）消息机制：利用内存中若干缓存区组织成队列，依赖进程或基础框架来调用实际执行的代码；缓冲区中包括：消息缓冲区、消息指针、互斥信息量、同步信息量、发送和接收原语。（3）管道通信：通过两个进程，打开一个共享文件，实现进程间的通信；字符流形式联系，不足是通信速度较慢。（4）信箱通信：发送进程首先创建一个链接两个进程的通信机制，然后把向信息送入该机制；发送进程和接受进程不直接联系，接收进程可以在任何时刻从该机制中取出信息。 8.PV操作PV操作可以实现两个进程互斥、进程同步和进程前趋关系；PV同步机制缺点：可读性差、不利于修改和维护、正确性差；P操作一次减一，V操作一次加一。 9.可以实现进程互斥的算法Peterson算法、TS指令、Swap或Exchange命令、信号量； 10.进程之间的关系有 相互感知 交互关系 一个进程对其他进程的影响 潜在控制问题 相互不感知 竞争 两进程的结果无影响 互斥、死锁、饥饿 直接感知 通信协作 一个进程依赖其他进程 死锁、饥饿 间接感知 共享协作 一个进程依赖其他进程 互斥、死锁、饥饿 11.地址重定位将逻辑地址转换成绝对地址；动态重定位（每条指令执行时；需要软件硬件相互配合实现，其中硬件包括基址寄存器和一个地址转换线路组成）和静态重定位（程序执行前已转换好地址）。 12.内存管理（1）单一用户管理：一个时间内，一个用户进程独占内存；（2）分区管理：固定分区；可变分区（空闲分区策略：最先适应算法、最优适应算法、最坏适应算法、下次适应算法）；可以满足多道程序设计且设计上最简单；内存使用不充分、较为严重碎片、不能提供虚拟内存、受物理内存不足限制。利用移动技术，可以实现碎片整合；利用交换技术，在磁盘上保存内存放不下的进程（代码、PCB和数据），需要时再装入内存中，是由操作系统控制。（3）页式管理：把一个逻辑地址连续分散存放到几个不连续的内存区域。不要求作业或进程的程序段和数据在内存中连续存放，从而有效解决“碎片”多的问题；动态页式管理提供了内存和外存统一管理的虚存实现方式，提高了存储空间利用率；页面大小可以改变但用户不可以动态改变页面大小。通常管理空闲物理内存的方法有：空闲块链表法、位示图、空闲页面表。A.空闲块的分配和回收：采用主存分配表、位示图和页表方式；页表中，存储块号与页号一一对应，一级页表共需访问内存2次完成数据提取；二级页表每执行一条指令至少需要访问3次内存；B.快表（TLB）存放在高速缓存（介于主存和CPU之间的存储器，高速缓存器与内存之间信息调度和传送是通过硬件完成的）中；页式虚拟存储管理，部分页在内存中，其余在外存中（磁盘文件区），需要用到：请求调用页和预调页策略。C.置换策略有：固定分配局部置换、可变分配全局置换、可变分配局部置换；（固定/可变指：块数是否可变；局部/全局：指作业以内或外）D.页面置换算法：FIFO：会出现Belady现象，随着分配给进程的物理页面增加，缺页率增加；LRU：最近最久未使用算法，需要记录访问位；LFU：最近最不经常使用算法，当前时间访问次数最少，需要访问计数器；NRU：最近未使用页面置换算法，需要记录访问位；CLOCK：时钟算法，需要记录访问位；理想页面置换算法（4）段氏管理：存储以段划分；（5）段页式管理：先分段、再分页、每页对应块、可连续可不连续存储。其中，页式、段氏式和段页式管理可以与虚拟存储技术结合使用。 13.链接提高检索速度、节省存储空间的软链接，把所有编译后得到的目标模块连接装配起来，再与函数库想连接成一个整体的过程。 14.虚拟页面存储管理（1）存在问题：页面抖动、Belady现象、缺页中断、页面写错误。（2）解决办法：采用工作集算法可以缓解页面抖动（操作系统为每一个进程保持一个工作集，工作集随时间而变化，每个进程提供与工作集大小相等的物理界面）（3）需要的硬件支持：足够大内外存；虚拟地址到物理地址映射机制；缺页中断处理机制。 15.碎片（1）内碎片：分配出内存，没有得到利用。固定分区、页式、段页式（2）外碎片：内存空间无法满足分配要求。可变分区、虚拟段式。16.进程中断，选中一个页面进行淘汰时，只需将页面移除，修改页面有效位，其余标志位不变；当创建一个新进程，装入一个页面，对应页表项中的：内存号、驻留位、访问位需要修改；当页面被修改时，需要修改的位：访问位、修改位；将页面调入内存，需要修改位：内存号、驻留位、访问位。 17.虚拟存储器（1）在虚拟存储系统中，进程的部分程序装入后便可运行；（2）虚拟存储技术允许用户使用比物理内存更大的存储空间；（3）虚拟内存必须有硬件支持。 18程序的局部性分空间局部性和时间局部性，空间局部性是指一旦程序访问了某个存储单元，其附近的存储单元也将被访问，程序代码执行具有顺序性。时间局部性指程序在执行时呈现出局部性规律，即在一段时间内，整个程序的执行仅限于程序中的某一部分。 五、文件系统设计与实现技术1.文件分类（1）按用途分：系统文件、用户文件、库函数文件；（2）按组织形式：普通文件、目录文件、特殊文件（Unix中I/O设备被视为特殊文件）；（3）保护方式：只读文件、读写文件、可执行文件、无保护文件；（4）存放实限分类：临时文件、永久文件、档案文件；（5）组织结构：逻辑文件（用户可见；无结构的字符流式文件、定长记录文件和不定长记录文件构成的记录树）、物理文件（存放在磁盘上：顺序文件、链式文件、索引文件） 2.文件物理结构即文件存储的结构；顺序结构、链接结构、索引结构； 存储介质 磁带 磁盘 物理结构 连续结构 连续 链接 索引（多级索引） 存取结构 顺序 顺序 顺序 顺序 随机 &amp;nbsp &amp;nbsp &amp;nbsp &amp;nbsp &amp;nbsp随机 3.磁盘（1）寻访时间：寻道时间（最长）、延迟时间、传输时间（最短）；（2）磁盘调度：FCFS、SSTF（最短寻道时间，容易引起饥饿现象）、SCAN（电梯算法，来回服务）、C-SCAN（循环扫描，单向） 4.文件目录实现按名存取，包含文件名和文件的起始地址，用以建立文件名（&lt;255字符）与存储地址的对应关系；必须信息：FCB、文件结构信息和文件管理信息。（1）FCB包含：文件名、文件号、用户名、文件物理地址、文件长度、口令、修改/访问/建立时间；（2）管理形式分：一级目录、二级目录、树型目录（搜索快；层次清楚；解决不用用户文件重命名问题；用户不可以创建根目录）（3）路径名搜索：全路径名和相对路径（加快搜索速度）； 5.存储空间的分配与回收（文件存储空间的管理方法）位示图、空闲块表、空闲链表、成组链接表（UNIX）。 6.文件系统（1）优化：块高速缓存；合理分配磁盘时间；磁盘驱动调度；目录项分解；（2）FAT：是文件分配表；链接结构；FAT16表示16位簇号，支持8个字符文件名；（3）安全：建立副本、定时转存、规定文件的存取权限。（4）文件存储空间：分配单位数据块；（5）从用户角度：建立文件系统的目标是实现“按名存取”； &amp;nbsp &amp;nbsp &amp;nbsp &amp;nbsp &amp;nbsp从系统角度：看文件系统主要关注文件存储位置； 7.打开文件时，系统要完成的（1）根据文件名查找目录，找到FCB；（打开文件第一步，继续open()操作，将FCB写入内存）（2）根据打开方式，共享说明和用户身份检查，访问合格性；（3）根据文件号，打开文件表，看文件是否被打开；（4）在用户打开文件中取一空表项，填写打开方式等，并指向系统打开文件表对应的表项； 8.物理结构是文件的逻辑块到磁盘号的转换； 9.外存储存取过程读状态–&gt;置数据-&gt;置地址-&gt;置控制-&gt;读状态 10.创建文件操作过程检查文件名是否合法；同目录下是否重名；目录中是否有空闲位置；填写目录项内容（文件名、用户名、存取权限、长度置零、首地址）； 11.文件描述符内核利用文件描述符来访问文件。文件描述符是非负整数，打开现存文件或新建文件时，内核会返回一个文件描述符，读写文件也需要使用文件描述符来指定待读写的文件。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。 2.对文件的操作（1）关闭文件操作：系统根据用户提供的文件名/文件标识符查找FCB；在该FCB的相关内容做修改；置FCB为“非活跃”；写回磁盘。（2）删除文件操作：查找文件；检查删除合法性；收回FCB资源；收回文件存储空间。（3）访问文件：首次访问时通常访问文件路径名，之后对文件访问通常使用文件描述符。 六、I/O设备管理1.设备分类（1）按共享属性：独占设备、共享设备（磁盘）、虚拟设备；（2）按信息组织方式分类：块设备（磁盘/磁带，一般512B-4KB）；字符设备（键盘、显示器、打印机）； 2.I/O硬件CPU和主存（中央部分）；接口；外围设备控制器（内有寄存器）；外围设备 3.I/O设备数据传输控制方式（1）程序直接控制方式：“忙-等待”（2）中断控制方式：实现了主机和外围设备的并行工作；CPU是不是会跑去看数据是否可以输入输出；适用于键盘以字符为单位读取方式；关键硬件中断控制器、地址总线和数据总线、设备控制器；（3）DMA：对输入/输出设备由DMA完成，在DMA控制器的作用下，设备和主存之间可以批量进行数据交换，而不用CPU干预；“窃取”总线控制权；适用于对块设备的存取；DMA控制器、地址总线和数据总线；（4）通道控制方式：工作在内存中；实现外围设备的统一管理和外围设备与内存之间的数据传输；所需CPU干预更少；可以实现CPU、通道和输入输出设备三者之间的并行操作；适用于现代计算机内的大量数据交换；主要限于与I/O操作有关的指令和程序；通道控制器、地址总线、数据总线、设备控制器和通道程序代码；分数据选择通道、字节多路通道和数组多路通道。 4.I/O软件分层中断处理程序（设备硬件）；设备驱动程序；与设备无关的系统软件（设备独立层）；用户控件的I/O软件（用户层） 5.设备无关层实现功能（提供一致的系统调用）（1）统一命名：实现逻辑设备命名与物理设备的转换；（2）设备保护；（3）缓冲：对不同速度的设备使用缓冲区来匹配；（4）提供与设备无关的逻辑块；（5）独占设备的分配和释放；（6）出错处理：向用户报告出错处理情况；（7）存储设备的块分配。 6.I/O设备管理（1）设备表：建立逻辑设备与物理设备之间的对应关系；（2）设备管理任务：缓冲区管理、设备分配（需要考虑：设备固有属性；设备分配算法；设备分配安全性；设备独立性）、设备处理、虚拟设备以及实现设备独立。（3）引入技术：缓冲技术、设备分配技术、SPLOOING技术、DMA技术、通道技术。（4）缓冲池管理：实现进程访问缓冲区同步。 7.SPOOLING组成输入井和输出井、输入进程和输出进程、输入缓冲区和输出缓存区。 七、死锁1.死锁在对资源的管理、分配和使用不当，会产生死锁现象；（1）产生原因：竞争资源；进程推进顺序不合理。（没有“调度不合理”的原因）（2）产生必要条件：互斥条件（资源互斥使用）；不可剥夺条件（已分配资源不可剥夺）；请求和保持条件（申请占有一部分资源，继续占用已分配的资源，部分分配资源）；循环等待条件（前一个进程拥有后一个进程所请求的资源，资源申请形成环路）；（3）进入阻塞状态，无法被唤醒。 2.饥饿当等待时间进程推迟和响应带来明显影响时； 3.活锁“忙等待式”，没有阻塞，可被调动，但无进展（不主动放弃CPU）；饥饿：“阻塞状态”，没有阻塞，但被无限推后，（主动放弃CPU）； 4.解决死锁方法（1）预防死锁：“资源有序分配法”；SPOOLing系统的建立；一次分配所有资源；剥夺其他进程的资源。（静态分配，分配时加锁）（2）避免死锁：银行家算法；（3）死锁检测：定时运行资源分析程序；（4）剥夺资源法、撤销进程法和重启。 5.几种死锁类型（1）同类资源死锁：“P1申请一页内存，P2申请一页资源…….”；（2）不同类资源死锁：“P1拥有设备A请求设备B，P2拥有设备B请求A”；（3）PV操作互斥死锁：“P1、P2先进行同步信号量P操作，再进行互斥信号量P操作”；（4）临时资源死锁：“P1等待P2发来信件Q后向P2发送信件R，P2等待P1发来信件R后向P1发送信件Q”。 计算机网络一、网络技术基础1.网络分类（1）宽带城域网（MAN）：双环光纤传输；FDDI；（2）无线局域网（WLAN）；（3）无线自组网（Ad hoc）（自组织；对等；无线网络）；（4）无线传感网（WSN）：Ad hoc与传感器技术结合；（5）无线网状网（WMN）：用于扩大范围；对Wimax和WLAN的补充 2.操作系统（1）Unix操作系统：小型机、C语言（第一版本由汇编语言编译）、部分开源；集中式、多用户，多任务，分时操作系统；贝尔公司开发；IBM—AIX SUN公司—Solaris HP—HP-UN（2）Linux操作系统：继承了Unix以网络为核心的设计，核心部分：内核；开源操作系统；版本很多；由不同组织管理维护；不是Unix操作系统的变种。Red Hat（3）Windows NT是微软公司开发的闭源系统；采用32位操作系统，可以提供全面的网络服务功能；基于不对等结构，分Windows NT Sever和Windows NT Workstation。 3.拓扑结构（1）环型拓扑：传输延时确定；（2）网状拓扑：广域网普遍使用； 4.数据报方式和虚拟电路方式（1）数据报方式（分组存储转发）：同一报文不同分组可以通过不同的传输路径；不同分组可能会出现乱序、重复和丢弃现象；分组均携带源地址和目的地址；延迟大，不适宜报文会话式；（2）虚电路方式：传输之前在源节点和目的节点之间建立逻辑连接；每个结点可以与任意结点建立多条虚电路连接，不需要路由选择；一次通信所有分组通过虚电路顺序传输，分组不需要携带目的地址和源地址等信息；结点只进行纠错。 5.网络体系结构（1）ISO建立的OSI（开放系统互联）模型：A.物理层（透明传输比特流）、数据链路层（MAC&amp;LLC）、网络层（选择路由IPSec）、传输层（端到端服务）、会话层、表示层（加密/解密）、应用层（提供应用进程交换和远程操作）；（2）TCP/IP模型：IETF制定的A.主机-网络层、互联层（IP/ARP/ICMP）、传输层（TCP\\UDP）、应用层（FTP\\HTTP\\RIP\\NFS\\SMTP\\Telnet\\SNMP\\CIMP\\PGP\\S/MIME\\）B.开放式网络协议标准；与网络硬件无关；每一层服务上一层 6.计算机网络以能够相互共享资源方式互联起来的自治计算机系统集合。 7.ARPANETInternet的始祖，是世界范围内的广域网，是世界上开发的第一个运营的封包交换网络（分组交换网络技术），是美国国防部高级研究计划局研究的网络。 二、局域网技术1.局域网三要素（1）网络拓扑：总线型、环型、星型；（2）传输介质：双绞线、同轴电缆（最早）、光纤和无线信道；（3）介质访问：按照介质访问控制方式分为共享介质和交换局域网。其中：共享介质（总线型局域网：利用CSMA/CD避免冲突；环型局域网：利用令牌环控制冲突） 2.IEEE 802（1）对象：OSI的物理层和数据链路层。专门从事局域网的标准化工作。（不同局域网中，MAC和物理层可以不同，LLC（介质访问控制层）必须相同）（2）分类：802.3：定义CSMA/CD总线型介质访问MAC和物理层标准（以太网标准）；802.4：定义令牌环网的协议标准；802.11：无线局域网标准；802.15：无线个人区域网介质访问MAC和物理层标准；802.16：宽带无线局域网。 3.共享以太网（1）概念：核心是集线器；ALOHA网络是基础；总线型局域网；核心技术：CSMA/CD；（2）帧结构：间导码7B 帧前定界符1B|目的地址6B源地址6B类型2B|数据46-1500B校验位4B（CRC）（接收同步，不计帧头） （帧头；类型：网络层协议） （帧长64-1518B）（3）以太网物理地址：长度48位，十六进制，两两一组，共6组；前三组生产公司，后三组生产商分配流水号，可分配地址2^47，第一位1则为组/广播；为0才可以分配给生产商。 4.高速局域网标准（MAC层与原标准兼容，仅定义物理层标准）（1）802.3u：Fast Ethernet，百兆以太网；（2）802.3z：Gigabit Ethernet，千兆以太网，定义多模光纤或屏蔽双绞线；802.3ab：Gigabit Ethernet，千兆以太网，定义单模光纤或非屏蔽双绞线；采用GMII分隔物理层和MAC层；与传统以太网的帧格式一致；（3）802.3ae:10Gigabit Ethernet，万兆以太网，使用光纤传输，只有全双工模式，不存在介质访问控制，传输距离不受冲突检测的限制。（4）802.3ba：40/100Gigabit Ethernet（40Gbps网络使用波分复用技术，100GPS物理接口类型） 5.交换式局域网（1）概念：典型的是交换式以太网，核心设备：以太网交换机（专用/共享端口）；可以在多个端口之间建立多个并发连接，实现多结点之间的并发连接，（2）帧转发方式：直接交换；存储转发；改进直接交换（接收一帧前64B，检测由主机进行）；（3）虚拟局域网（VLAN）组网方式：用交换机端口定义；MAC地址定义；基于网络层地址（IP）定义；基于广播组定义。 6.无线局域网（1）按物理层传输方式分类：红外、直接序列扩频、跳频广播、微波；（2）红外无线局域网IR、跳频扩频FSSS（将频带划分为多个信道，使用2.5GHZ的ISM频段）、直接序列扩频DSSS（所有接受结果使用相同频段通信）、窄带微波无线局域网。（3）802.11定义的两种访问方式：无争用服务、争用服务；MAC层采用CSMA/CA避免冲突；支持AP访问模式和漫游访问模式；802.11管理帧为探测帧和认证帧；采用层次结构模型；MAC层主要功能是对无线环境的访问控制；物理层定义了红外、调频扩频与直接序列扩频的数据传输标准。（4）802.11协议族： 802.11a: 5HZ 54M 802.11b: 2.4HZ 11M（跳频） 802.11g: 2.4HZ 54M 802.11n: 5G 100M （5）网络结构为：端站（有无线网卡的用户结点）、接入点（AP）、接入控制器（AC在WLAN与外部网络之间充当网关作用）、AAA服务器（计费、认证、授权；802.11认证有三种：基于IEEE 802.1x的认证、基于PPoE的认证和基于Web的认证） （6）1000BASE-SX:多模光纤1000BASE-CX:屏蔽双绞线1000BASE-LX:单模光纤1000BASE-T:非屏蔽双绞线100BASE-FX:单/多模光纤 7.不能够通信的原因不在一个虚拟子网中；不在一个子网中。 8.总线局域网的特点所有结点都通过网卡连接到作为公共介质的总线上，通常采用双绞线或同轴电缆作为传输介质；所有的结点都可以发送或接收数据，但在一段时间内只允许一个结点通过总线发送数据（即半双工形式）；当一个结点通过总线以“广播”方式数据时，其他结点只能以“收听”方式接收数据；由于总线作为公共传输介质被多结点共享，因此会出现冲突现象。 三、Internet基础1.互联网构成通信线路（基础设备）、路由器（主要设备，主要功能：维护路由表信息；转发IP数据报；选择最佳路径）、主机（信息资源和服务的载体）和信息资源。IP协议是Internet中的主要协议。 2.Internet的接入方式（1）电话线接入；（2）ADSL接入：使用电话线路，完成非对称数据用户线路，ADSL调制解调器：具备网桥、路由器和调制解调的功能；（3）HFC接入：有线电视网接入（混合光纤/同轴电缆），非对称数字用户线路；（4）数据通信线路接入：（成本高） 3.IP协议（1）定义：IP数据报格式、对数据寻址和路由、数据报分片和重组、差错控制和处理等。（2）IP服务特点：不可靠服务；面向无连接；尽最大努力投递；（一般不随意丢弃报文）（3）IP网络特点：隐藏底层物理网络细节；不制定拓扑结构，不要求网络之间全部互联；在物理网络之间转发数据，信息可以跨网传输；公平对待互联网中每一个网络；使用同一的地址描述法。 4.IP地址（A\\B\\C\\D\\E类地址）（1）特殊IP地址：网络地址；广播地址（直接广播/有限广播：255.255.255.255）；回送地址（127.0.0.0）；本地地址（A:10.0.0.0/8;B:172.16.0.0/12;C:192.168.0.0/16）（2）若要发送广播：源地址是本机，目的地址：网络号不变，主机号全为1. 5.地址解析协议ARP（1）工作在互联层，能够实现IP到MAC的解析；（2）工作原理：以广播形式发送请求报文（ARP请求），单播响应；（3）通过高速缓存技术避免大量请求报文出现，提高有效性；拥有计时器的目的是保证主机ARP表的正确性。 6.IP数据报格式（1）组成：报头区和数据区；（2）数据报各字段及其功能：版本和协议类型；长度；服务类型；生存周期；头部校验和域（保证报头完整性，没有数据区校验字）；（3）报头长度：32bit双字节为单位；总长度以8bit字节为单位。包含与分片和重组有关：标识（原数据是谁）、标志（是否是最后一片）和片偏移（顺序重组） 7.IP封装、分片（MTU:最大传输单元，一帧携带最多能携带的数据量。）和重组。8.IP数据报选项（1）目的：控制和测试；（2）选项数据：A.源路由：严格路由（严格按照路径转发）；松散路由（规定主要路由）；B.记录路由：记录经过的所有路由IP；C.时间戳 9.差错与控制一个ICMP报文对应一个数据报（1）ICMP差错控制报文：拥塞控制（源抑制报文）、路由控制（重定向报文）；（2）请求/应答对：回应请求与应答（用于测试目的主机或路由器的可达性）、时间戳请求与应答（同步时间）、掩码请求与应答；（3）ICMP特点：不享受优先权和不享受特别的可靠性；报告伴随丢弃；报文包含IP数据报头和数据前64比特数据。（4）当路由器收到IP数据报，对IP数据报进行检测，当对其首部进行校验后发现数据报存在错误时，将抛弃该数据报。 10.路由器与选择（1）特殊路由：默认路由、待定主机路由（制定到达的主机）（2）RIP协议（路由器信息协议）：采用V-D算法（距离-矢量算法），简单、中小型网络、多路径、动态IP互联网环境；距离按跳数计算；慢收敛（解决：限制路径最大距离；水平分割对策；保持策略；带触发刷新的毒性逆转对策）（3）OSPF协议：采用L-S算法（链路-状态算法），大型网络、多路径、动态IP互联网环境；每个路由都有一个LSA，最终获得一个LSDB（链路状态数据图），收敛比V-D算法快。 11.IP组播技术（1）特点：使用组地址（D类地址）；动态组播地址，成员也是动态；不仅通过IP层，还与要底层硬件支持功能。（2）相关协议：组播管理协议（IGMP,CGMP）、组播路由协议。IGMP：Internet制定的，一方面主机通过本地路由器主动加入；一方面ICMP协议路由器会周期查询。组播路由由：源地址、组地址、入接口和出接口组成（前三个进行匹配）。 12.IPv6（1）地址：128位（IPv4:32位）；送回地址（0:0:0:0:0:0:0:1）；（2）数据报格式：一个基本头（固定40B）、多个扩展头和一个高层协议数据单元组成。（3）扩展头种类：逐跳选项报头；目的选项报头；路由报头（强制数据报经过指定路由）；分片头； 13.TCP与UDP（1）TCP:面向对象，可靠，全双工。（使用窗口机制进行流量控制；RTT算法进行数据丢失与重发；连接端口用12位二进制表示）（2）UDP:非面向连接，不可靠，高效率。（应用程序提供可靠性保障） 14.NAT内外网地址翻译。分类：静态NAT、动态NAT、网络地址端口转换NAPT（多个内网主机共享一个全局IP地址，同时访问外部网络） 15.MTU1500字节；一般IP首部为20字节，UDP首部为8字节，数据的净荷部分预留是1472字节；如果超出1472字节，就会出现分片现象。 四、Internet基本服务1.应用进程响应并发请求分类（1）重复服务器：“先进先出”原则；（2）并发服务器：每来一条请求，创建一个子进程。 2.对等计算机模型（P2P）基本结构（1）集中式（Napster，服务器通常只存储目录和索引信息）；（2）分布式非结构化（无中心节点；随机图；支持复杂查询；模糊查询；利用TTL机制控制泛洪；Gnutella）；（3）分布式结构化（无中心节点；采用分布式散列表DHT；支持精确关键字匹配查询；可扩展；维护复杂；pastry; tapestry; chord; CAN）；（4）混合式结构（索引结点维护搜索结点在搜索用户结点；skype; BT; pplive） 3.域名解析方式（1）分类：递归解析（一次完成）、反复解析（分层多次解析）；（2）每一个域名服务器至少知道根服务器的IP地址及其父节点服务器的IP服务地址，才能解析。（本地域名服务器IP地址）（3）提高域名解析的效率：解析从本地域名服务器开始；在域名服务器使用高速缓存技术；在主机上采用高速缓冲技术。 4.域名对象类型A—主机；MX—邮件交换；PTR—指针；CNAME—别名；SOA—授权开始；HINFO—描述主机信息 5.远程登录中，网络虚拟终端利用NVT格式将不同的用户本地终端统一起来。6.FTP服务（1）C/S模型，利用TCP建立双向连接（一个控制连接/一个数据连接）；（2）建立联系方式：主动模式（服务器主动，使用PORT命令将端口发送给服务器）；被动模式（服务器被动，向服务器发送PASV命令）（3）FTP文件格式传输方式：文本文件传输（ASCII）；二进制文件传输（BINARY，不对文件格式进行任何变化，按照原始文件相同的位序以连续比特流方式进行传输）；（4）FTP口令描述：delete—删除远程主机上的文件命令；pwd—显示远程主机的当前工作目录； 7.电子邮件系统（1）SMTP：服务器之间的传递；主要目的是实现发送邮件的。（2）POP3/IMAP：向邮件服务器进行读取（认证阶段、事务处理、更新阶段Quit）；（3）电子邮件报文格式：RFC822、MIME.（4）命令：PASS—用户邮件口令（认证）；STAT—查询报文总数和长度； REST—复位，删除标记，中止当前操作；NOOP—无操作（事务处理） 8.Web服务（1）HTML：页面规范，解释单元，能够对请求和返回进行页面翻译，显示内容；（2）HTTP：客户机和服务器之间的传输协议，建立在TCP连接上，面向对象协议，精确定义了请求/相应报文；（3）URL：页面地址，统一资源定位器；（4）安全性：SSL协议（工作在传输层协议；位于TCP/IP协议与各类应用层协议之间）（浏览器安全性）（防止第三方偷看内容；防止第三方篡改）；CA证书（Web服务器）（证明自己）（5）浏览器组成：控制单元（解释键盘/鼠标输入命令）、客户单元、解释单元组成。Web服务器不但需要保存大量的Web页面，而且需要接受和处理浏览器的请求，实现HTTP服务器功能。Web服务器不具备编辑Web页面的功能。 9.安全性（1）如何保护自己的计算机：浏览器将Internet世界划分成几个区域；（2）如何验证站点真实性：利用Web站点传来的证书；（3）如何避免他人假冒自己：用户可以在CA安全认证中心申请自己的证书，放在浏览器中；（4）在与Web交互敏感信息时如何避免第三方篡改或偷看：使用安全套接层技术SSL技术；（5）保证传输机密性：将Web站点放入可信站点区可保证信息传输的机密性；（6）防止病毒传播：使用SSL技术。 9.网络蠕虫独立、通过漏洞传播、早期利用电子邮件传播、自我复制和主动传播；木马是没有复制能力的。 五、新型网络应用1.即时通信（IM）（1）由IMPP工作组提出；IETF批准成为正式RFC文件；有RFC2778文件描述功能；该文件未提出即使通信系统必须使用同一标准。（2）模式：客户机/服务器；客户机/客户机 2.QQ（1）客户机的两种聊天方式：UDP主/TCP辅；服务器中转（无法直接通信）；（2）采用自己私有的即时通信协议 ；（3）每次登陆时客户机会获得一个来自服务器的会话密钥。 3.即时通信协议（基于SIP的SIMPLE；基于JABBER的XMPP）（1）SIP：工作在应用层；IEFT提出；可在TCP/UDP上传输；支持多种信息类型（文件、视频、图像）；用于创建、修改和释放一个或多个用户会话；分类（用户代理、代理服务器、重定服务器（用于规划SIP路径服务器，可与其他服务器共存一个设备中）、注册服务器）；SIP消息组成（起始行、消息头、一个标志消息头的空行、消息体）；SIP定义的6种请求消息（INVITE：邀请用户/服务器参加一个会话；ACK；OPTIONS:获取服务器相关能力；BYE:终止一次会话；CANCLE:取消挂起呼叫；REGISTER）；SIP消息通常可分为2类，从客户机到服务器的请求消息和从服务器到客户机的响应消息。（2）SIMPLE：以SIP为基础，不需建立会话，支持多媒体会话；IEFT的SIMPEL工作组制定；IM消息以message命令为载体传输，每条IM由单独message命令传输，彼此独立。（3）XMPP：工作在应用层;基于JABBER协议；由IEFT制定；由4个RFC文档组成；设计上延续E-mail系统；包含用户客户端、XMPP服务器、XMPP协议网管；XML是其核心，统一选址方案，实体地址叫做JID。（4）基本服务：呈现服务和即时消息服务。 4.网络文件共享（1）NFS（网络文件系统）：Linux\\Windows上均可使用；与主机操作系统无关；采用C/S结构；若想远程计算B的某一个文件系统：”mount:B:/usr/lib(远程主机目录)/usr/lib(本机目录)”（2）NFS服务器共享出来的文件或目录都记录在/etc/exports文件中。 5.Windows LAN文件共享Windows2000以前的系统使用NetBIOS协议；以后使用CIFS协议 6.P2P文件共享（1）P2P:起源于Napster；BT（中心服务器tracker存放用户信息；种子文件：.torrent，包含存储用户信息和共享文件的信息）；源于MIT开源系统；加入DHT以实现无tracker服务器的文本传输；基于“六度分隔理论”、“世界最小理论假设”、“瓦斯特领导理论”。（2）Maze：支持即时通信；参考Kerberos机制；在线资源搜索和文件目录视图；支持多点下载和断点续传；基于积点的资源交易体系；有种子机制；分布式认证机制（类似于信用卡机制）；类似URL表示文件位置；混合型P2P系统；包括集中式的用户管理服务器（注册、登录）、目录收集服务器、检索服务器、心跳服务器和种子服务器。（3）P2P不支持种子机制；BT系统不支持积点机制；P2P可以实现用户之间直接传输；BT后期系统能够实现无Tracker服务器的文件传输；P2P与BT相互不兼容。 5.IPTV（1）业务种类：近式点播（NVOD，多个视频流依次间隔发送同样的内容）、真实点播电视（TVOD）和交互式点播（IVOD）;（2）媒体内容分发（MCDN）技术组成：A.内容发布：借助相关技术，将内容发布或投递到距离用户最近的远程服务点；B.内容路由：网络负载均衡技术，重定向路由器以请求最近内容源响应；C.内容交换：根据内容可用性、服务器可用性等，利用应用层交换技术，智能平衡负载流量；D.性能管理：保证网络处于最佳状态，测量内容发布的端到端性能。 6.VOIP（基于IP网络的语音传输技术）（1）组成：终端设备、网关（号码查询、建立通信、信号调制、压缩和解压缩、路由寻址）、多点控制单元（多终端）、网守（中央控制实体，负责用户注册和管理；消息控制中心；确定网关地址；计费管理；留存呼叫详细记录）（2）Skype：利用VOIP和P2P技术；混合式网络结构；AES算法作为密钥，密钥长度256bit；加密保存好友列表；支持免费多方通信；采用iLBS和iSAC编码技术；系统中SN是动态生成的；可以进行NAT穿越。 7.搜索引擎组成搜索器、检索器、索引器、用户接口。 8.ICQ、AOL采用OSCAR通信协议。9.网管模型（一般采用网络管理者-网管代理模型，管理者实际是运行在计算机操作系统上的一组应用程序，代理位于被管理的设备内部，一个管理者可以和多个代理之间进行信息交换）（1）组织模型描述网管系统的组成部分；（2）信息模型描述网管系统的对象命名；（3）通信模型描述网管系统的管理协议； 六、网络管理与网络安全1.网络管理（1）管理对象：物理介质、计算机设备和网络互连设备（硬件资源）；操作系统、应用软件和通信软件（软件资源）；（2）目标：用户及运营商对网络的有效性、可靠性、开放性、综合性、安全性和经济性。（3）模型：集中式管理和分布式管理（时效好） 2.网络管理功能（1）配置管理：包含两阶段：网络初次运行的初始配置管理阶段和网络正常运行的工作配置管理阶段；负责网络建设、业务展开和配置维护，达到网络性能最优；包括：设置系统中有关路由操作的参数、被管理对象的名字管理、初始化或关闭被管对象、根据要求收集系统当前状态的有关信息、获取系统重要变化信息、更改系统配置、生成网络拓扑。（2）故障管理：发现和排除故障；维护和监测错误日志；接收错误响应；跟踪辨别错误；（3）性能管理：计算机网络性能；收集统计信息；监控网络使用状况；维护网络使用状况；（4）计费管理（5）安全管理：对授权机制、访问控制、加密和解密关键字的管理。 3.网络管理协议（1）CMIS和CMIP：由IOS制定；所用功能都要映射到应用层；采用报告机制（委托管理制）；实施复杂且花费高；（2）SNMP：工作在应用层；IETF制定；遵循ISO的管理模型，可以应用于TCP/IP环境下；收集数据的方式有轮询（不断收集，按顺序存储在MIB中，时效低）和基于中断（时效高，需要转发大量信息，消耗管理设备资源时间，改进：trap）两种；SNMP第一版安全性差；第二版提供验证、加密和时间同步机制，在安全性和更有效的传递管理信息方面加以改进； 4.信息安全等级（1）美国制定（DOD5200.28-STD）：非安全保护类：D（客户机系统）；自主保护类：C1、C2（存取控制，以用户为单位）强制性安全保护类：B1（标记安全保护）B2（结构化安全保护）B3（安全域机制保护）A1（2）中国制定：自主保护级、指导保护级、监督保护级、强制保护级、专控保护级 5.OSI安全框架（X.800）中安全攻击类型（1）被动攻击：不更改信息，窃听检测，内容泄漏，流量分析（重在预防）；（2）主动攻击：更改信息，消息篡改，DOS攻击，消息重放，拒绝，伪装（重在检测）；（3）服务攻击：针对特定服务攻击；邮件炸弹；端口攻击；分布式拒绝服务攻击；（4）非服务攻击：基于网络层或底层协议漏洞攻击；源路由攻击，地址欺骗，NetXray攻击。 6.对称密码（1）DES：分组长度64位，分组置换，密钥长度56位；美国NIST采纳；（2）三重DES：多个密钥对DES进行三次加密；（3）高级加密（AES）：分组长度128，分组置换，密钥长度128,192或256位，性能不低三重DES；（4）Blowfish算法：可变长度密钥，分组长度64；（5）RC5：分组长度和密钥长度均变。 7.非对称密钥（公钥密码）（1）RSA算法：发明者姓名命名；分组密码；加密强度取决于密钥长度（概率加密方法）；质数值越大，破解越难；（2）ElGamal算法：公钥密码体制和椭圆曲线加密体系；基于离散对数；常用于数字签名；密文是明文的两倍。（3）背包加密算法：目前一次背包不安全； 8.密钥的验证认证中心（CA），验证实体身份；产生证书，将公钥和身份绑定；证书由CA进行数字签名；认证后公钥的发布不受限制；保管用户的公钥； 9.认证技术（1）消息认证的方法：认证消息来源；认证信息的完整性；认证信息的序号和时间。（2）认证模式：单向和双向；（3）认证函数：信息加密函数；信息认证码；散列函数（Hush，消息通过散列函数生成摘要。MD5同步处理可得到128位摘要）（4）数字签名：防止抵赖（5）身份认证：口令认证、持证认证和生物识别；协议有Kerberos（对称密钥；TCP/IP环境下；美国麻省理工）、X.509（公钥体制；CCITT制定） 10.安全电子邮件（应用层）（1）PGP：数字签名采用DSS/SHA或RSA/SHA；压缩：ZIP；兼容：64-BASE（2）S/MIME：支持数据加密和数字签名； 11.IPSEC网络层安全协议；将互联层改造为逻辑连接的层；主要有身份认证头（AH）协议（对于发送方提供源身份认证和数据完整性，没有提供秘密性）和封装安全负载（ESP）协议（提供源身份认证和数据完整性，提供了秘密性）；源主机与网络主机进行握手并建立网络逻辑连接，该逻辑通道成为安全协议（SA）；SA定义的逻辑连接是单工的，三元组。 12.防火墙分类（1）包过滤路由器：根据IP数据包进行处理，决定转发或丢弃；（2）应用级网关：代理服务器；（3）电路级网关：不允许端到端直接TCP连接；（4）堡垒主机。 13.公钥加密和数字签名技术建立的安全基础设施为：PKI14.密钥分发中心（KDI）是一个独立的可信的服务器；对称密钥；知道每个用户的密文，可一次性方法密钥，与客户通过密文传输。 15.安全电子交易协议SET安全电子交易协议SET是一种应用于Internet环境下，以信用卡为基础的安全电子交付协议，它给出了一套电子交易的过程规范。通过SET协议可以实现电子商务交易中的加密、认证、密钥管理机制等，保证了在Internet上使用信用卡进行电子购物的安全。主要目的是解决信用卡电子付款的安全保障性问题，这包括：保证信息的机密性、保证信息安全传输、不被窃听，只有收件人才能得到和解密信息。（常用于电子商务应用中；防止交易数据被篡改；需要认证中心的支持；验证交易双方的身份） 文档下载链接下面是此知识点总结文档链接 ，同学们可以下载后慢慢复习呀~ 链接：https://pan.baidu.com/s/1m85cEGZj8WRrQ12XiwHTrA 密码：c21v 计算机四级相关总结链接 [转]计算机四级网络工程师思维导图–常考重点 [转]计算机四级网络工程师思维导图–操作系统部分 [转]计算机四级网络工程师思维导图–计算机网络部分 感谢你的耐心阅读呀(๑◡๑)，总结不易，加个收藏点点赞呗~ 你的支持就是我前进的动力呀~","categories":[{"name":"知识总结","slug":"知识总结","permalink":"http://sublimerui.top/categories/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"},{"name":"计算机考试","slug":"知识总结/计算机考试","permalink":"http://sublimerui.top/categories/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E8%AF%95/"}],"tags":[{"name":"计算机四级","slug":"计算机四级","permalink":"http://sublimerui.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%9B%E7%BA%A7/"}]},{"title":"Hexo主题升级方法（实用！）","slug":"Hexo主题升级方法（实用！）","date":"2019-08-30T00:01:49.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/dfb45bc4.html","link":"","permalink":"http://sublimerui.top/archives/dfb45bc4.html","excerpt":"最近，自己使用的Hexo博客主题Material-X有新的版本更新，使用普通的方法git clone会覆盖自己修改后的文件，使得DIY的主题丢失。通过查阅有关资料，总结出了以合并文件的形式更新当前的主题文件的方法喔~","text":"最近，自己使用的Hexo博客主题Material-X有新的版本更新，使用普通的方法git clone会覆盖自己修改后的文件，使得DIY的主题丢失。通过查阅有关资料，总结出了以合并文件的形式更新当前的主题文件的方法喔~ PS： git pull用法：https://blog.csdn.net/chaiyu2002/article/details/82120256 最开始更新主题的时候，直接使用git pull命令，然而，出现了报错： error: Your local changes to the following files would be overwritten by merge:_config.ymlPlease commit your changes or stash them before you merge.Aborting 原来，pull新版本主题文件的时候，本地的主题文件也DIY修改过，两者文件内容不同，导致发生冲突（即报错中的 _config.yml 文件）。 为了解决问题，同时本着无损合并代码的方式更新，在网络上找到了一篇文章。原文出自：https://www.jianshu.com/p/920ad324fe64 主题更新步骤 使用Git Bash工具跳转到主题文件对应的目录中，如我的是： D:\\Program Files\\Hexo\\themes\\material-x 首先，更新工作的状态树： 1git add . 之后，输入如下命令，将文件放在堆栈中，获取更新后，再弹栈： 123git stashgit pullgit stash pop 执行这几条简单的命令之后，Hexo主题便可以无损更新。 操作截图如下： 附：相关Git命令知识git add .他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。 git stash能够将所有未提交的修改（工作区和暂存区）保存至堆栈中，用于后续恢复当前工作目录。 git stash save作用等同于git stash，区别是可以加一些注释 git stash list查看当前stash中的内容 git stash pop将当前stash中的内容弹出，并应用到当前分支对应的工作目录上。注：该命令将堆栈中最近保存的内容删除（栈是先进后出）如果从stash中恢复的内容和当前目录中的内容发生了冲突，也就是说，恢复的内容和当前目录修改了同一行的数据，那么会提示报错，需要解决冲突，可以通过创建新的分支来解决冲突。 git stash apply将堆栈中的内容应用到当前目录，不同于git stash pop，该命令不会将内容从堆栈中删除，也就说该命令能够将堆栈的内容多次应用到工作目录中，适应于多个分支的情况。堆栈中的内容并没有删除。可以使用git stash apply + stash名字（如stash@{1}）指定恢复哪个stash到当前的工作目录。 git stash clear清除堆栈中的所有内容 git stash show查看堆栈中最新保存的stash和当前目录的差异。 通过git stash将工作区恢复到上次提交的内容，同时备份本地所做的修改，之后就可以正常git pull了，git pull完成后，执行git stash pop将之前本地做的修改应用到当前工作区。 感谢你的耐心阅读呀(๑◡๑)，原创总结不易，收藏并评论一下呗~ 你的支持就是我前进的动力呀~","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://sublimerui.top/tags/Hexo/"}]},{"title":"2019电赛--无人机题目OpenMV总结","slug":"2019电赛-无人机题目OpenMV总结","date":"2019-08-16T23:32:25.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/d508d500.html","link":"","permalink":"http://sublimerui.top/archives/d508d500.html","excerpt":"2019年电赛，前前后后经历了四天吧。从8月7好开始，到10号结束，浑浑噩噩，不分白昼地为了无人机的题目而努力吧。我的队友负责飞控，我也就负责视觉模块OpenMV程序的编写啦。虽然比赛下来感觉发挥不是特别好，但还是有所收获吧。这里，我把比赛自己用到的相关程序代码贴出来并做了简要总结。 无论如何都不能放弃呀！勤做笔记，加油！","text":"2019年电赛，前前后后经历了四天吧。从8月7好开始，到10号结束，浑浑噩噩，不分白昼地为了无人机的题目而努力吧。我的队友负责飞控，我也就负责视觉模块OpenMV程序的编写啦。虽然比赛下来感觉发挥不是特别好，但还是有所收获吧。这里，我把比赛自己用到的相关程序代码贴出来并做了简要总结。 无论如何都不能放弃呀！勤做笔记，加油！ 上一篇相关博文，准备阶段OpenMV学习笔记链接：https://sublimerui.top/archives/f10b0e1a.html 无人机题目分析今年的电赛题目着实让人觉得出题挺新颖的。新颖的同时，困难度就直线提升了（呜呜呜，我们队就是受害者之一，说好的光流可以定点呢，结果那种灰白条纹地面根本就定不住，真的想狠狠地吐槽一下砖家组） 哎，做下来大部分时间懵逼，都是一把辛酸一把泪呀~ 言归正传，今年的电赛无人机题目B题——巡线机器人，具体要求是让我们的无人机从一个杆起飞，沿着线飞向宁一个杆，飞行过程中会拍摄条形码和二维码，绕杆一圈后，再降落。题目如下： PS:这里附上2019年电赛的各方向题目，已经放在Github上：2019电赛题目.zip 分类题目中，涉及OpenMV的部分，主要可以分为以下几类吧： 识别并拍摄条形码和二维码，储存于SD卡中； OpenMV巡线（此方法是由于实际比赛中发现无法用光流在灰白条纹地面上定点，即无法控制其水平方向的误差偏移） 方法一：识别并拟合两条杆之间线缆的直线，返回偏差距离和偏差角度（缺点：OpenMV视野横向不丢失距离太小了）； 方法二：拟合识别条纹边缘（由于条纹宽度规定了，可以寻找灰白条纹和外部白色地面的交界处），拟合出边缘直线，返回偏差距离和偏差角度（相对来说更稳定，这也是我们队最后用的方法）； 识别并返回环形圆板中心红点坐标位置，使飞机定圆点（发挥部分） 其他（例如起飞后用OpenMV识别靠杆，识别到特定标志后开始绕杆等等） 逐类型分析拍摄条形码和二维码并储存SD卡有关于条形码和二维码的讲解我已将在上一篇博文中有所总结和归纳了，这里，直接贴上我写的部分代码吧，全部代码已经放在我的Github上面了，需要的话可以自己下载呐~ 自己手写的完整程序已放在Github上：**shot_images_to_save.py** 条形码和二维码拍摄：函数shot_images_while_tracking_lines()用于拍摄并储存找 照片于SD卡中。其中，此段程序会分别对条形码连续循环拍3三张，分别命名为“barcod_1.jpg”，“barcod_2.jpg”和“barcod_3.jpg”（二维码同理），只要OpenMV插上了SD卡后，一旦识别到相关条码后，便会拍摄并自动保存到卡中。完整程序代码中，如果识别到条形码，OpenMV就会闪绿灯拍照；识别到二维码后，OpenMV会闪红灯拍照。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748############ 拍照 ###############barcode_num = 0qrcode_num = 0# 拍摄照片def shot_images_while_tracking_lines(): #global had_finished_barcode, had_finished_qrcode global barcode_detected, qrcode_detected, barcode_num, qrcode_num if barcode_detected: #and (not had_finished_barcode): #sensor.set_framesize(sensor.QVGA) #barcode_detected = 0 if barcode_num &lt;= 3: barcode_num += 1 barcode_name = &quot;barcode_&quot; + str(barcode_num) sensor.snapshot().save(barcode_name + &quot;.jpg&quot;) print(barcode_name + &quot;.jpg is saved!&quot;) time.sleep(5) if barcode_num &gt;= 3: barcode_num = 0 #barcode_detected = 0 print(&quot;bar:&quot;, barcode_detected) #had_finished_barcode = 1 return True if qrcode_detected: #and (not had_finished_qrcode): #sensor.set_framesize(sensor.QVGA) #qrcode_detected = 0 if qrcode_num &lt;= 4: qrcode_num += 1 qrcode_name = &quot;qrcode_&quot; + str(qrcode_num) sensor.snapshot().save(qrcode_name + &quot;.jpg&quot;) print(qrcode_name + &quot;.jpg is saved!&quot;) time.sleep(5) if qrcode_num &gt;= 3: qrcode_num = 0 #qrcode_detected = 0 print(&quot;qr:&quot;, qrcode_detected) #had_finished_qrcode = 1 return True 识别条形码（识别黄色）和二维码（二值化后计算像素点，设置阈值）：此段程序中，函数count_pixels_with_movement(img)用于识别并判断识别条形码和二维码的条件和阈值。以条形码为例，这里通过色块识别的方法，调用img.find_blobs()函数，通过设置黄色阈值，达到识别到黄色条码的目的。其中，barcode_pixels_threshold是一个列表，储存的2个元素分别是黄色阈值下限和上限。此外，我也尝试运用统计像素点的方式去识别二维码和条形码（这里已经被注释掉），其方法是先将图像按照一定的阈值二值化后，调用img.get_pixel()函数，统计满足像素值为255（即白色）的像素个数，同时，设定特定的像素阈值（如qrcode_pixels_threshold等等，与黄色检测同理，也有阈值上下限两个阈值），也可以达到同样的效果。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677############ 像素识别 ###########barcode_cnt = 0qrcode_cnt = 0pole_cnt = 0LED_ON = 0def count_pixels_with_movement(img): global x_width, y_height global barcode_detected, qrcode_detected global barcode_cnt, qrcode_cnt, pole_cnt global LED_ON blob = img.find_blobs(barcode_pixels_threshold, pixels_threshold=150, area_threshold=150, merge=True, margin=5) if blob: pass for i in blob: img.draw_rectangle(i.rect(), color = 127) barcode_detected = 1 LED_ON = 1 print(&quot;132123132131313131112311231&quot;) #测试用，可删除 print(&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;) return else: barcode_detected = 0 LED_ON = 0 return x_pos = 0 y_pos = 0 total_white_pixels = 0 for x_pos in range(x_width): for y_pos in range(y_height): if img.get_pixel(x_pos, y_pos) == 255: total_white_pixels += 1 #print(&quot;total white pixels are&quot;, total_white_pixels)# if total_white_pixels &gt;= verticle_pixels_threshold[0] and \\# total_white_pixels &lt;= verticle_pixels_threshold[1]: #直角# singleline_check.is_verticle = 2# elif total_white_pixels &gt;= track_line_pixels_threshold[0] and \\# total_white_pixels &lt;= track_line_pixels_threshold[1]: #巡线# singleline_check.is_verticle = 1 if total_white_pixels &gt;= barcode_pixels_threshold[0] and \\ total_white_pixels &lt;= barcode_pixels_threshold[1]: #条形码 if barcode_cnt &gt;= 0 and barcode_cnt &lt;= 49: barcode_cnt += 1 if barcode_cnt == 50: barcode_cnt = -1 barcode_detected = 1 # LED(1).toggle() #红灯 # time.sleep(200) # LED(1).toggle() #if total_white_pixels &gt;= qrcode_pixels_threshold[0] and \\ # total_white_pixels &lt;= qrcode_pixels_threshold[1]: #二维码 # if qrcode_cnt &gt;= 0 and qrcode_cnt &lt;= 49: # qrcode_cnt += 1 # if qrcode_cnt == 50: # qrcode_cnt = -1 # qrcode_detected = 1 # LED(3).toggle() #蓝灯 # time.sleep(200) # LED(3).toggle() #elif total_white_pixels &gt;= near_the_pole_threshold[0] and \\ # total_white_pixels &lt;= near_the_pole_threshold[1]: #到达杆 # if pole_cnt &gt;= 0 and pole_cnt &lt;= 49: # pole_cnt += 1 # if pole_cnt == 50: # pole_cnt = -1 # send_flag.pole_is_near = 1 print(&quot;the flags are: %d %d %d&quot;%(barcode_detected, qrcode_detected, send_flag.pole_is_near)) #测试用，可删除 OpenMV巡线自己手写的完整程序已放在Github上：**detect_and_track_edges.py** 方法一（拟合两杆间直线）巡线的时候，使用的是最小二乘法的线性回归算法，即运用img.get_regression()函数（这里打开了鲁棒算法robust = True，效果更好），计算其拟合直线后的结果，并拥有两个返回值（误差偏离值singleline_check.flag2.rho()和偏角值singleline_check.flag2.theta()） 12345678910111213141516#找线def found_line(img): #对图像所有阈值像素进行线性回归计算。这一计算通过最小二乘法进行，通常速度较快，但不能处理任何异常值。 若 robust 为True，则将 #使用泰尔指数。泰尔指数计算图像中所有阈值像素间的所有斜率的中值。thresholds：追踪的颜色范围 singleline_check.flag2 = img.get_regression([(255,255)], robust = True) if (singleline_check.flag2): #print(clock.fps()) singleline_check.rho_err = abs(singleline_check.flag2.rho())-0 #求解线段偏移量的绝对值 if singleline_check.flag2.theta()&gt;90: #求解角度的偏移量 singleline_check.theta_err = singleline_check.flag2.theta()-0 else: singleline_check.theta_err = singleline_check.flag2.theta()-0 #在图像中画一条直线。singleline_check.flag2.line()意思是(x0, y0)到(x1, y1)的直线；颜色可以是灰度值(0-255)，或者是彩色值 #(r, g, b)的tupple，默认是白色 img.draw_line(singleline_check.flag2.line(), color = 127) #print(singleline_check.theta_err) 拟合示意图如下，（其中，红色的为拟合直线）： PS：此方法准确度较高，但是OpenMV图像视野范围有限。当直线从图像视野最下端到达最上端，换算成无人机横向移动的距离仅有5-10cm，当无人机超出此范围时，将无法获取直线了，有一定的局限性。 方法二（拟合识别条纹边缘）此函数track_edges(img)中，同样使用img.find_blobs()找色块的方法，其中运用了简单角度和距离的计算方法。并返回条纹底色边界线的拟合直线，此函数的计算结果为拟合直线距离画面左边界距离rho和中心线的偏离角度theta。 1234567891011121314151617181920212223242526272829303132def track_edges(img): #invert = True blobs = img.find_blobs([edge_thresholds], pixels_threshold=50, area_threshold=50, merge=False, margin=5) if blobs: sum_x = 0 sum_theta = 0 for i in range(len(blobs)): img.draw_rectangle(blobs[i].rect(), color = 127) sum_x += (blobs[i].x() + blobs[i].w()) sum_theta += math.degrees(blobs[i].rotation()) per_x = sum_x / len(blobs) per_y = y_height / 2 per_theta = sum_theta / len(blobs) if per_theta &gt;= 0 and per_theta &lt; 90: true_theta = 90 - per_theta elif per_theta &gt;= 90 and per_theta &lt;180: true_theta = (180 - per_theta) + 90 print(&quot;per_x: %d per_y: %d true_theta: %d&quot;%(per_x, per_y, true_theta)) horizontal_line = (int(per_x), int(per_y), 0, int(per_y)) centre_cross = (int(per_x), int(per_y)) img.draw_line(horizontal_line, color = 127) img.draw_cross(centre_cross, color = 127) singleline_check.rho_err = int(per_x) singleline_check.theta_err = int(true_theta) line.flag = 1 uart.write(pack_linetrack_data()) 拟合示意图如下（其中，红色的为拟合直线）： 这样，当检测到条纹边界的时候，会计算拟合出条纹边界的直线。 PS：注意，使用这种方法一定要打开白平衡和自动增益！！！非常重要！！！我们队就吃了这样的亏，使得OpenMV距离地面较近的时候识别正常，一旦远离地面一定距离后，图像中将无法识别边界直线！！！ 123#在这里，应该将自动增益和白平衡打开sensor.set_auto_gain(True)sensor.set_auto_whitebal(True) 飞机悬停定圆点定特定颜色的原点时，将运用img.find_blobs()函数（这里将图像二值化了），返回色块其中心坐标cx()和cy()即可。对于不同的颜色的色块（如题目中的红色），需要实地测试得到不同的阈值。这里的返回值为圆点中心坐标、像素大小和标志位。 自己手写的完整程序已放在Github上：main.py 找圆点函数： 12345678910111213141516171819202122232425262728293031# 点检测函数def check_dot(img): #thresholds为黑色物体颜色的阈值，是一个元组，需要用括号［ ］括起来可以根据不同的颜色阈值更改；pixels_threshold 像素个数阈值， #如果色块像素数量小于这个值，会被过滤掉area_threshold 面积阈值，如果色块被框起来的面积小于这个值，会被过滤掉；merge 合并，如果 #设置为True，那么合并所有重叠的blob为一个；margin 边界，如果设置为5，那么两个blobs如果间距5一个像素点，也会被合并。 for blob in img.find_blobs(thresholds, pixels_threshold=80, area_threshold=80, merge=True, margin=5): if dot.pixels&lt;blob.pixels():#寻找最大的黑点 ##先对图像进行分割，二值化，将在阈值内的区域变为白色，阈值外区域变为黑色 img.binary(thresholds) #对图像边缘进行侵蚀，侵蚀函数erode(size, threshold=Auto)，size为kernal的大小，去除边缘相邻处多余的点。threshold用 #来设置去除相邻点的个数，threshold数值越大，被侵蚀掉的边缘点越多，边缘旁边白色杂点少；数值越小，被侵蚀掉的边缘点越少，边缘 #旁边的白色杂点越多。 img.erode(2) dot.pixels=blob.pixels() #将像素值赋值给dot.pixels dot.x = blob.cx() #将识别到的物体的中心点x坐标赋值给dot.x dot.y = blob.cy() #将识别到的物体的中心点x坐标赋值给dot.x dot.ok= 1 #在图像中画一个十字；x,y是坐标；size是两侧的尺寸；color可根据自己的喜好设置 img.draw_cross(dot.x, dot.y, color=127, size = 10) #在图像中画一个圆；x,y是坐标；5是圆的半径；color可根据自己的喜好设置 img.draw_circle(dot.x, dot.y, 5, color = 127) print(&quot;centre_x = %d, centre_y = %d&quot;%(dot.x, dot.y)) #判断标志位 赋值像素点数据 dot.flag = dot.ok dot.num = dot.pixels #清零标志位 dot.pixels = 0 dot.ok = 0 剩下的其他功能自己就没有写啦(T＿T)，比赛四天太紧张了，这样已经很不错了，已经是全部成果~ 感谢你的耐心阅读呀(๑◡๑)，原创总结不易，收藏并评论一下呗~ 你的支持就是我前进的动力呀~","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"学习笔记/Python","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/"}],"tags":[{"name":"电赛","slug":"电赛","permalink":"http://sublimerui.top/tags/%E7%94%B5%E8%B5%9B/"},{"name":"OpenMV","slug":"OpenMV","permalink":"http://sublimerui.top/tags/OpenMV/"},{"name":"Python","slug":"Python","permalink":"http://sublimerui.top/tags/Python/"}]},{"title":"CenOS 7环境下使用WordPress搭建电协官网--（1）基础配置","slug":"CentOS 7环境下使用WordPress搭建电协官网--（1）基础配置","date":"2019-07-31T15:47:14.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/826b26c7.html","link":"","permalink":"http://sublimerui.top/archives/826b26c7.html","excerpt":"因下学期电协招新及20周年纪念的需要，需要搭建一个官方网站。我们以WordPress为例，介绍从购买一个服务器开始，到安装博客程序以及最后细节优化及注意事项。","text":"因下学期电协招新及20周年纪念的需要，需要搭建一个官方网站。我们以WordPress为例，介绍从购买一个服务器开始，到安装博客程序以及最后细节优化及注意事项。 环境准备 一个阿里云或者腾讯云服务器 宝塔面板 CenOS 7+ 系统 LAMP/LNMP环境 WordPress安装包 远程连接工具Xshell和Xftp 购买并配置服务器对于大多数国内用户来说，我们可以选着阿里云或者腾讯云的服务器，这里以选择腾讯云服务器为例，进入腾讯云，注册并登录后进入管理后台。在云产品中选择云服务器： 之后，在云服务器里面选择创建： 选择适当的配置，我们可以选择快速配置，可以按照如下配置购买，其中推荐使用CentOS系统，相对来说较为稳定。 购买后，选择左边的SSH密钥，新建后并下载（如我命名为xshell） 返回实例页面，点击右侧更多-&gt;密码/密钥-&gt;加载密钥，选择之前创建的密钥后，将会强制关机以绑定密钥。 下载Xshell和Xftp并远程连接 Xshell下载地址 Xftp下载地址 配置Xshell以下载Xshell为例，进入官网后右边有免费授权页面，填写相关信息后，收到回复邮件，打开链接即可免费下载（Xftp同理） 下载并安装Xshell和Xftp后，点击文件-&gt;新建，在“连接”窗口，填写的主机为腾讯云服务器外网IP地址，在“用户身份验证”窗口，选择方法为“Public Key”,用户名为root，用户密钥选择之前下载的SSH密钥，点击连接即可成功连接至腾讯云服务器： 连接成功后的界面如下： 配置Xftp配置方法与Xshell类似，这里放上几张配置截图： 如果你已经实现了上述结果，恭喜你，远程连接已配置成功。 PS:使用Xshell需要涉及Linux命令相关的知识。如不是很了解，建议点击这里的传送门了解基本命令。 安装宝塔面板安装宝塔面板主要是为了方便后期维护的方便，使得服务器配置可视化同时加快配置效率。 宝塔面板官方网站 PS：安装宝塔面板时，一定要保证系统纯净，即服务器中没有安装其他的任何软件，否则可能会安装失败！！！ 放行出站入站端口在安装面板之前，需要放行特定的入站和出站端口号。回到腾讯云管理界面，选择安全组-&gt;新建： 然后下载规则配置文件： sg_input_rules.xlsx sg_output_rules.xlsx 点击导入规则，将规则配置文件添加到入站和出站规则中： 之后，点击关联实例-&gt;新增关联，将规则和服务器相互关联。 正式安装打开之前配置好的Xshell，对于CenOS 7+的系统，输入如下命令安装: 1yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh 出现提示信息，询问是否安装宝塔面板，输入y并回车： 耐心等待片刻后，出现如下界面，则安装成功。 其中，给出了登录名和密码，登录地址为http://你的IP或域名地址:8888/安全入口地址的格式。浏览器输入登录地址并登录。如出现如下后台界面，则安装成功！！！ 至此，服务器的基础配置已基本完成。建议到面板设置修改登录名和密码，便于记忆。 感谢你的耐心阅读呀(๑◡๑)，原创不易，收藏并评论一下呗~ 接下来，我们可以配置服务器和安装WordPress等后续操作啦~","categories":[{"name":"网站搭建","slug":"网站搭建","permalink":"http://sublimerui.top/categories/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"WordPress","slug":"WordPress","permalink":"http://sublimerui.top/tags/WordPress/"},{"name":"电协官网","slug":"电协官网","permalink":"http://sublimerui.top/tags/%E7%94%B5%E5%8D%8F%E5%AE%98%E7%BD%91/"}]},{"title":"实用的图片上传工具--PicGo","slug":"实用的图床上传工具--PicGo","date":"2019-07-26T23:59:36.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/5af88fad.html","link":"","permalink":"http://sublimerui.top/archives/5af88fad.html","excerpt":"博客写多了，有了图片加载慢的问题。这里分享一个简单实用的图片上传工具——PicGo此工具可以一键上传图片，对于编写博客和网站来说很有帮助。","text":"博客写多了，有了图片加载慢的问题。这里分享一个简单实用的图片上传工具——PicGo此工具可以一键上传图片，对于编写博客和网站来说很有帮助。 写在前面…刚开始学习网页前端和博客搭建的时候，自己按照网上的教程一步步地学习。但后来，总会遇到一个问题： 随着网页一步步地完善，图片也越来越多，图片的杂余，使得打开一个页面的时候，总会非常的缓慢（将大部分时间都花在了图片的加载上） 为什么会这样呢原来，随着图片的增多，服务器的压力就会加大，加载网页代码的同时，也会加载图片，然而图片常常很大（几百K到5M大小不等），会有一个很长的加载过程。 怎么改进呢后来，我了解到可以通过CDN的方式来减轻服务器的压力。 PS:何为CDN？CDN简单通俗地来说，就是通过外链的方式，将脚本、图片、视频等文件链接到自己的服务器，这样，将占用自己服务器资源的文件放在其他的服务器中，以达到网页加速的目的。 国内有很多CDN的提供商，例如阿里云、腾讯云、七牛云、又拍云（其中七牛云和又拍云提供定量的免费储存空间）。 开始，我使用的是七牛云的对象储存空间，七牛云有10G的免费空间,但是有一个不便却来了：我需要每次打开七牛的管理后台，手动上传之后，再把链接复制下来，引用到我的博客文章中。这样效率真的很低下，使得图片上传的不便。 偶然一次的发现——图床工具PS:何为图床？图床简单来讲就是图片托管和储存地，即前面所说的CDN提供商（他们既有CDN又有对象存储，即图床）。 PicGo软件下载链接：https://picgo.github.io/PicGo-Doc/zh/guide/Github: https://github.com/Molunerfinn/PicGo 在这里，我们可以选择SM.MS、腾讯云、微博、Github、七牛、Imgur、阿里云和又拍云多种方式上传。上传后，可以自动得到复制链接，粘贴到文章里面即可(oﾟ▽ﾟ)o 这里，强力推荐SM.MS，免费而且速度又快，真的是不二之选！！！！ 就到这里啦，下次更新ヾ(◍°∇°◍)ﾉﾞ 感谢你的耐心阅读呀(๑◡๑)，原创总结不易，收藏并评论一下呗~ 你的支持就是我前进的动力呀~","categories":[{"name":"小工具","slug":"小工具","permalink":"http://sublimerui.top/categories/%E5%B0%8F%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"图床","slug":"图床","permalink":"http://sublimerui.top/tags/%E5%9B%BE%E5%BA%8A/"}]},{"title":"2019电赛--OpenMV学习笔记","slug":"2019电赛--OpenMV学习笔记","date":"2019-07-18T15:53:45.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/f10b0e1a.html","link":"","permalink":"http://sublimerui.top/archives/f10b0e1a.html","excerpt":"第二年参加电赛了，今年来到测控无人机方向，主要记录一些OpenMV学习经历。再苦逼也要加油呀！！！","text":"第二年参加电赛了，今年来到测控无人机方向，主要记录一些OpenMV学习经历。再苦逼也要加油呀！！！ 之前，19年电赛视觉模块始终不明朗，直到最近才确定不能用树莓派。于是，一直研究OpenMV的我终于放心了。（哈哈哈这个当然是题外话，吐槽一下） 正题–OpenMVOpenMV是基于嵌入式STM32单片机的基础上，经过层层封装之后，运用microPython语法开发的模块。哈哈哈稍微介绍一下，小白们可以看看… 这是我们队用的OpenMV mini的板子： 寻找直角（或特定角度）方法一：寻找两条线交点，从而算出角度值（**已经弃用**） 为什么弃用呢？ 经过我们的测试，此方法存在检测到直角后不准确的问题。特别是当线的区域很大的时候，直角区域也会变大，运用此算法无法十分确切地找到直角顶点的中心位置，即识别出的交点会在直角附近来回抖动，这对于无人机来说，十分的不利，特别是速度快了以后，由于直角交点十分不稳定，很容易炸机。 同时，对于此方法，只能检测到特定角度的两条线相交的一个角度，适用性较窄。如需要识别其他类型的特征区域时（如双轨切换、T字和十字路口），就需要另外编写一套程序。 下面是原文…. 由于电赛视觉模块寻迹的原因，可能会涉及无人机直角转弯的问题，通过查找网上资料，获得了如下Python代码,感觉有一定的参考价值： 通过这个程序，我发现可以调用calculate_angle(line1, line2)函数得出偏角值，调用calculate_intersection(line1, line2)函数得出当前x和y的坐标值(cross_x, cross_y)，这样，再通过串口将对应的数据帧发送给飞控，在飞控端再进行帧格式解析，得出对应的数据后，在进行飞机相应的姿态调整。 123456def calculate_angle(line1, line2): # 利用四边形的角公式， 计算出直线夹角 angle = (180 - abs(line1.theta() - line2.theta())) if angle &gt; 90: angle = 180 - angle return angle 123456789101112131415def calculate_intersection(line1, line2): # 计算两条线的交点 a1 = line1.y2() - line1.y1() b1 = line1.x1() - line1.x2() c1 = line1.x2()*line1.y1() - line1.x1()*line1.y2() a2 = line2.y2() - line2.y1() b2 = line2.x1() - line2.x2() c2 = line2.x2() * line2.y1() - line2.x1()*line2.y2() if (a1 * b2 - a2 * b1) != 0 and (a2 * b1 - a1 * b2) != 0: cross_x = int((b1*c2-b2*c1)/(a1*b2-a2*b1)) cross_y = int((c1*a2-c2*a1)/(a1*b2-a2*b1)) return (cross_x, cross_y) return (-1, -1) 下面附上完整源代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146# Find Lines Example## This example shows off how to find lines in the image. For each line object# found in the image a line object is returned which includes the line&#x27;s rotation.# Note: Line detection is done by using the Hough Transform:# http://en.wikipedia.org/wiki/Hough_transform# Please read about it above for more information on what `theta` and `rho` are.# find_lines() finds infinite length lines. Use find_line_segments() to find non-infinite lines.enable_lens_corr = False # turn on for straighter lines...import sensor, image, timesensor.reset()sensor.set_pixformat(sensor.GRAYSCALE) # grayscale is fastersensor.set_framesize(sensor.QQVGA)sensor.skip_frames(time = 2000)clock = time.clock()# min_degree = 0 # 直线最小角度# max_degree = 179 # 直线最大角度# 判断是否为直角的阈值right_angle_threshold = (70, 90)binary_threshold = [(0, 60)]forget_ratio = 0.8move_threshold = 5def calculate_angle(line1, line2): # 利用四边形的角公式， 计算出直线夹角 angle = (180 - abs(line1.theta() - line2.theta())) if angle &gt; 90: angle = 180 - angle return angledef is_right_angle(line1, line2): global right_angle_threshold # 判断两个直线之间的夹角是否为直角 angle = calculate_angle(line1, line2) if angle &gt;= right_angle_threshold[0] and angle &lt;= right_angle_threshold[1]: # 判断在阈值范围内 return True return Falsedef find_verticle_lines(lines): line_num = len(lines) for i in range(line_num -1): for j in range(i, line_num): if is_right_angle(lines[i], lines[j]): return (lines[i], lines[j]) return (None, None)def calculate_intersection(line1, line2): # 计算两条线的交点 a1 = line1.y2() - line1.y1() b1 = line1.x1() - line1.x2() c1 = line1.x2()*line1.y1() - line1.x1()*line1.y2() a2 = line2.y2() - line2.y1() b2 = line2.x1() - line2.x2() c2 = line2.x2() * line2.y1() - line2.x1()*line2.y2() if (a1 * b2 - a2 * b1) != 0 and (a2 * b1 - a1 * b2) != 0: cross_x = int((b1*c2-b2*c1)/(a1*b2-a2*b1)) cross_y = int((c1*a2-c2*a1)/(a1*b2-a2*b1)) return (cross_x, cross_y) return (-1, -1)def draw_cross_point(cross_x, cross_y): img.draw_cross(cross_x, cross_y) img.draw_circle(cross_x, cross_y, 5) img.draw_circle(cross_x, cross_y, 10)# All lines also have `x1()`, `y1()`, `x2()`, and `y2()` methods to get their end-points# and a `line()` method to get all the above as one 4 value tuple for `draw_line()`.old_cross_x = 0old_cross_y = 0#thresholdwhile(True): clock.tick() img = sensor.snapshot() img.binary(binary_threshold) img.gaussian(5) img.gaussian(5) # 去除摄像头畸变， 这里我们采用的是13.8mm的，近距离没有畸变效果 # if enable_lens_corr: img.lens_corr(1.8) # for 2.8mm lens... # `threshold` controls how many lines in the image are found. Only lines with # edge difference magnitude sums greater than `threshold` are detected... # More about `threshold` - each pixel in the image contributes a magnitude value # to a line. The sum of all contributions is the magintude for that line. Then # when lines are merged their magnitudes are added togheter. Note that `threshold` # filters out lines with low magnitudes before merging. To see the magnitude of # un-merged lines set `theta_margin` and `rho_margin` to 0... # `theta_margin` and `rho_margin` control merging similar lines. If two lines # theta and rho value differences are less than the margins then they are merged. lines = img.find_lines(threshold = 2000, theta_margin = 40, rho_margin = 20, roi=(5, 5, 150,110)) for line in lines: pass # img.draw_line(line.line(), color = (255, 0, 0)) # 如果画面中有两条直线 if len(lines) &gt;= 2: (line1, line2) = find_verticle_lines(lines) if (line1 == None or line2 == None): # 没有垂直的直线 draw_cross_point(old_cross_x, old_cross_y) continue # 画线 # img.draw_line(line1.line(), color = (255, 0, 0)) # img.draw_line(line2.line(), color = (255, 0, 0)) # 计算交点 (cross_x, cross_y) = calculate_intersection(line1, line2) print(&quot;cross_x: %d, cross_y: %d&quot;%(old_cross_x, old_cross_y)) if cross_x != -1 and cross_y != -1: if abs(cross_x - old_cross_x) &lt; move_threshold and abs(cross_y - old_cross_y) &lt; move_threshold: # 小于移动阈值， 不移动 pass else: old_cross_x = int(old_cross_x * (1 - forget_ratio) + cross_x * forget_ratio) old_cross_y = int(old_cross_y * (1 - forget_ratio) + cross_y * forget_ratio) draw_cross_point(old_cross_x, old_cross_y) print(&quot;FPS %f&quot; % clock.fps())# About negative rho values:## A [theta+0:-rho] tuple is the same as [theta+180:+rho]. PS:源代码链接http://makermare.com:60010/example/feature/right-angle-detection.html 方法二（改进）：利用OpenMV视野中像素值的突变寻找直角等特征因为方法一寻找直角交点的缺陷性，经过我们的讨论，认为也可以计算图像区域中目标物体所占的总像素的多少，从而区分直线和直角。 直角和直线出现在OpenMV视野区域中的时候，两者的像素会有较大的差异，通过合理地调节阈值，可以将直线和直角区分开来。（经过大致测算，使用此方法直角和直线的总像素个数大约相差一倍左右）。 这里先贴上自己写的部分程序： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import sensor, image, timefrom pyb import LEDfrom pyb import UART,Timeruart = UART(3,115200)#初始化串口 波特率 115200sensor.reset()#sensor.set_vflip(True)#sensor.set_hmirror(True)sensor.set_pixformat(sensor.RGB565)sensor.set_framesize(sensor.QQQVGA) # 80x60 (4,800 pixels) - O(N^2) max = 2,3040,000.#sensor.set_windowing([0,20,80,40])sensor.skip_frames(time = 2000) # WARNING: If you use QQVGA it may take secondsclock = time.clock() # to process a frame sometimes.x_width = 80y_height = 60 # 图像是QQQVGA,则图像是80x60的分辨率class singleline_check(): flager = 0 rho_err = 0 theta_err = 0 is_verticle = 0singleline_check = singleline_check()BINARY_THRESHOLD = (30, 120) #二值化阈值verticle_pixels_threshold = [200, 300] #像素最大和最小阈值track_line_threshold = [100, 200]def count_pixels_with_movement(img): global x_width, y_height x_pos = 0 y_pos = 0 total_white_pixels = 0 for x_pos in range(x_width): for y_pos in range(y_height): if img.get_pixel(x_pos, y_pos) == 255: total_white_pixels += 1 # 利用get_pixel()方法，计算当前图像中白色色块所占的像素大小 print(&quot;total white pixels are&quot;, total_white_pixels) if total_white_pixels &gt;= verticle_pixels_threshold[0] and total_white_pixels &lt;= verticle_pixels_threshold[1]: singleline_check.is_verticle = 2 elif total_white_pixels &gt;= track_line_threshold[0] and total_white_pixels &lt;= track_line_threshold[1]: singleline_check.is_verticle = 1 else: singleline_check.is_verticle = 0 print(&quot;is verticle flag:&quot;, singleline_check.is_verticle)while True: img = sensor.snapshot().binary([BINARY_THRESHOLD]).erode(1) count_pixels_with_movement(img) # 之后打包发送数据给飞控，这里略... 程序中，count_pixels_with_movement(img)用于计算此时视野范围中二值化后的白色目标色块所占的总像素的个数。只要每一个像素阈值（如verticle_pixels_threshold和track_line_threshold）设置得恰到，运用此方法，可以较为准确地区分并识别出前方有直角，并会回馈一个标志位singleline_check.is_verticle = 2给飞控，使其做出直角判断并转弯。程序实测帧率在30-40左右，能够基本满足要求。 识别特征信息（可以用于识别飞机起飞降落点）数字识别按照例程，好像可以使用方法img.find_number()： 1234567891011121314151617181920212223# LetNet Exampleimport sensor, image, timesensor.reset() # Reset and initialize the sensor.sensor.set_contrast(3)sensor.set_pixformat(sensor.GRAYSCALE) # Set pixel format to RGB565 (or GRAYSCALE)sensor.set_framesize(sensor.QVGA) # Set frame size to QVGA (320x240)sensor.set_windowing((28, 28))sensor.skip_frames(time = 2000) # Wait for settings take effect.sensor.set_auto_gain(False)sensor.set_auto_exposure(False)clock = time.clock() # Create a clock object to track the FPS.while(True): clock.tick() # Update the FPS clock. img = sensor.snapshot() # Take a picture and return the image. out = img.invert().find_number() if out[1] &gt; 3.0: print(out[0]) #print(clock.fps()) # Note: OpenMV Cam runs about half as fast when connected # to the IDE. The FPS should increase once disconnected. PS: 来源于http://makermare.com:60010/example/feature/digital-recognition.html 好像因为新版本的固件不支持识别数字的方法img.find_number()了，我的是OpenMV 4,自己试了试好像会报错，不知道为啥，应该是官方文档说的这个原因： IDE报错：官方文档解释： 关键点识别无可奈何，好像暂时就只能使用寻找关键点的方法了.当需要识别特征信息的时候，可以使用官方自带的一个方法img.find_keypoints()，keypoints即关键点，当识别到物块的关键点后，保存到变量kpts2中，便可以进行匹配，即运用image.match_descriptor()方法，进行匹配度识别，若匹配到了，便可以在图像上画出特征点，运用方法img.draw_keypoints()。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283# 利用特征点检测特定物体例程。# 向相机显示一个对象，然后运行该脚本。 一组关键点将被提取一次，然后# 在以下帧中进行跟踪。 如果您想要一组新的关键点，请重新运行该脚本。# 注意：请参阅文档以调整find_keypoints和match_keypoints。import sensor, time, image# Reset sensorsensor.reset()# Sensor settingssensor.set_contrast(3)sensor.set_gainceiling(16)sensor.set_framesize(sensor.VGA)sensor.set_windowing((320, 240))sensor.set_pixformat(sensor.GRAYSCALE)sensor.skip_frames(time = 2000)sensor.set_auto_gain(False, value=100)#画出特征点def draw_keypoints(img, kpts): if kpts: print(kpts) img.draw_keypoints(kpts) img = sensor.snapshot() time.sleep(1000)kpts1 = None#kpts1保存目标物体的特征，可以从文件导入特征，但是不建议这么做。#kpts1 = image.load_descriptor(&quot;/desc.orb&quot;)#img = sensor.snapshot()#draw_keypoints(img, kpts1)clock = time.clock()while (True): clock.tick() img = sensor.snapshot() if (kpts1 == None): #如果是刚开始运行程序，提取最开始的图像作为目标物体特征，kpts1保存目标物体的特征 #默认会匹配目标特征的多种比例大小，而不仅仅是保存目标特征时的大小，比模版匹配灵活。 # NOTE: By default find_keypoints returns multi-scale keypoints extracted from an image pyramid. kpts1 = img.find_keypoints(max_keypoints=150, threshold=10, scale_factor=1.2) #image.find_keypoints(roi=Auto, threshold=20, normalized=False, scale_factor=1.5, max_keypoints=100, corner_detector=CORNER_AGAST) #roi表示识别的区域，是一个元组（x,y,w,h）,默认与framsesize大小一致。 #threshold是0~255的一个阈值，用来控制特征点检测的角点数量。用默认的AGAST特征点检测，这个阈值大概是20。用FAST特征点检测，这个阈值大概是60～80。阈值越低，获得的角点越多。 #normalized是一个布尔数值，默认是False，可以匹配目标特征的多种大小（比ncc模版匹配效果灵活）。如果设置为True，关闭特征点检测的多比例结果，仅匹配目标特征的一种大小（类似于模版匹配），但是运算速度会更快一些。 #scale_factor是一个大于1.0的浮点数。这个数值越高，检测速度越快，但是匹配准确率会下降。一般在1.35~1.5左右最佳。 #max_keypoints是一个物体可提取的特征点的最大数量。如果一个物体的特征点太多导致RAM内存爆掉，减小这个数值。 #corner_detector是特征点检测采取的算法，默认是AGAST算法。FAST算法会更快但是准确率会下降。 draw_keypoints(img, kpts1) #画出此时的目标特征 else: #当与最开始的目标特征进行匹配时，默认设置normalized=True，只匹配目标特征的一种大小。 # NOTE: When extracting keypoints to match the first descriptor, we use normalized=True to extract # keypoints from the first scale only, which will match one of the scales in the first descriptor. kpts2 = img.find_keypoints(max_keypoints=150, threshold=10, normalized=True) #如果检测到特征物体 if (kpts2): #匹配当前找到的特征和最初的目标特征的相似度 match = image.match_descriptor(kpts1, kpts2, threshold=85) #image.match_descriptor(descritor0, descriptor1, threshold=70, filter_outliers=False)。本函数返回kptmatch对象。 #threshold阈值设置匹配的准确度，用来过滤掉有歧义的匹配。这个值越小，准确度越高。阈值范围0～100，默认70 #filter_outliers默认关闭。 #match.count()是kpt1和kpt2的匹配的近似特征点数目。 #如果大于10，证明两个特征相似，匹配成功。 if (match.count()&gt;10): # If we have at least n &quot;good matches&quot; # Draw bounding rectangle and cross. #在匹配到的目标特征中心画十字和矩形框。 img.draw_rectangle(match.rect()) img.draw_cross(match.cx(), match.cy(), size=10) #match.theta()是匹配到的特征物体相对目标物体的旋转角度。 print(kpts2, &quot;matched:%d dt:%d&quot;%(match.count(), match.theta())) #不建议draw_keypoints画出特征角点。 # NOTE: uncomment if you want to draw the keypoints #img.draw_keypoints(kpts2, size=KEYPOINTS_SIZE, matched=True) # Draw FPS #打印帧率。 img.draw_string(0, 0, &quot;FPS:%.2f&quot;%(clock.fps())) PS:来源于星瞳科技例程https://book.openmv.cc/example/09-Feature-Detection/keypoints.html 这个例程还需要完善，运用到具体的OpenMV代码中需要将函数再次封装和修改。 识别二维码（QR Code）、条形码（Barcode）和标记（AprilTag）对于二维码和条形码，相对来说较为简单，其核心语句就只有一句，分别为： img.find_qrcodes() 寻找二维码信息例如： 12345678910111213141516import sensor, image, timesensor.reset()sensor.set_pixformat(sensor.GRAYSCALE)sensor.set_framesize(sensor.VGA)sensor.set_windowing((240, 240)) # look at center 240x240 pixels of the VGA resolution.sensor.skip_frames(30)sensor.set_auto_gain(False) # must turn this off to prevent image washout...clock = time.clock()while(True): clock.tick() img = sensor.snapshot() for code in img.find_qrcodes(): print(code) print(clock.fps()) img.find_barcodes() 寻找条形码信息例如： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import sensor, image, time, mathsensor.reset()sensor.set_pixformat(sensor.GRAYSCALE)sensor.set_framesize(sensor.VGA) # High Res!sensor.set_windowing((640, 80)) # V Res of 80 == less work (40 for 2X the speed).sensor.skip_frames(time = 2000)sensor.set_auto_gain(False) # must turn this off to prevent image washout...sensor.set_auto_whitebal(False) # must turn this off to prevent image washout...clock = time.clock()# 条形码检测可以在OpenMV Cam的OV7725相机模块的640x480分辨率下运行。# 条码检测也将在RGB565模式下工作，但分辨率较低。 也就是说，# 条形码检测需要更高的分辨率才能正常工作，因此应始终以640x480的灰度运行。def barcode_name(code): if(code.type() == image.EAN2): return &quot;EAN2&quot; if(code.type() == image.EAN5): return &quot;EAN5&quot; if(code.type() == image.EAN8): return &quot;EAN8&quot; if(code.type() == image.UPCE): return &quot;UPCE&quot; if(code.type() == image.ISBN10): return &quot;ISBN10&quot; if(code.type() == image.UPCA): return &quot;UPCA&quot; if(code.type() == image.EAN13): return &quot;EAN13&quot; if(code.type() == image.ISBN13): return &quot;ISBN13&quot; if(code.type() == image.I25): return &quot;I25&quot; if(code.type() == image.DATABAR): return &quot;DATABAR&quot; if(code.type() == image.DATABAR_EXP): return &quot;DATABAR_EXP&quot; if(code.type() == image.CODABAR): return &quot;CODABAR&quot; if(code.type() == image.CODE39): return &quot;CODE39&quot; if(code.type() == image.PDF417): return &quot;PDF417&quot; if(code.type() == image.CODE93): return &quot;CODE93&quot; if(code.type() == image.CODE128): return &quot;CODE128&quot;while(True): clock.tick() img = sensor.snapshot() codes = img.find_barcodes() for code in codes: img.draw_rectangle(code.rect()) print_args = (barcode_name(code), code.payload(), (180 * code.rotation()) / math.pi, code.quality(), clock.fps()) print(&quot;Barcode %s, Payload \\&quot;%s\\&quot;, rotation %f (degrees), quality %d, FPS %f&quot; % print_args) if not codes: print(&quot;FPS %f&quot; % clock.fps()) img.find_apriltags() 寻找标记信息例如： 123456789101112131415161718192021222324252627import sensor, image, time, mathsensor.reset()sensor.set_pixformat(sensor.RGB565)sensor.set_framesize(sensor.VGA) # we run out of memory if the resolution is much bigger...sensor.set_windowing((160, 120)) # Look at center 160x120 pixels of the VGA resolution.sensor.skip_frames(time = 2000)sensor.set_auto_gain(False) # must turn this off to prevent image washout...sensor.set_auto_whitebal(False) # must turn this off to prevent image washout...clock = time.clock()# 注意！与find_qrcodes不同，find_apriltags方法不需要对镜像进行镜头校正。#标签系列有什么区别？ 那么，例如，TAG16H5家族实际上是一个4x4的方形标签。 #所以，这意味着可以看到比6x6的TAG36H11标签更长的距离。 然而，较低的H值（H5对H11）#意味着4x4标签的假阳性率远高于6x6标签。 所以，除非你有理由使用其他标签系列，#否则使用默认族TAG36H11。while(True): clock.tick() img = sensor.snapshot() for tag in img.find_apriltags(): # defaults to TAG36H11 img.draw_rectangle(tag.rect(), color = (255, 0, 0)) img.draw_cross(tag.cx(), tag.cy(), color = (0, 255, 0)) print_args = (tag.id(), (180 * tag.rotation()) / math.pi) print(&quot;Tag Family TAG36H11, Tag ID %d, rotation %f (degrees)&quot; % print_args) print(clock.fps()) 另附–我们组的飞机方案最近，我们组在紧张地准备电赛测控四旋翼无人机的题目，在准备过程中，我们购买了无名创新的TM4C123的飞控，正在研究源码和视觉模块的运用。无名创新的飞控是开源的，在B站上面有对应的讲解视频，涉及操作类和代码讲解类的视频，下面附上其网址： 无名科创开源飞控QQ群：540707961CSDN博客优酷ID：NamelessCotrun无名小哥B站教学视频淘宝店铺百度贴吧:无名科创开源飞控公司官网 我们组在学习的过程中，按照老师给的建议，决定采用外加一个TM4C123的控制板作为模拟的遥控器（即脱掉遥控器自主飞行降落），其中，无名的飞控是采用PPM信号编码和解码的方式，为了模仿遥控器的信号，我们参考了网上的一些文档，觉得十分有用： PPM原理和代码https://blog.csdn.net/Aaron_Suen/article/details/79416477https://blog.csdn.net/yibu_refresh/article/details/45752131 这几天我们队进度有点卡顿了，正在向两方面进展。我们准备了两个方案：使用之前所说的外置模拟遥控器的方式使用无名飞控自带的SDK模式进行二次开发 感谢你的耐心阅读呀(๑◡๑)，原创总结不易，收藏并评论一下呗~ 你的支持就是我前进的动力呀~","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"Python","slug":"学习笔记/Python","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/"}],"tags":[{"name":"电赛","slug":"电赛","permalink":"http://sublimerui.top/tags/%E7%94%B5%E8%B5%9B/"},{"name":"OpenMV","slug":"OpenMV","permalink":"http://sublimerui.top/tags/OpenMV/"},{"name":"Python","slug":"Python","permalink":"http://sublimerui.top/tags/Python/"}]},{"title":"你好鸭~","slug":"你好鸭~","date":"2019-05-22T01:06:02.000Z","updated":"2020-10-12T17:07:54.215Z","comments":true,"path":"archives/f2d5fff6.html","link":"","permalink":"http://sublimerui.top/archives/f2d5fff6.html","excerpt":"你好！这里是Sublime的个人小屋哦ヾ(◍°∇°◍)ﾉﾞ从今天起，我准备开始写博客啦~希望大家支持我呀^_^","text":"你好！这里是Sublime的个人小屋哦ヾ(◍°∇°◍)ﾉﾞ从今天起，我准备开始写博客啦~希望大家支持我呀^_^ 1printf(&quot;hello world, hello my blog!&quot;); 1cout&lt;&lt;&quot;hello world, hello my blog!&quot;; 1echo&quot;hello world, hello my blog!&quot;; 1alert(&quot;hello world, hello my blog!&quot;) 1print(&quot;hello world, hello my blog!&quot;) 1MsgBox&quot;hello world, hello my blog!&quot; 1echo &#x27;hello world, hello my blog!&#x27; 1print&#x27;hello world, hello my blog!&#x27; 1System.out.println(&quot;hello world, hello my blog!&quot;); 1System.Console.WriteLine(&quot;hello world, hello my blog!&quot;) 1&lt;br/&gt;hello world, hello my blog!&lt;br/&gt; Have a GOOD TIME!你的鼓励就是我前进的动力呐~(◕ᴗ◕✿)","categories":[{"name":"杂记","slug":"杂记","permalink":"http://sublimerui.top/categories/%E6%9D%82%E8%AE%B0/"}],"tags":[]}],"categories":[{"name":"杂记","slug":"杂记","permalink":"http://sublimerui.top/categories/%E6%9D%82%E8%AE%B0/"},{"name":"学习笔记","slug":"学习笔记","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"C++","slug":"学习笔记/C","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C/"},{"name":"OpenCV","slug":"学习笔记/OpenCV","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OpenCV/"},{"name":"小工具","slug":"小工具","permalink":"http://sublimerui.top/categories/%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"Python","slug":"学习笔记/Python","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python/"},{"name":"数据库","slug":"学习笔记/数据库","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"图形界面","slug":"学习笔记/图形界面","permalink":"http://sublimerui.top/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/"},{"name":"网站搭建","slug":"网站搭建","permalink":"http://sublimerui.top/categories/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"},{"name":"知识总结","slug":"知识总结","permalink":"http://sublimerui.top/categories/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"},{"name":"计算机考试","slug":"知识总结/计算机考试","permalink":"http://sublimerui.top/categories/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%80%83%E8%AF%95/"}],"tags":[{"name":"主题相关","slug":"主题相关","permalink":"http://sublimerui.top/tags/%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3/"},{"name":"OpenCV, 图像处理","slug":"OpenCV-图像处理","permalink":"http://sublimerui.top/tags/OpenCV-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"},{"name":"友链","slug":"友链","permalink":"http://sublimerui.top/tags/%E5%8F%8B%E9%93%BE/"},{"name":"SQL Server","slug":"SQL-Server","permalink":"http://sublimerui.top/tags/SQL-Server/"},{"name":"pyodbc","slug":"pyodbc","permalink":"http://sublimerui.top/tags/pyodbc/"},{"name":"PyQt","slug":"PyQt","permalink":"http://sublimerui.top/tags/PyQt/"},{"name":"GUI","slug":"GUI","permalink":"http://sublimerui.top/tags/GUI/"},{"name":"Qt Designer","slug":"Qt-Designer","permalink":"http://sublimerui.top/tags/Qt-Designer/"},{"name":"VPS","slug":"VPS","permalink":"http://sublimerui.top/tags/VPS/"},{"name":"域名","slug":"域名","permalink":"http://sublimerui.top/tags/%E5%9F%9F%E5%90%8D/"},{"name":"CDN","slug":"CDN","permalink":"http://sublimerui.top/tags/CDN/"},{"name":"计算机四级","slug":"计算机四级","permalink":"http://sublimerui.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%9B%E7%BA%A7/"},{"name":"思维导图","slug":"思维导图","permalink":"http://sublimerui.top/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"},{"name":"Hexo","slug":"Hexo","permalink":"http://sublimerui.top/tags/Hexo/"},{"name":"电赛","slug":"电赛","permalink":"http://sublimerui.top/tags/%E7%94%B5%E8%B5%9B/"},{"name":"OpenMV","slug":"OpenMV","permalink":"http://sublimerui.top/tags/OpenMV/"},{"name":"Python","slug":"Python","permalink":"http://sublimerui.top/tags/Python/"},{"name":"WordPress","slug":"WordPress","permalink":"http://sublimerui.top/tags/WordPress/"},{"name":"电协官网","slug":"电协官网","permalink":"http://sublimerui.top/tags/%E7%94%B5%E5%8D%8F%E5%AE%98%E7%BD%91/"},{"name":"图床","slug":"图床","permalink":"http://sublimerui.top/tags/%E5%9B%BE%E5%BA%8A/"}]}